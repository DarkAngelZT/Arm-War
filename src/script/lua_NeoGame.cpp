/*
** Lua binding: NeoGame
** Generated automatically by tolua++-1.0.93 on Tue Sep  5 18:11:03 2017.
*/

#ifndef __cplusplus
#include "stdlib.h"
#endif
#include "string.h"

#include "tolua++.h"

/* Exported function */
TOLUA_API int  tolua_NeoGame_open (lua_State* tolua_S);

#include "required.h"

/* function to release collected object via destructor */
#ifdef __cplusplus

static int tolua_collect_irr__core__aabbox3df (lua_State* tolua_S)
{
 irr::core::aabbox3df* self = (irr::core::aabbox3df*) tolua_tousertype(tolua_S,1,0);
	Mtolua_delete(self);
	return 0;
}

static int tolua_collect_std__vector_int_ (lua_State* tolua_S)
{
 std::vector<int>* self = (std::vector<int>*) tolua_tousertype(tolua_S,1,0);
	Mtolua_delete(self);
	return 0;
}

static int tolua_collect_irr__SKeyMap (lua_State* tolua_S)
{
 irr::SKeyMap* self = (irr::SKeyMap*) tolua_tousertype(tolua_S,1,0);
	Mtolua_delete(self);
	return 0;
}

static int tolua_collect_irr__video__SColor (lua_State* tolua_S)
{
 irr::video::SColor* self = (irr::video::SColor*) tolua_tousertype(tolua_S,1,0);
	Mtolua_delete(self);
	return 0;
}

static int tolua_collect_irr__core__dimension2d_unsigned_ (lua_State* tolua_S)
{
 irr::core::dimension2d<unsigned>* self = (irr::core::dimension2d<unsigned>*) tolua_tousertype(tolua_S,1,0);
	Mtolua_delete(self);
	return 0;
}

static int tolua_collect_irr__core__vector2d_int_ (lua_State* tolua_S)
{
 irr::core::vector2d<int>* self = (irr::core::vector2d<int>*) tolua_tousertype(tolua_S,1,0);
	Mtolua_delete(self);
	return 0;
}

static int tolua_collect_irr__core__vector3df (lua_State* tolua_S)
{
 irr::core::vector3df* self = (irr::core::vector3df*) tolua_tousertype(tolua_S,1,0);
	Mtolua_delete(self);
	return 0;
}

static int tolua_collect_irr__core__aabbox3d_float_ (lua_State* tolua_S)
{
 irr::core::aabbox3d<float>* self = (irr::core::aabbox3d<float>*) tolua_tousertype(tolua_S,1,0);
	Mtolua_delete(self);
	return 0;
}

static int tolua_collect_irr__core__aabbox3d_int_ (lua_State* tolua_S)
{
 irr::core::aabbox3d<int>* self = (irr::core::aabbox3d<int>*) tolua_tousertype(tolua_S,1,0);
	Mtolua_delete(self);
	return 0;
}

static int tolua_collect_irr__core__dimension2d_float_ (lua_State* tolua_S)
{
 irr::core::dimension2d<float>* self = (irr::core::dimension2d<float>*) tolua_tousertype(tolua_S,1,0);
	Mtolua_delete(self);
	return 0;
}

static int tolua_collect_std__vector_float_ (lua_State* tolua_S)
{
 std::vector<float>* self = (std::vector<float>*) tolua_tousertype(tolua_S,1,0);
	Mtolua_delete(self);
	return 0;
}

static int tolua_collect_BasicExplosionEffectParams (lua_State* tolua_S)
{
 BasicExplosionEffectParams* self = (BasicExplosionEffectParams*) tolua_tousertype(tolua_S,1,0);
	Mtolua_delete(self);
	return 0;
}

static int tolua_collect_irr__video__SColorHSL (lua_State* tolua_S)
{
 irr::video::SColorHSL* self = (irr::video::SColorHSL*) tolua_tousertype(tolua_S,1,0);
	Mtolua_delete(self);
	return 0;
}

static int tolua_collect_irr__core__CMatrix4_float_ (lua_State* tolua_S)
{
 irr::core::CMatrix4<float>* self = (irr::core::CMatrix4<float>*) tolua_tousertype(tolua_S,1,0);
	Mtolua_delete(self);
	return 0;
}

static int tolua_collect_irr__core__vector3d_float_ (lua_State* tolua_S)
{
 irr::core::vector3d<float>* self = (irr::core::vector3d<float>*) tolua_tousertype(tolua_S,1,0);
	Mtolua_delete(self);
	return 0;
}

static int tolua_collect_irr__core__vector3d_int_ (lua_State* tolua_S)
{
 irr::core::vector3d<int>* self = (irr::core::vector3d<int>*) tolua_tousertype(tolua_S,1,0);
	Mtolua_delete(self);
	return 0;
}

static int tolua_collect_irr__core__matrix4 (lua_State* tolua_S)
{
 irr::core::matrix4* self = (irr::core::matrix4*) tolua_tousertype(tolua_S,1,0);
	Mtolua_delete(self);
	return 0;
}

static int tolua_collect_irr__core__dimension2d_int_ (lua_State* tolua_S)
{
 irr::core::dimension2d<int>* self = (irr::core::dimension2d<int>*) tolua_tousertype(tolua_S,1,0);
	Mtolua_delete(self);
	return 0;
}

static int tolua_collect_irr__video__SLight (lua_State* tolua_S)
{
 irr::video::SLight* self = (irr::video::SLight*) tolua_tousertype(tolua_S,1,0);
	Mtolua_delete(self);
	return 0;
}

static int tolua_collect_irr__core__vector2d_float_ (lua_State* tolua_S)
{
 irr::core::vector2d<float>* self = (irr::core::vector2d<float>*) tolua_tousertype(tolua_S,1,0);
	Mtolua_delete(self);
	return 0;
}

static int tolua_collect_irr__core__quaternion (lua_State* tolua_S)
{
 irr::core::quaternion* self = (irr::core::quaternion*) tolua_tousertype(tolua_S,1,0);
	Mtolua_delete(self);
	return 0;
}

static int tolua_collect_irr__video__SColorf (lua_State* tolua_S)
{
 irr::video::SColorf* self = (irr::video::SColorf*) tolua_tousertype(tolua_S,1,0);
	Mtolua_delete(self);
	return 0;
}

static int tolua_collect_std__vector_std__string_ (lua_State* tolua_S)
{
 std::vector<std::string>* self = (std::vector<std::string>*) tolua_tousertype(tolua_S,1,0);
	Mtolua_delete(self);
	return 0;
}

static int tolua_collect_BasicExplosionParams (lua_State* tolua_S)
{
 BasicExplosionParams* self = (BasicExplosionParams*) tolua_tousertype(tolua_S,1,0);
	Mtolua_delete(self);
	return 0;
}
#endif


/* function to register type */
static void tolua_reg_types (lua_State* tolua_S)
{
 tolua_usertype(tolua_S,"irr::core::aabbox3df");
 tolua_usertype(tolua_S,"irr::scene::IDummyTransformationSceneNode");
 tolua_usertype(tolua_S,"irr::SKeyMap");
 tolua_usertype(tolua_S,"irr::core::matrix4");
 tolua_usertype(tolua_S,"irr::scene::IAnimatedMesh");
 tolua_usertype(tolua_S,"irr::core::vector3df");
 tolua_usertype(tolua_S,"irr::core::aabbox3d<float>");
 tolua_usertype(tolua_S,"irr::core::quaternion");
 tolua_usertype(tolua_S,"irr::video::ITexture");
 tolua_usertype(tolua_S,"irr::scene::IParticleCylinderEmitter");
 tolua_usertype(tolua_S,"std::vector<std::string>");
 tolua_usertype(tolua_S,"irr::core::vector2d<float>");
 tolua_usertype(tolua_S,"LuaHelper");
 tolua_usertype(tolua_S,"irr::core::dimension2d<unsigned int>");
 tolua_usertype(tolua_S,"SfxManager");
 tolua_usertype(tolua_S,"irr::IReferenceCounted");
 tolua_usertype(tolua_S,"BasicExplosionParams");
 tolua_usertype(tolua_S,"irr::core::CMatrix4<float>");
 tolua_usertype(tolua_S,"HingeJoint");
 tolua_usertype(tolua_S,"irr::scene::IBillboardSceneNode");
 tolua_usertype(tolua_S,"irr::core::vector2d<int>");
 tolua_usertype(tolua_S,"irr::scene::IParticleEmitter");
 tolua_usertype(tolua_S,"irr::core::aabbox3d<f32>");
 tolua_usertype(tolua_S,"irr::scene::IParticleAttractionAffector");
 tolua_usertype(tolua_S,"NeoData");
 tolua_usertype(tolua_S,"NeoTrigger");
 tolua_usertype(tolua_S,"irr::video::SLight");
 tolua_usertype(tolua_S,"RigidBody");
 tolua_usertype(tolua_S,"irr::scene::IShadowVolumeSceneNode");
 tolua_usertype(tolua_S,"std::vector<int>");
 tolua_usertype(tolua_S,"irr::scene::IAnimatedMeshSceneNode");
 tolua_usertype(tolua_S,"irr::video::SColor");
 tolua_usertype(tolua_S,"NeoEditor");
 tolua_usertype(tolua_S,"irr::scene::ISceneNode");
 tolua_usertype(tolua_S,"irr::scene::IParticleAnimatedMeshSceneNodeEmitter");
 tolua_usertype(tolua_S,"irr::scene::IParticleBoxEmitter");
 tolua_usertype(tolua_S,"irr::core::vector3d<int>");
 tolua_usertype(tolua_S,"Application");
 tolua_usertype(tolua_S,"irr::core::dimension2d<int>");
 tolua_usertype(tolua_S,"irr::scene::ISceneNodeAnimator");
 tolua_usertype(tolua_S,"irr::scene::IParticleRingEmitter");
 tolua_usertype(tolua_S,"NeoScene");
 tolua_usertype(tolua_S,"irr::scene::IParticleSystemSceneNode");
 tolua_usertype(tolua_S,"irr::scene::IMeshSceneNode");
 tolua_usertype(tolua_S,"Explosion");
 tolua_usertype(tolua_S,"irr::core::vector2d<unsigned>");
 tolua_usertype(tolua_S,"BasicExplosionEffectParams");
 tolua_usertype(tolua_S,"irr::scene::IParticleFadeOutAffector");
 tolua_usertype(tolua_S,"irr::scene::IParticleGravityAffector");
 tolua_usertype(tolua_S,"irr::core::aabbox3d<int>");
 tolua_usertype(tolua_S,"irr::core::dimension2d<float>");
 tolua_usertype(tolua_S,"irr::io::IAttributeExchangingObject");
 tolua_usertype(tolua_S,"irr::core::dimension2d<unsigned>");
 tolua_usertype(tolua_S,"irr::scene::IMesh");
 tolua_usertype(tolua_S,"std::vector<float>");
 tolua_usertype(tolua_S,"NeoGraphics");
 tolua_usertype(tolua_S,"GameObject");
 tolua_usertype(tolua_S,"irr::core::vector2df");
 tolua_usertype(tolua_S,"irr::video::SColorHSL");
 tolua_usertype(tolua_S,"NeoEvent");
 tolua_usertype(tolua_S,"irr::scene::ILightSceneNode");
 tolua_usertype(tolua_S,"Component");
 tolua_usertype(tolua_S,"irr::core::vector3d<float>");
 tolua_usertype(tolua_S,"irr::scene::IParticleRotationAffector");
 tolua_usertype(tolua_S,"irr::scene::IParticleAffector");
 tolua_usertype(tolua_S,"irr::scene::IParticleMeshEmitter");
 tolua_usertype(tolua_S,"irr::scene::ICameraSceneNode");
 tolua_usertype(tolua_S,"irr::video::SColorf");
 tolua_usertype(tolua_S,"irr::scene::IParticleSphereEmitter");
 tolua_usertype(tolua_S,"NeoGameLogic");
}

/* method: getInstance of class  Application */
#ifndef TOLUA_DISABLE_tolua_NeoGame_Application_getInstance00
static int tolua_NeoGame_Application_getInstance00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"Application",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   Application* tolua_ret = (Application*)  Application::getInstance();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"Application");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getInstance'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isRunning of class  Application */
#ifndef TOLUA_DISABLE_tolua_NeoGame_Application_isRunning00
static int tolua_NeoGame_Application_isRunning00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Application",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Application* self = (const Application*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isRunning'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isRunning();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isRunning'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Quit of class  Application */
#ifndef TOLUA_DISABLE_tolua_NeoGame_Application_Quit00
static int tolua_NeoGame_Application_Quit00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"Application",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  Application* self = (Application*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Quit'", NULL);
#endif
  {
   self->Quit();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Quit'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: clear of class  std::vector<std::string> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_std_vector_std__string__clear00
static int tolua_NeoGame_std_vector_std__string__clear00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"std::vector<std::string>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  std::vector<std::string>* self = (std::vector<std::string>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'clear'", NULL);
#endif
  {
   self->clear();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'clear'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: size of class  std::vector<std::string> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_std_vector_std__string__size00
static int tolua_NeoGame_std_vector_std__string__size00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const std::vector<std::string>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const std::vector<std::string>* self = (const std::vector<std::string>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'size'", NULL);
#endif
  {
   int tolua_ret = (int)  self->size();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'size'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator[] of class  std::vector<std::string> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_std_vector_std__string___geti00
static int tolua_NeoGame_std_vector_std__string___geti00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const std::vector<std::string>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const std::vector<std::string>* self = (const std::vector<std::string>*)  tolua_tousertype(tolua_S,1,0);
  int index = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator[]'", NULL);
#endif
  {
   const std::string tolua_ret = (const std::string)  self->operator[](index);
   tolua_pushcppstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.geti'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator&[] of class  std::vector<std::string> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_std_vector_std__string___seti00
static int tolua_NeoGame_std_vector_std__string___seti00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"std::vector<std::string>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  std::vector<std::string>* self = (std::vector<std::string>*)  tolua_tousertype(tolua_S,1,0);
  int index = ((int)  tolua_tonumber(tolua_S,2,0));
  std::string tolua_value = ((std::string)  tolua_tocppstring(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator&[]'", NULL);
#endif
  self->operator[](index) =  tolua_value;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.seti'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator[] of class  std::vector<std::string> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_std_vector_std__string___geti01
static int tolua_NeoGame_std_vector_std__string___geti01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"std::vector<std::string>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  std::vector<std::string>* self = (std::vector<std::string>*)  tolua_tousertype(tolua_S,1,0);
  int index = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator[]'", NULL);
#endif
  {
   std::string tolua_ret = (std::string)  self->operator[](index);
   tolua_pushcppstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_std_vector_std__string___geti00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: push_back of class  std::vector<std::string> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_std_vector_std__string__push_back00
static int tolua_NeoGame_std_vector_std__string__push_back00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"std::vector<std::string>",0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  std::vector<std::string>* self = (std::vector<std::string>*)  tolua_tousertype(tolua_S,1,0);
  std::string val = ((std::string)  tolua_tocppstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'push_back'", NULL);
#endif
  {
   self->push_back(val);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'push_back'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  std::vector<std::string> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_std_vector_std__string__new00
static int tolua_NeoGame_std_vector_std__string__new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"std::vector<std::string>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   std::vector<std::string>* tolua_ret = (std::vector<std::string>*)  Mtolua_new((std::vector<std::string>)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"std::vector<std::string>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  std::vector<std::string> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_std_vector_std__string__new00_local
static int tolua_NeoGame_std_vector_std__string__new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"std::vector<std::string>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   std::vector<std::string>* tolua_ret = (std::vector<std::string>*)  Mtolua_new((std::vector<std::string>)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"std::vector<std::string>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  std::vector<std::string> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_std_vector_std__string__delete00
static int tolua_NeoGame_std_vector_std__string__delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"std::vector<std::string>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  std::vector<std::string>* self = (std::vector<std::string>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: clear of class  std::vector<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_std_vector_int__clear00
static int tolua_NeoGame_std_vector_int__clear00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"std::vector<int>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  std::vector<int>* self = (std::vector<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'clear'", NULL);
#endif
  {
   self->clear();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'clear'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: size of class  std::vector<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_std_vector_int__size00
static int tolua_NeoGame_std_vector_int__size00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const std::vector<int>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const std::vector<int>* self = (const std::vector<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'size'", NULL);
#endif
  {
   int tolua_ret = (int)  self->size();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'size'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator[] of class  std::vector<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_std_vector_int___geti00
static int tolua_NeoGame_std_vector_int___geti00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const std::vector<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const std::vector<int>* self = (const std::vector<int>*)  tolua_tousertype(tolua_S,1,0);
  int index = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator[]'", NULL);
#endif
  {
   const int tolua_ret = (const int)  self->operator[](index);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.geti'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator&[] of class  std::vector<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_std_vector_int___seti00
static int tolua_NeoGame_std_vector_int___seti00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"std::vector<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  std::vector<int>* self = (std::vector<int>*)  tolua_tousertype(tolua_S,1,0);
  int index = ((int)  tolua_tonumber(tolua_S,2,0));
  int tolua_value = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator&[]'", NULL);
#endif
  self->operator[](index) =  tolua_value;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.seti'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator[] of class  std::vector<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_std_vector_int___geti01
static int tolua_NeoGame_std_vector_int___geti01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"std::vector<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  std::vector<int>* self = (std::vector<int>*)  tolua_tousertype(tolua_S,1,0);
  int index = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator[]'", NULL);
#endif
  {
   int tolua_ret = (int)  self->operator[](index);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_std_vector_int___geti00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: push_back of class  std::vector<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_std_vector_int__push_back00
static int tolua_NeoGame_std_vector_int__push_back00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"std::vector<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  std::vector<int>* self = (std::vector<int>*)  tolua_tousertype(tolua_S,1,0);
  int val = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'push_back'", NULL);
#endif
  {
   self->push_back(val);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'push_back'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  std::vector<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_std_vector_int__new00
static int tolua_NeoGame_std_vector_int__new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"std::vector<int>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   std::vector<int>* tolua_ret = (std::vector<int>*)  Mtolua_new((std::vector<int>)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"std::vector<int>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  std::vector<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_std_vector_int__new00_local
static int tolua_NeoGame_std_vector_int__new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"std::vector<int>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   std::vector<int>* tolua_ret = (std::vector<int>*)  Mtolua_new((std::vector<int>)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"std::vector<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  std::vector<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_std_vector_int__delete00
static int tolua_NeoGame_std_vector_int__delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"std::vector<int>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  std::vector<int>* self = (std::vector<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: clear of class  std::vector<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_std_vector_float__clear00
static int tolua_NeoGame_std_vector_float__clear00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"std::vector<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  std::vector<float>* self = (std::vector<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'clear'", NULL);
#endif
  {
   self->clear();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'clear'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: size of class  std::vector<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_std_vector_float__size00
static int tolua_NeoGame_std_vector_float__size00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const std::vector<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const std::vector<float>* self = (const std::vector<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'size'", NULL);
#endif
  {
   int tolua_ret = (int)  self->size();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'size'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator[] of class  std::vector<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_std_vector_float___geti00
static int tolua_NeoGame_std_vector_float___geti00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const std::vector<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const std::vector<float>* self = (const std::vector<float>*)  tolua_tousertype(tolua_S,1,0);
  int index = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator[]'", NULL);
#endif
  {
   const float tolua_ret = (const float)  self->operator[](index);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.geti'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator&[] of class  std::vector<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_std_vector_float___seti00
static int tolua_NeoGame_std_vector_float___seti00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"std::vector<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  std::vector<float>* self = (std::vector<float>*)  tolua_tousertype(tolua_S,1,0);
  int index = ((int)  tolua_tonumber(tolua_S,2,0));
  float tolua_value = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator&[]'", NULL);
#endif
  self->operator[](index) =  tolua_value;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.seti'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator[] of class  std::vector<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_std_vector_float___geti01
static int tolua_NeoGame_std_vector_float___geti01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"std::vector<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  std::vector<float>* self = (std::vector<float>*)  tolua_tousertype(tolua_S,1,0);
  int index = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator[]'", NULL);
#endif
  {
   float tolua_ret = (float)  self->operator[](index);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_std_vector_float___geti00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: push_back of class  std::vector<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_std_vector_float__push_back00
static int tolua_NeoGame_std_vector_float__push_back00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"std::vector<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  std::vector<float>* self = (std::vector<float>*)  tolua_tousertype(tolua_S,1,0);
  float val = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'push_back'", NULL);
#endif
  {
   self->push_back(val);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'push_back'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  std::vector<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_std_vector_float__new00
static int tolua_NeoGame_std_vector_float__new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"std::vector<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   std::vector<float>* tolua_ret = (std::vector<float>*)  Mtolua_new((std::vector<float>)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"std::vector<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  std::vector<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_std_vector_float__new00_local
static int tolua_NeoGame_std_vector_float__new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"std::vector<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   std::vector<float>* tolua_ret = (std::vector<float>*)  Mtolua_new((std::vector<float>)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"std::vector<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  std::vector<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_std_vector_float__delete00
static int tolua_NeoGame_std_vector_float__delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"std::vector<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  std::vector<float>* self = (std::vector<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: BitAnd of class  LuaHelper */
#ifndef TOLUA_DISABLE_tolua_NeoGame_LuaHelper_BitAnd00
static int tolua_NeoGame_LuaHelper_BitAnd00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"LuaHelper",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  int a = ((int)  tolua_tonumber(tolua_S,2,0));
  int b = ((int)  tolua_tonumber(tolua_S,3,0));
  {
   int tolua_ret = (int)  LuaHelper::BitAnd(a,b);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'BitAnd'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: BitOr of class  LuaHelper */
#ifndef TOLUA_DISABLE_tolua_NeoGame_LuaHelper_BitOr00
static int tolua_NeoGame_LuaHelper_BitOr00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"LuaHelper",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  int a = ((int)  tolua_tonumber(tolua_S,2,0));
  int b = ((int)  tolua_tonumber(tolua_S,3,0));
  {
   int tolua_ret = (int)  LuaHelper::BitOr(a,b);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'BitOr'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: BitXor of class  LuaHelper */
#ifndef TOLUA_DISABLE_tolua_NeoGame_LuaHelper_BitXor00
static int tolua_NeoGame_LuaHelper_BitXor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"LuaHelper",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  int a = ((int)  tolua_tonumber(tolua_S,2,0));
  int b = ((int)  tolua_tonumber(tolua_S,3,0));
  {
   int tolua_ret = (int)  LuaHelper::BitXor(a,b);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'BitXor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: BitNot of class  LuaHelper */
#ifndef TOLUA_DISABLE_tolua_NeoGame_LuaHelper_BitNot00
static int tolua_NeoGame_LuaHelper_BitNot00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"LuaHelper",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  int a = ((int)  tolua_tonumber(tolua_S,2,0));
  {
   int tolua_ret = (int)  LuaHelper::BitNot(a);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'BitNot'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: BitLshift of class  LuaHelper */
#ifndef TOLUA_DISABLE_tolua_NeoGame_LuaHelper_BitLshift00
static int tolua_NeoGame_LuaHelper_BitLshift00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"LuaHelper",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  int a = ((int)  tolua_tonumber(tolua_S,2,0));
  int n = ((int)  tolua_tonumber(tolua_S,3,0));
  {
   int tolua_ret = (int)  LuaHelper::BitLshift(a,n);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'BitLshift'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: BitRshift of class  LuaHelper */
#ifndef TOLUA_DISABLE_tolua_NeoGame_LuaHelper_BitRshift00
static int tolua_NeoGame_LuaHelper_BitRshift00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"LuaHelper",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  int a = ((int)  tolua_tonumber(tolua_S,2,0));
  int n = ((int)  tolua_tonumber(tolua_S,3,0));
  {
   int tolua_ret = (int)  LuaHelper::BitRshift(a,n);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'BitRshift'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::aabbox3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3di_new00
static int tolua_NeoGame_irr_core_aabbox3di_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::aabbox3d<int>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   irr::core::aabbox3d<int>* tolua_ret = (irr::core::aabbox3d<int>*)  Mtolua_new((irr::core::aabbox3d<int>)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::aabbox3d<int>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::aabbox3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3di_new00_local
static int tolua_NeoGame_irr_core_aabbox3di_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::aabbox3d<int>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   irr::core::aabbox3d<int>* tolua_ret = (irr::core::aabbox3d<int>*)  Mtolua_new((irr::core::aabbox3d<int>)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::aabbox3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::aabbox3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3di_new01
static int tolua_NeoGame_irr_core_aabbox3di_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::aabbox3d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<int>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector3d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector3d<int>* min = ((const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::vector3d<int>* max = ((const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,3,0));
  {
   irr::core::aabbox3d<int>* tolua_ret = (irr::core::aabbox3d<int>*)  Mtolua_new((irr::core::aabbox3d<int>)(*min,*max));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::aabbox3d<int>");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_aabbox3di_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::aabbox3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3di_new01_local
static int tolua_NeoGame_irr_core_aabbox3di_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::aabbox3d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<int>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector3d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector3d<int>* min = ((const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::vector3d<int>* max = ((const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,3,0));
  {
   irr::core::aabbox3d<int>* tolua_ret = (irr::core::aabbox3d<int>*)  Mtolua_new((irr::core::aabbox3d<int>)(*min,*max));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::aabbox3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_aabbox3di_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::aabbox3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3di_new02
static int tolua_NeoGame_irr_core_aabbox3di_new02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::aabbox3d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector3d<int>* init = ((const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,2,0));
  {
   irr::core::aabbox3d<int>* tolua_ret = (irr::core::aabbox3d<int>*)  Mtolua_new((irr::core::aabbox3d<int>)(*init));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::aabbox3d<int>");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_aabbox3di_new01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::aabbox3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3di_new02_local
static int tolua_NeoGame_irr_core_aabbox3di_new02_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::aabbox3d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector3d<int>* init = ((const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,2,0));
  {
   irr::core::aabbox3d<int>* tolua_ret = (irr::core::aabbox3d<int>*)  Mtolua_new((irr::core::aabbox3d<int>)(*init));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::aabbox3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_aabbox3di_new01_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::aabbox3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3di_new03
static int tolua_NeoGame_irr_core_aabbox3di_new03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::aabbox3d<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,7,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,8,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  int minx = ((int)  tolua_tonumber(tolua_S,2,0));
  int miny = ((int)  tolua_tonumber(tolua_S,3,0));
  int minz = ((int)  tolua_tonumber(tolua_S,4,0));
  int maxx = ((int)  tolua_tonumber(tolua_S,5,0));
  int maxy = ((int)  tolua_tonumber(tolua_S,6,0));
  int maxz = ((int)  tolua_tonumber(tolua_S,7,0));
  {
   irr::core::aabbox3d<int>* tolua_ret = (irr::core::aabbox3d<int>*)  Mtolua_new((irr::core::aabbox3d<int>)(minx,miny,minz,maxx,maxy,maxz));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::aabbox3d<int>");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_aabbox3di_new02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::aabbox3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3di_new03_local
static int tolua_NeoGame_irr_core_aabbox3di_new03_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::aabbox3d<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,7,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,8,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  int minx = ((int)  tolua_tonumber(tolua_S,2,0));
  int miny = ((int)  tolua_tonumber(tolua_S,3,0));
  int minz = ((int)  tolua_tonumber(tolua_S,4,0));
  int maxx = ((int)  tolua_tonumber(tolua_S,5,0));
  int maxy = ((int)  tolua_tonumber(tolua_S,6,0));
  int maxz = ((int)  tolua_tonumber(tolua_S,7,0));
  {
   irr::core::aabbox3d<int>* tolua_ret = (irr::core::aabbox3d<int>*)  Mtolua_new((irr::core::aabbox3d<int>)(minx,miny,minz,maxx,maxy,maxz));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::aabbox3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_aabbox3di_new02_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator== of class  irr::core::aabbox3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3di__eq00
static int tolua_NeoGame_irr_core_aabbox3di__eq00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::aabbox3d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::aabbox3d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::aabbox3d<int>* self = (const irr::core::aabbox3d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::aabbox3d<int>* other = ((const irr::core::aabbox3d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator=='", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->operator==(*other);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.eq'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: reset of class  irr::core::aabbox3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3di_reset00
static int tolua_NeoGame_irr_core_aabbox3di_reset00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::aabbox3d<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::aabbox3d<int>* self = (irr::core::aabbox3d<int>*)  tolua_tousertype(tolua_S,1,0);
  int x = ((int)  tolua_tonumber(tolua_S,2,0));
  int y = ((int)  tolua_tonumber(tolua_S,3,0));
  int z = ((int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'reset'", NULL);
#endif
  {
   self->reset(x,y,z);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'reset'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: reset of class  irr::core::aabbox3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3di_reset01
static int tolua_NeoGame_irr_core_aabbox3di_reset01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::aabbox3d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::aabbox3d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::core::aabbox3d<int>* self = (irr::core::aabbox3d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::aabbox3d<int>* initValue = ((const irr::core::aabbox3d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'reset'", NULL);
#endif
  {
   self->reset(*initValue);
  }
 }
 return 0;
tolua_lerror:
 return tolua_NeoGame_irr_core_aabbox3di_reset00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: reset of class  irr::core::aabbox3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3di_reset02
static int tolua_NeoGame_irr_core_aabbox3di_reset02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::aabbox3d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::core::aabbox3d<int>* self = (irr::core::aabbox3d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<int>* initValue = ((const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'reset'", NULL);
#endif
  {
   self->reset(*initValue);
  }
 }
 return 0;
tolua_lerror:
 return tolua_NeoGame_irr_core_aabbox3di_reset01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: addInternalPoint of class  irr::core::aabbox3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3di_addInternalPoint00
static int tolua_NeoGame_irr_core_aabbox3di_addInternalPoint00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::aabbox3d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::aabbox3d<int>* self = (irr::core::aabbox3d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<int>* p = ((const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addInternalPoint'", NULL);
#endif
  {
   self->addInternalPoint(*p);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addInternalPoint'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addInternalBox of class  irr::core::aabbox3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3di_addInternalBox00
static int tolua_NeoGame_irr_core_aabbox3di_addInternalBox00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::aabbox3d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::aabbox3d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::aabbox3d<int>* self = (irr::core::aabbox3d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::aabbox3d<int>* b = ((const irr::core::aabbox3d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addInternalBox'", NULL);
#endif
  {
   self->addInternalBox(*b);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addInternalBox'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addInternalPoint of class  irr::core::aabbox3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3di_addInternalPoint01
static int tolua_NeoGame_irr_core_aabbox3di_addInternalPoint01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::aabbox3d<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::core::aabbox3d<int>* self = (irr::core::aabbox3d<int>*)  tolua_tousertype(tolua_S,1,0);
  int x = ((int)  tolua_tonumber(tolua_S,2,0));
  int y = ((int)  tolua_tonumber(tolua_S,3,0));
  int z = ((int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addInternalPoint'", NULL);
#endif
  {
   self->addInternalPoint(x,y,z);
  }
 }
 return 0;
tolua_lerror:
 return tolua_NeoGame_irr_core_aabbox3di_addInternalPoint00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCenter of class  irr::core::aabbox3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3di_getCenter00
static int tolua_NeoGame_irr_core_aabbox3di_getCenter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::aabbox3d<int>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::aabbox3d<int>* self = (const irr::core::aabbox3d<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCenter'", NULL);
#endif
  {
   irr::core::vector3d<int> tolua_ret = (irr::core::vector3d<int>)  self->getCenter();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<int>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<int>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCenter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getExtent of class  irr::core::aabbox3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3di_getExtent00
static int tolua_NeoGame_irr_core_aabbox3di_getExtent00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::aabbox3d<int>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::aabbox3d<int>* self = (const irr::core::aabbox3d<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getExtent'", NULL);
#endif
  {
   irr::core::vector3d<int> tolua_ret = (irr::core::vector3d<int>)  self->getExtent();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<int>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<int>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getExtent'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isEmpty of class  irr::core::aabbox3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3di_isEmpty00
static int tolua_NeoGame_irr_core_aabbox3di_isEmpty00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::aabbox3d<int>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::aabbox3d<int>* self = (const irr::core::aabbox3d<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isEmpty'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isEmpty();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isEmpty'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getVolume of class  irr::core::aabbox3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3di_getVolume00
static int tolua_NeoGame_irr_core_aabbox3di_getVolume00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::aabbox3d<int>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::aabbox3d<int>* self = (const irr::core::aabbox3d<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getVolume'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getVolume();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getVolume'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getArea of class  irr::core::aabbox3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3di_getArea00
static int tolua_NeoGame_irr_core_aabbox3di_getArea00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::aabbox3d<int>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::aabbox3d<int>* self = (const irr::core::aabbox3d<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getArea'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getArea();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getArea'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getEdges of class  irr::core::aabbox3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3di_getEdges00
static int tolua_NeoGame_irr_core_aabbox3di_getEdges00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::aabbox3d<int>",0,&tolua_err) ||
     !tolua_istable(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::aabbox3d<int>* self = (const irr::core::aabbox3d<int>*)  tolua_tousertype(tolua_S,1,0);
  irr::core::vector3d<int> edges[8];
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getEdges'", NULL);
#endif
  {
#ifndef TOLUA_RELEASE
   if (!tolua_isusertypearray(tolua_S,2,"irr::core::vector3d<int>",8,0,&tolua_err))
    goto tolua_lerror;
   else
#endif
   {
    int i;
    for(i=0; i<8;i++)
    edges[i] = *((irr::core::vector3d<int>*)  tolua_tofieldusertype(tolua_S,2,i+1,0));
   }
  }
  {
   self->getEdges(edges);
  }
  {
   int i;
   for(i=0; i<8;i++)
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<int>)(edges[i]));
    tolua_pushfieldusertype_and_takeownership(tolua_S,2,i+1,tolua_obj,"irr::core::vector3d<int>");
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)& edges[i],sizeof(irr::core::vector3d<int>));
    tolua_pushfieldusertype(tolua_S,2,i+1,tolua_obj,"irr::core::vector3d<int>");
#endif
   }
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getEdges'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: repair of class  irr::core::aabbox3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3di_repair00
static int tolua_NeoGame_irr_core_aabbox3di_repair00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::aabbox3d<int>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::aabbox3d<int>* self = (irr::core::aabbox3d<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'repair'", NULL);
#endif
  {
   self->repair();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'repair'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getInterpolated of class  irr::core::aabbox3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3di_getInterpolated00
static int tolua_NeoGame_irr_core_aabbox3di_getInterpolated00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::aabbox3d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::aabbox3d<int>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::aabbox3d<int>* self = (const irr::core::aabbox3d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::aabbox3d<int>* other = ((const irr::core::aabbox3d<int>*)  tolua_tousertype(tolua_S,2,0));
  float d = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getInterpolated'", NULL);
#endif
  {
   irr::core::aabbox3d<int> tolua_ret = (irr::core::aabbox3d<int>)  self->getInterpolated(*other,d);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::aabbox3d<int>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::aabbox3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::aabbox3d<int>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::aabbox3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getInterpolated'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isPointInside of class  irr::core::aabbox3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3di_isPointInside00
static int tolua_NeoGame_irr_core_aabbox3di_isPointInside00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::aabbox3d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::aabbox3d<int>* self = (const irr::core::aabbox3d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<int>* p = ((const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isPointInside'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isPointInside(*p);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isPointInside'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isPointTotalInside of class  irr::core::aabbox3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3di_isPointTotalInside00
static int tolua_NeoGame_irr_core_aabbox3di_isPointTotalInside00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::aabbox3d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::aabbox3d<int>* self = (const irr::core::aabbox3d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<int>* p = ((const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isPointTotalInside'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isPointTotalInside(*p);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isPointTotalInside'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isFullInside of class  irr::core::aabbox3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3di_isFullInside00
static int tolua_NeoGame_irr_core_aabbox3di_isFullInside00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::aabbox3d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::aabbox3d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::aabbox3d<int>* self = (const irr::core::aabbox3d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::aabbox3d<int>* other = ((const irr::core::aabbox3d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isFullInside'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isFullInside(*other);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isFullInside'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: intersectsWithBox of class  irr::core::aabbox3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3di_intersectsWithBox00
static int tolua_NeoGame_irr_core_aabbox3di_intersectsWithBox00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::aabbox3d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::aabbox3d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::aabbox3d<int>* self = (const irr::core::aabbox3d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::aabbox3d<int>* other = ((const irr::core::aabbox3d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'intersectsWithBox'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->intersectsWithBox(*other);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'intersectsWithBox'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: MinEdge of class  irr::core::aabbox3d<int> */
#ifndef TOLUA_DISABLE_tolua_get_irr__core__aabbox3d_int__MinEdge
static int tolua_get_irr__core__aabbox3d_int__MinEdge(lua_State* tolua_S)
{
  irr::core::aabbox3d<int>* self = (irr::core::aabbox3d<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MinEdge'",NULL);
#endif
   tolua_pushusertype(tolua_S,(void*)&self->MinEdge,"irr::core::vector3d<int>");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: MinEdge of class  irr::core::aabbox3d<int> */
#ifndef TOLUA_DISABLE_tolua_set_irr__core__aabbox3d_int__MinEdge
static int tolua_set_irr__core__aabbox3d_int__MinEdge(lua_State* tolua_S)
{
  irr::core::aabbox3d<int>* self = (irr::core::aabbox3d<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MinEdge'",NULL);
  if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::vector3d<int>",0,&tolua_err)))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->MinEdge = *((irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: MaxEdge of class  irr::core::aabbox3d<int> */
#ifndef TOLUA_DISABLE_tolua_get_irr__core__aabbox3d_int__MaxEdge
static int tolua_get_irr__core__aabbox3d_int__MaxEdge(lua_State* tolua_S)
{
  irr::core::aabbox3d<int>* self = (irr::core::aabbox3d<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MaxEdge'",NULL);
#endif
   tolua_pushusertype(tolua_S,(void*)&self->MaxEdge,"irr::core::vector3d<int>");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: MaxEdge of class  irr::core::aabbox3d<int> */
#ifndef TOLUA_DISABLE_tolua_set_irr__core__aabbox3d_int__MaxEdge
static int tolua_set_irr__core__aabbox3d_int__MaxEdge(lua_State* tolua_S)
{
  irr::core::aabbox3d<int>* self = (irr::core::aabbox3d<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MaxEdge'",NULL);
  if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::vector3d<int>",0,&tolua_err)))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->MaxEdge = *((irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::aabbox3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3df_new00
static int tolua_NeoGame_irr_core_aabbox3df_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::aabbox3d<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   irr::core::aabbox3d<float>* tolua_ret = (irr::core::aabbox3d<float>*)  Mtolua_new((irr::core::aabbox3d<float>)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::aabbox3d<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::aabbox3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3df_new00_local
static int tolua_NeoGame_irr_core_aabbox3df_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::aabbox3d<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   irr::core::aabbox3d<float>* tolua_ret = (irr::core::aabbox3d<float>*)  Mtolua_new((irr::core::aabbox3d<float>)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::aabbox3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::aabbox3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3df_new01
static int tolua_NeoGame_irr_core_aabbox3df_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::aabbox3d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector3d<float>* min = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::vector3d<float>* max = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,3,0));
  {
   irr::core::aabbox3d<float>* tolua_ret = (irr::core::aabbox3d<float>*)  Mtolua_new((irr::core::aabbox3d<float>)(*min,*max));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::aabbox3d<float>");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_aabbox3df_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::aabbox3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3df_new01_local
static int tolua_NeoGame_irr_core_aabbox3df_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::aabbox3d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector3d<float>* min = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::vector3d<float>* max = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,3,0));
  {
   irr::core::aabbox3d<float>* tolua_ret = (irr::core::aabbox3d<float>*)  Mtolua_new((irr::core::aabbox3d<float>)(*min,*max));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::aabbox3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_aabbox3df_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::aabbox3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3df_new02
static int tolua_NeoGame_irr_core_aabbox3df_new02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::aabbox3d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector3d<float>* init = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  {
   irr::core::aabbox3d<float>* tolua_ret = (irr::core::aabbox3d<float>*)  Mtolua_new((irr::core::aabbox3d<float>)(*init));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::aabbox3d<float>");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_aabbox3df_new01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::aabbox3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3df_new02_local
static int tolua_NeoGame_irr_core_aabbox3df_new02_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::aabbox3d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector3d<float>* init = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  {
   irr::core::aabbox3d<float>* tolua_ret = (irr::core::aabbox3d<float>*)  Mtolua_new((irr::core::aabbox3d<float>)(*init));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::aabbox3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_aabbox3df_new01_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::aabbox3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3df_new03
static int tolua_NeoGame_irr_core_aabbox3df_new03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::aabbox3d<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,7,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,8,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  float minx = ((float)  tolua_tonumber(tolua_S,2,0));
  float miny = ((float)  tolua_tonumber(tolua_S,3,0));
  float minz = ((float)  tolua_tonumber(tolua_S,4,0));
  float maxx = ((float)  tolua_tonumber(tolua_S,5,0));
  float maxy = ((float)  tolua_tonumber(tolua_S,6,0));
  float maxz = ((float)  tolua_tonumber(tolua_S,7,0));
  {
   irr::core::aabbox3d<float>* tolua_ret = (irr::core::aabbox3d<float>*)  Mtolua_new((irr::core::aabbox3d<float>)(minx,miny,minz,maxx,maxy,maxz));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::aabbox3d<float>");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_aabbox3df_new02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::aabbox3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3df_new03_local
static int tolua_NeoGame_irr_core_aabbox3df_new03_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::aabbox3d<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,7,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,8,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  float minx = ((float)  tolua_tonumber(tolua_S,2,0));
  float miny = ((float)  tolua_tonumber(tolua_S,3,0));
  float minz = ((float)  tolua_tonumber(tolua_S,4,0));
  float maxx = ((float)  tolua_tonumber(tolua_S,5,0));
  float maxy = ((float)  tolua_tonumber(tolua_S,6,0));
  float maxz = ((float)  tolua_tonumber(tolua_S,7,0));
  {
   irr::core::aabbox3d<float>* tolua_ret = (irr::core::aabbox3d<float>*)  Mtolua_new((irr::core::aabbox3d<float>)(minx,miny,minz,maxx,maxy,maxz));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::aabbox3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_aabbox3df_new02_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator== of class  irr::core::aabbox3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3df__eq00
static int tolua_NeoGame_irr_core_aabbox3df__eq00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::aabbox3d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::aabbox3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::aabbox3d<float>* self = (const irr::core::aabbox3d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::aabbox3d<float>* other = ((const irr::core::aabbox3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator=='", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->operator==(*other);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.eq'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: reset of class  irr::core::aabbox3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3df_reset00
static int tolua_NeoGame_irr_core_aabbox3df_reset00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::aabbox3d<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::aabbox3d<float>* self = (irr::core::aabbox3d<float>*)  tolua_tousertype(tolua_S,1,0);
  float x = ((float)  tolua_tonumber(tolua_S,2,0));
  float y = ((float)  tolua_tonumber(tolua_S,3,0));
  float z = ((float)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'reset'", NULL);
#endif
  {
   self->reset(x,y,z);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'reset'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: reset of class  irr::core::aabbox3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3df_reset01
static int tolua_NeoGame_irr_core_aabbox3df_reset01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::aabbox3d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::aabbox3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::core::aabbox3d<float>* self = (irr::core::aabbox3d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::aabbox3d<float>* initValue = ((const irr::core::aabbox3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'reset'", NULL);
#endif
  {
   self->reset(*initValue);
  }
 }
 return 0;
tolua_lerror:
 return tolua_NeoGame_irr_core_aabbox3df_reset00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: reset of class  irr::core::aabbox3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3df_reset02
static int tolua_NeoGame_irr_core_aabbox3df_reset02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::aabbox3d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::core::aabbox3d<float>* self = (irr::core::aabbox3d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* initValue = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'reset'", NULL);
#endif
  {
   self->reset(*initValue);
  }
 }
 return 0;
tolua_lerror:
 return tolua_NeoGame_irr_core_aabbox3df_reset01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: addInternalPoint of class  irr::core::aabbox3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3df_addInternalPoint00
static int tolua_NeoGame_irr_core_aabbox3df_addInternalPoint00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::aabbox3d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::aabbox3d<float>* self = (irr::core::aabbox3d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* p = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addInternalPoint'", NULL);
#endif
  {
   self->addInternalPoint(*p);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addInternalPoint'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addInternalBox of class  irr::core::aabbox3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3df_addInternalBox00
static int tolua_NeoGame_irr_core_aabbox3df_addInternalBox00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::aabbox3d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::aabbox3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::aabbox3d<float>* self = (irr::core::aabbox3d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::aabbox3d<float>* b = ((const irr::core::aabbox3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addInternalBox'", NULL);
#endif
  {
   self->addInternalBox(*b);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addInternalBox'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addInternalPoint of class  irr::core::aabbox3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3df_addInternalPoint01
static int tolua_NeoGame_irr_core_aabbox3df_addInternalPoint01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::aabbox3d<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::core::aabbox3d<float>* self = (irr::core::aabbox3d<float>*)  tolua_tousertype(tolua_S,1,0);
  float x = ((float)  tolua_tonumber(tolua_S,2,0));
  float y = ((float)  tolua_tonumber(tolua_S,3,0));
  float z = ((float)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addInternalPoint'", NULL);
#endif
  {
   self->addInternalPoint(x,y,z);
  }
 }
 return 0;
tolua_lerror:
 return tolua_NeoGame_irr_core_aabbox3df_addInternalPoint00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCenter of class  irr::core::aabbox3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3df_getCenter00
static int tolua_NeoGame_irr_core_aabbox3df_getCenter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::aabbox3d<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::aabbox3d<float>* self = (const irr::core::aabbox3d<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCenter'", NULL);
#endif
  {
   irr::core::vector3d<float> tolua_ret = (irr::core::vector3d<float>)  self->getCenter();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCenter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getExtent of class  irr::core::aabbox3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3df_getExtent00
static int tolua_NeoGame_irr_core_aabbox3df_getExtent00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::aabbox3d<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::aabbox3d<float>* self = (const irr::core::aabbox3d<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getExtent'", NULL);
#endif
  {
   irr::core::vector3d<float> tolua_ret = (irr::core::vector3d<float>)  self->getExtent();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getExtent'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isEmpty of class  irr::core::aabbox3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3df_isEmpty00
static int tolua_NeoGame_irr_core_aabbox3df_isEmpty00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::aabbox3d<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::aabbox3d<float>* self = (const irr::core::aabbox3d<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isEmpty'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isEmpty();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isEmpty'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getVolume of class  irr::core::aabbox3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3df_getVolume00
static int tolua_NeoGame_irr_core_aabbox3df_getVolume00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::aabbox3d<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::aabbox3d<float>* self = (const irr::core::aabbox3d<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getVolume'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getVolume();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getVolume'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getArea of class  irr::core::aabbox3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3df_getArea00
static int tolua_NeoGame_irr_core_aabbox3df_getArea00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::aabbox3d<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::aabbox3d<float>* self = (const irr::core::aabbox3d<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getArea'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getArea();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getArea'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getEdges of class  irr::core::aabbox3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3df_getEdges00
static int tolua_NeoGame_irr_core_aabbox3df_getEdges00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::aabbox3d<float>",0,&tolua_err) ||
     !tolua_istable(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::aabbox3d<float>* self = (const irr::core::aabbox3d<float>*)  tolua_tousertype(tolua_S,1,0);
  irr::core::vector3d<float> edges[8];
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getEdges'", NULL);
#endif
  {
#ifndef TOLUA_RELEASE
   if (!tolua_isusertypearray(tolua_S,2,"irr::core::vector3d<float>",8,0,&tolua_err))
    goto tolua_lerror;
   else
#endif
   {
    int i;
    for(i=0; i<8;i++)
    edges[i] = *((irr::core::vector3d<float>*)  tolua_tofieldusertype(tolua_S,2,i+1,0));
   }
  }
  {
   self->getEdges(edges);
  }
  {
   int i;
   for(i=0; i<8;i++)
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<float>)(edges[i]));
    tolua_pushfieldusertype_and_takeownership(tolua_S,2,i+1,tolua_obj,"irr::core::vector3d<float>");
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)& edges[i],sizeof(irr::core::vector3d<float>));
    tolua_pushfieldusertype(tolua_S,2,i+1,tolua_obj,"irr::core::vector3d<float>");
#endif
   }
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getEdges'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: repair of class  irr::core::aabbox3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3df_repair00
static int tolua_NeoGame_irr_core_aabbox3df_repair00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::aabbox3d<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::aabbox3d<float>* self = (irr::core::aabbox3d<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'repair'", NULL);
#endif
  {
   self->repair();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'repair'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getInterpolated of class  irr::core::aabbox3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3df_getInterpolated00
static int tolua_NeoGame_irr_core_aabbox3df_getInterpolated00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::aabbox3d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::aabbox3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::aabbox3d<float>* self = (const irr::core::aabbox3d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::aabbox3d<float>* other = ((const irr::core::aabbox3d<float>*)  tolua_tousertype(tolua_S,2,0));
  float d = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getInterpolated'", NULL);
#endif
  {
   irr::core::aabbox3d<float> tolua_ret = (irr::core::aabbox3d<float>)  self->getInterpolated(*other,d);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::aabbox3d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::aabbox3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::aabbox3d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::aabbox3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getInterpolated'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isPointInside of class  irr::core::aabbox3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3df_isPointInside00
static int tolua_NeoGame_irr_core_aabbox3df_isPointInside00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::aabbox3d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::aabbox3d<float>* self = (const irr::core::aabbox3d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* p = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isPointInside'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isPointInside(*p);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isPointInside'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isPointTotalInside of class  irr::core::aabbox3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3df_isPointTotalInside00
static int tolua_NeoGame_irr_core_aabbox3df_isPointTotalInside00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::aabbox3d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::aabbox3d<float>* self = (const irr::core::aabbox3d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* p = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isPointTotalInside'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isPointTotalInside(*p);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isPointTotalInside'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isFullInside of class  irr::core::aabbox3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3df_isFullInside00
static int tolua_NeoGame_irr_core_aabbox3df_isFullInside00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::aabbox3d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::aabbox3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::aabbox3d<float>* self = (const irr::core::aabbox3d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::aabbox3d<float>* other = ((const irr::core::aabbox3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isFullInside'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isFullInside(*other);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isFullInside'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: intersectsWithBox of class  irr::core::aabbox3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_aabbox3df_intersectsWithBox00
static int tolua_NeoGame_irr_core_aabbox3df_intersectsWithBox00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::aabbox3d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::aabbox3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::aabbox3d<float>* self = (const irr::core::aabbox3d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::aabbox3d<float>* other = ((const irr::core::aabbox3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'intersectsWithBox'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->intersectsWithBox(*other);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'intersectsWithBox'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: MinEdge of class  irr::core::aabbox3d<float> */
#ifndef TOLUA_DISABLE_tolua_get_irr__core__aabbox3d_float__MinEdge
static int tolua_get_irr__core__aabbox3d_float__MinEdge(lua_State* tolua_S)
{
  irr::core::aabbox3d<float>* self = (irr::core::aabbox3d<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MinEdge'",NULL);
#endif
   tolua_pushusertype(tolua_S,(void*)&self->MinEdge,"irr::core::vector3d<float>");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: MinEdge of class  irr::core::aabbox3d<float> */
#ifndef TOLUA_DISABLE_tolua_set_irr__core__aabbox3d_float__MinEdge
static int tolua_set_irr__core__aabbox3d_float__MinEdge(lua_State* tolua_S)
{
  irr::core::aabbox3d<float>* self = (irr::core::aabbox3d<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MinEdge'",NULL);
  if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::vector3d<float>",0,&tolua_err)))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->MinEdge = *((irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: MaxEdge of class  irr::core::aabbox3d<float> */
#ifndef TOLUA_DISABLE_tolua_get_irr__core__aabbox3d_float__MaxEdge
static int tolua_get_irr__core__aabbox3d_float__MaxEdge(lua_State* tolua_S)
{
  irr::core::aabbox3d<float>* self = (irr::core::aabbox3d<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MaxEdge'",NULL);
#endif
   tolua_pushusertype(tolua_S,(void*)&self->MaxEdge,"irr::core::vector3d<float>");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: MaxEdge of class  irr::core::aabbox3d<float> */
#ifndef TOLUA_DISABLE_tolua_set_irr__core__aabbox3d_float__MaxEdge
static int tolua_set_irr__core__aabbox3d_float__MaxEdge(lua_State* tolua_S)
{
  irr::core::aabbox3d<float>* self = (irr::core::aabbox3d<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'MaxEdge'",NULL);
  if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::vector3d<float>",0,&tolua_err)))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->MaxEdge = *((irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::dimension2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2di_new00
static int tolua_NeoGame_irr_core_dimension2di_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::dimension2d<int>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   irr::core::dimension2d<int>* tolua_ret = (irr::core::dimension2d<int>*)  Mtolua_new((irr::core::dimension2d<int>)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::dimension2d<int>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::dimension2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2di_new00_local
static int tolua_NeoGame_irr_core_dimension2di_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::dimension2d<int>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   irr::core::dimension2d<int>* tolua_ret = (irr::core::dimension2d<int>*)  Mtolua_new((irr::core::dimension2d<int>)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::dimension2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::dimension2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2di_new01
static int tolua_NeoGame_irr_core_dimension2di_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::dimension2d<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const int width = ((const int)  tolua_tonumber(tolua_S,2,0));
  const int height = ((const int)  tolua_tonumber(tolua_S,3,0));
  {
   irr::core::dimension2d<int>* tolua_ret = (irr::core::dimension2d<int>*)  Mtolua_new((irr::core::dimension2d<int>)(width,height));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::dimension2d<int>");
   tolua_pushnumber(tolua_S,(lua_Number)width);
   tolua_pushnumber(tolua_S,(lua_Number)height);
  }
 }
 return 3;
tolua_lerror:
 return tolua_NeoGame_irr_core_dimension2di_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::dimension2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2di_new01_local
static int tolua_NeoGame_irr_core_dimension2di_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::dimension2d<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const int width = ((const int)  tolua_tonumber(tolua_S,2,0));
  const int height = ((const int)  tolua_tonumber(tolua_S,3,0));
  {
   irr::core::dimension2d<int>* tolua_ret = (irr::core::dimension2d<int>*)  Mtolua_new((irr::core::dimension2d<int>)(width,height));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::dimension2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
   tolua_pushnumber(tolua_S,(lua_Number)width);
   tolua_pushnumber(tolua_S,(lua_Number)height);
  }
 }
 return 3;
tolua_lerror:
 return tolua_NeoGame_irr_core_dimension2di_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::dimension2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2di_new02
static int tolua_NeoGame_irr_core_dimension2di_new02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::dimension2d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector2d<int>* other = ((const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,2,0));
  {
   irr::core::dimension2d<int>* tolua_ret = (irr::core::dimension2d<int>*)  Mtolua_new((irr::core::dimension2d<int>)(*other));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::dimension2d<int>");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_dimension2di_new01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::dimension2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2di_new02_local
static int tolua_NeoGame_irr_core_dimension2di_new02_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::dimension2d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector2d<int>* other = ((const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,2,0));
  {
   irr::core::dimension2d<int>* tolua_ret = (irr::core::dimension2d<int>*)  Mtolua_new((irr::core::dimension2d<int>)(*other));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::dimension2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_dimension2di_new01_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator== of class  irr::core::dimension2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2di__eq00
static int tolua_NeoGame_irr_core_dimension2di__eq00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::dimension2d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::dimension2d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::dimension2d<int>* self = (const irr::core::dimension2d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::dimension2d<int>* other = ((const irr::core::dimension2d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator=='", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->operator==(*other);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.eq'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator== of class  irr::core::dimension2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2di__eq01
static int tolua_NeoGame_irr_core_dimension2di__eq01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::dimension2d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::dimension2d<int>* self = (const irr::core::dimension2d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector2d<int>* other = ((const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator=='", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->operator==(*other);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_dimension2di__eq00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  irr::core::dimension2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2di_set00
static int tolua_NeoGame_irr_core_dimension2di_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::dimension2d<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::dimension2d<int>* self = (irr::core::dimension2d<int>*)  tolua_tousertype(tolua_S,1,0);
  const int width = ((const int)  tolua_tonumber(tolua_S,2,0));
  const int height = ((const int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'", NULL);
#endif
  {
   irr::core::dimension2d<int>& tolua_ret = (irr::core::dimension2d<int>&)  self->set(width,height);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::dimension2d<int>");
   tolua_pushnumber(tolua_S,(lua_Number)width);
   tolua_pushnumber(tolua_S,(lua_Number)height);
  }
 }
 return 3;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator/ of class  irr::core::dimension2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2di__div00
static int tolua_NeoGame_irr_core_dimension2di__div00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::dimension2d<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::dimension2d<int>* self = (const irr::core::dimension2d<int>*)  tolua_tousertype(tolua_S,1,0);
  const int scale = ((const int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator/'", NULL);
#endif
  {
   irr::core::dimension2d<int> tolua_ret = (irr::core::dimension2d<int>)  self->operator/(scale);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::dimension2d<int>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::dimension2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::dimension2d<int>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::dimension2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
   tolua_pushnumber(tolua_S,(lua_Number)scale);
  }
 }
 return 2;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.div'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator* of class  irr::core::dimension2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2di__mul00
static int tolua_NeoGame_irr_core_dimension2di__mul00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::dimension2d<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::dimension2d<int>* self = (const irr::core::dimension2d<int>*)  tolua_tousertype(tolua_S,1,0);
  const int scale = ((const int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator*'", NULL);
#endif
  {
   irr::core::dimension2d<int> tolua_ret = (irr::core::dimension2d<int>)  self->operator*(scale);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::dimension2d<int>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::dimension2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::dimension2d<int>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::dimension2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
   tolua_pushnumber(tolua_S,(lua_Number)scale);
  }
 }
 return 2;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.mul'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator+ of class  irr::core::dimension2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2di__add00
static int tolua_NeoGame_irr_core_dimension2di__add00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::dimension2d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::dimension2d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::dimension2d<int>* self = (const irr::core::dimension2d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::dimension2d<int>* other = ((const irr::core::dimension2d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator+'", NULL);
#endif
  {
   irr::core::dimension2d<int> tolua_ret = (irr::core::dimension2d<int>)  self->operator+(*other);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::dimension2d<int>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::dimension2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::dimension2d<int>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::dimension2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.add'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator- of class  irr::core::dimension2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2di__sub00
static int tolua_NeoGame_irr_core_dimension2di__sub00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::dimension2d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::dimension2d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::dimension2d<int>* self = (const irr::core::dimension2d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::dimension2d<int>* other = ((const irr::core::dimension2d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator-'", NULL);
#endif
  {
   irr::core::dimension2d<int> tolua_ret = (irr::core::dimension2d<int>)  self->operator-(*other);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::dimension2d<int>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::dimension2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::dimension2d<int>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::dimension2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.sub'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getArea of class  irr::core::dimension2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2di_getArea00
static int tolua_NeoGame_irr_core_dimension2di_getArea00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::dimension2d<int>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::dimension2d<int>* self = (const irr::core::dimension2d<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getArea'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getArea();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getArea'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getOptimalSize of class  irr::core::dimension2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2di_getOptimalSize00
static int tolua_NeoGame_irr_core_dimension2di_getOptimalSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::dimension2d<int>",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,1,&tolua_err) ||
     !tolua_isboolean(tolua_S,3,1,&tolua_err) ||
     !tolua_isboolean(tolua_S,4,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::dimension2d<int>* self = (const irr::core::dimension2d<int>*)  tolua_tousertype(tolua_S,1,0);
  bool requirePowerOfTwo = ((bool)  tolua_toboolean(tolua_S,2,true));
  bool requireSquare = ((bool)  tolua_toboolean(tolua_S,3,false));
  bool larger = ((bool)  tolua_toboolean(tolua_S,4,true));
  unsigned int maxValue = ((unsigned int)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getOptimalSize'", NULL);
#endif
  {
   irr::core::dimension2d<int> tolua_ret = (irr::core::dimension2d<int>)  self->getOptimalSize(requirePowerOfTwo,requireSquare,larger,maxValue);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::dimension2d<int>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::dimension2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::dimension2d<int>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::dimension2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getOptimalSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getInterpolated of class  irr::core::dimension2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2di_getInterpolated00
static int tolua_NeoGame_irr_core_dimension2di_getInterpolated00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::dimension2d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::dimension2d<int>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::dimension2d<int>* self = (const irr::core::dimension2d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::dimension2d<int>* other = ((const irr::core::dimension2d<int>*)  tolua_tousertype(tolua_S,2,0));
  float d = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getInterpolated'", NULL);
#endif
  {
   irr::core::dimension2d<int> tolua_ret = (irr::core::dimension2d<int>)  self->getInterpolated(*other,d);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::dimension2d<int>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::dimension2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::dimension2d<int>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::dimension2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getInterpolated'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Width of class  irr::core::dimension2d<int> */
#ifndef TOLUA_DISABLE_tolua_get_irr__core__dimension2d_int__Width
static int tolua_get_irr__core__dimension2d_int__Width(lua_State* tolua_S)
{
  irr::core::dimension2d<int>* self = (irr::core::dimension2d<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Width'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Width);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Width of class  irr::core::dimension2d<int> */
#ifndef TOLUA_DISABLE_tolua_set_irr__core__dimension2d_int__Width
static int tolua_set_irr__core__dimension2d_int__Width(lua_State* tolua_S)
{
  irr::core::dimension2d<int>* self = (irr::core::dimension2d<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Width'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Width = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Height of class  irr::core::dimension2d<int> */
#ifndef TOLUA_DISABLE_tolua_get_irr__core__dimension2d_int__Height
static int tolua_get_irr__core__dimension2d_int__Height(lua_State* tolua_S)
{
  irr::core::dimension2d<int>* self = (irr::core::dimension2d<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Height'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Height);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Height of class  irr::core::dimension2d<int> */
#ifndef TOLUA_DISABLE_tolua_set_irr__core__dimension2d_int__Height
static int tolua_set_irr__core__dimension2d_int__Height(lua_State* tolua_S)
{
  irr::core::dimension2d<int>* self = (irr::core::dimension2d<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Height'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Height = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::dimension2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2df_new00
static int tolua_NeoGame_irr_core_dimension2df_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::dimension2d<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   irr::core::dimension2d<float>* tolua_ret = (irr::core::dimension2d<float>*)  Mtolua_new((irr::core::dimension2d<float>)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::dimension2d<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::dimension2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2df_new00_local
static int tolua_NeoGame_irr_core_dimension2df_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::dimension2d<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   irr::core::dimension2d<float>* tolua_ret = (irr::core::dimension2d<float>*)  Mtolua_new((irr::core::dimension2d<float>)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::dimension2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::dimension2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2df_new01
static int tolua_NeoGame_irr_core_dimension2df_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::dimension2d<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const float width = ((const float)  tolua_tonumber(tolua_S,2,0));
  const float height = ((const float)  tolua_tonumber(tolua_S,3,0));
  {
   irr::core::dimension2d<float>* tolua_ret = (irr::core::dimension2d<float>*)  Mtolua_new((irr::core::dimension2d<float>)(width,height));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::dimension2d<float>");
   tolua_pushnumber(tolua_S,(lua_Number)width);
   tolua_pushnumber(tolua_S,(lua_Number)height);
  }
 }
 return 3;
tolua_lerror:
 return tolua_NeoGame_irr_core_dimension2df_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::dimension2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2df_new01_local
static int tolua_NeoGame_irr_core_dimension2df_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::dimension2d<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const float width = ((const float)  tolua_tonumber(tolua_S,2,0));
  const float height = ((const float)  tolua_tonumber(tolua_S,3,0));
  {
   irr::core::dimension2d<float>* tolua_ret = (irr::core::dimension2d<float>*)  Mtolua_new((irr::core::dimension2d<float>)(width,height));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::dimension2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
   tolua_pushnumber(tolua_S,(lua_Number)width);
   tolua_pushnumber(tolua_S,(lua_Number)height);
  }
 }
 return 3;
tolua_lerror:
 return tolua_NeoGame_irr_core_dimension2df_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::dimension2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2df_new02
static int tolua_NeoGame_irr_core_dimension2df_new02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::dimension2d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector2d<float>* other = ((const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,2,0));
  {
   irr::core::dimension2d<float>* tolua_ret = (irr::core::dimension2d<float>*)  Mtolua_new((irr::core::dimension2d<float>)(*other));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::dimension2d<float>");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_dimension2df_new01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::dimension2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2df_new02_local
static int tolua_NeoGame_irr_core_dimension2df_new02_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::dimension2d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector2d<float>* other = ((const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,2,0));
  {
   irr::core::dimension2d<float>* tolua_ret = (irr::core::dimension2d<float>*)  Mtolua_new((irr::core::dimension2d<float>)(*other));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::dimension2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_dimension2df_new01_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator== of class  irr::core::dimension2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2df__eq00
static int tolua_NeoGame_irr_core_dimension2df__eq00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::dimension2d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::dimension2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::dimension2d<float>* self = (const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::dimension2d<float>* other = ((const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator=='", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->operator==(*other);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.eq'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator== of class  irr::core::dimension2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2df__eq01
static int tolua_NeoGame_irr_core_dimension2df__eq01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::dimension2d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::dimension2d<float>* self = (const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector2d<float>* other = ((const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator=='", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->operator==(*other);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_dimension2df__eq00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  irr::core::dimension2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2df_set00
static int tolua_NeoGame_irr_core_dimension2df_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::dimension2d<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::dimension2d<float>* self = (irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,1,0);
  const float width = ((const float)  tolua_tonumber(tolua_S,2,0));
  const float height = ((const float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'", NULL);
#endif
  {
   irr::core::dimension2d<float>& tolua_ret = (irr::core::dimension2d<float>&)  self->set(width,height);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::dimension2d<float>");
   tolua_pushnumber(tolua_S,(lua_Number)width);
   tolua_pushnumber(tolua_S,(lua_Number)height);
  }
 }
 return 3;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator/ of class  irr::core::dimension2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2df__div00
static int tolua_NeoGame_irr_core_dimension2df__div00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::dimension2d<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::dimension2d<float>* self = (const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,1,0);
  const float scale = ((const float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator/'", NULL);
#endif
  {
   irr::core::dimension2d<float> tolua_ret = (irr::core::dimension2d<float>)  self->operator/(scale);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::dimension2d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::dimension2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::dimension2d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::dimension2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
   tolua_pushnumber(tolua_S,(lua_Number)scale);
  }
 }
 return 2;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.div'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator* of class  irr::core::dimension2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2df__mul00
static int tolua_NeoGame_irr_core_dimension2df__mul00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::dimension2d<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::dimension2d<float>* self = (const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,1,0);
  const float scale = ((const float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator*'", NULL);
#endif
  {
   irr::core::dimension2d<float> tolua_ret = (irr::core::dimension2d<float>)  self->operator*(scale);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::dimension2d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::dimension2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::dimension2d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::dimension2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
   tolua_pushnumber(tolua_S,(lua_Number)scale);
  }
 }
 return 2;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.mul'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator+ of class  irr::core::dimension2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2df__add00
static int tolua_NeoGame_irr_core_dimension2df__add00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::dimension2d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::dimension2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::dimension2d<float>* self = (const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::dimension2d<float>* other = ((const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator+'", NULL);
#endif
  {
   irr::core::dimension2d<float> tolua_ret = (irr::core::dimension2d<float>)  self->operator+(*other);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::dimension2d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::dimension2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::dimension2d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::dimension2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.add'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator- of class  irr::core::dimension2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2df__sub00
static int tolua_NeoGame_irr_core_dimension2df__sub00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::dimension2d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::dimension2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::dimension2d<float>* self = (const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::dimension2d<float>* other = ((const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator-'", NULL);
#endif
  {
   irr::core::dimension2d<float> tolua_ret = (irr::core::dimension2d<float>)  self->operator-(*other);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::dimension2d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::dimension2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::dimension2d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::dimension2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.sub'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getArea of class  irr::core::dimension2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2df_getArea00
static int tolua_NeoGame_irr_core_dimension2df_getArea00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::dimension2d<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::dimension2d<float>* self = (const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getArea'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getArea();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getArea'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getOptimalSize of class  irr::core::dimension2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2df_getOptimalSize00
static int tolua_NeoGame_irr_core_dimension2df_getOptimalSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::dimension2d<float>",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,1,&tolua_err) ||
     !tolua_isboolean(tolua_S,3,1,&tolua_err) ||
     !tolua_isboolean(tolua_S,4,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::dimension2d<float>* self = (const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,1,0);
  bool requirePowerOfTwo = ((bool)  tolua_toboolean(tolua_S,2,true));
  bool requireSquare = ((bool)  tolua_toboolean(tolua_S,3,false));
  bool larger = ((bool)  tolua_toboolean(tolua_S,4,true));
  unsigned int maxValue = ((unsigned int)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getOptimalSize'", NULL);
#endif
  {
   irr::core::dimension2d<float> tolua_ret = (irr::core::dimension2d<float>)  self->getOptimalSize(requirePowerOfTwo,requireSquare,larger,maxValue);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::dimension2d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::dimension2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::dimension2d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::dimension2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getOptimalSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getInterpolated of class  irr::core::dimension2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2df_getInterpolated00
static int tolua_NeoGame_irr_core_dimension2df_getInterpolated00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::dimension2d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::dimension2d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::dimension2d<float>* self = (const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::dimension2d<float>* other = ((const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,2,0));
  float d = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getInterpolated'", NULL);
#endif
  {
   irr::core::dimension2d<float> tolua_ret = (irr::core::dimension2d<float>)  self->getInterpolated(*other,d);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::dimension2d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::dimension2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::dimension2d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::dimension2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getInterpolated'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Width of class  irr::core::dimension2d<float> */
#ifndef TOLUA_DISABLE_tolua_get_irr__core__dimension2d_float__Width
static int tolua_get_irr__core__dimension2d_float__Width(lua_State* tolua_S)
{
  irr::core::dimension2d<float>* self = (irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Width'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Width);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Width of class  irr::core::dimension2d<float> */
#ifndef TOLUA_DISABLE_tolua_set_irr__core__dimension2d_float__Width
static int tolua_set_irr__core__dimension2d_float__Width(lua_State* tolua_S)
{
  irr::core::dimension2d<float>* self = (irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Width'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Width = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Height of class  irr::core::dimension2d<float> */
#ifndef TOLUA_DISABLE_tolua_get_irr__core__dimension2d_float__Height
static int tolua_get_irr__core__dimension2d_float__Height(lua_State* tolua_S)
{
  irr::core::dimension2d<float>* self = (irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Height'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Height);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Height of class  irr::core::dimension2d<float> */
#ifndef TOLUA_DISABLE_tolua_set_irr__core__dimension2d_float__Height
static int tolua_set_irr__core__dimension2d_float__Height(lua_State* tolua_S)
{
  irr::core::dimension2d<float>* self = (irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Height'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Height = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::dimension2d<unsigned> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2du_new00
static int tolua_NeoGame_irr_core_dimension2du_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::dimension2d<unsigned>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   irr::core::dimension2d<unsigned>* tolua_ret = (irr::core::dimension2d<unsigned>*)  Mtolua_new((irr::core::dimension2d<unsigned>)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::dimension2d<unsigned>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::dimension2d<unsigned> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2du_new00_local
static int tolua_NeoGame_irr_core_dimension2du_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::dimension2d<unsigned>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   irr::core::dimension2d<unsigned>* tolua_ret = (irr::core::dimension2d<unsigned>*)  Mtolua_new((irr::core::dimension2d<unsigned>)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::dimension2d<unsigned>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::dimension2d<unsigned> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2du_new01
static int tolua_NeoGame_irr_core_dimension2du_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::dimension2d<unsigned>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const unsigned width = ((const unsigned)  tolua_tonumber(tolua_S,2,0));
  const unsigned height = ((const unsigned)  tolua_tonumber(tolua_S,3,0));
  {
   irr::core::dimension2d<unsigned>* tolua_ret = (irr::core::dimension2d<unsigned>*)  Mtolua_new((irr::core::dimension2d<unsigned>)(width,height));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::dimension2d<unsigned>");
   tolua_pushnumber(tolua_S,(lua_Number)width);
   tolua_pushnumber(tolua_S,(lua_Number)height);
  }
 }
 return 3;
tolua_lerror:
 return tolua_NeoGame_irr_core_dimension2du_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::dimension2d<unsigned> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2du_new01_local
static int tolua_NeoGame_irr_core_dimension2du_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::dimension2d<unsigned>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const unsigned width = ((const unsigned)  tolua_tonumber(tolua_S,2,0));
  const unsigned height = ((const unsigned)  tolua_tonumber(tolua_S,3,0));
  {
   irr::core::dimension2d<unsigned>* tolua_ret = (irr::core::dimension2d<unsigned>*)  Mtolua_new((irr::core::dimension2d<unsigned>)(width,height));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::dimension2d<unsigned>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
   tolua_pushnumber(tolua_S,(lua_Number)width);
   tolua_pushnumber(tolua_S,(lua_Number)height);
  }
 }
 return 3;
tolua_lerror:
 return tolua_NeoGame_irr_core_dimension2du_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::dimension2d<unsigned> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2du_new02
static int tolua_NeoGame_irr_core_dimension2du_new02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::dimension2d<unsigned>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<unsigned>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector2d<unsigned>* other = ((const irr::core::vector2d<unsigned>*)  tolua_tousertype(tolua_S,2,0));
  {
   irr::core::dimension2d<unsigned>* tolua_ret = (irr::core::dimension2d<unsigned>*)  Mtolua_new((irr::core::dimension2d<unsigned>)(*other));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::dimension2d<unsigned>");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_dimension2du_new01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::dimension2d<unsigned> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2du_new02_local
static int tolua_NeoGame_irr_core_dimension2du_new02_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::dimension2d<unsigned>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<unsigned>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector2d<unsigned>* other = ((const irr::core::vector2d<unsigned>*)  tolua_tousertype(tolua_S,2,0));
  {
   irr::core::dimension2d<unsigned>* tolua_ret = (irr::core::dimension2d<unsigned>*)  Mtolua_new((irr::core::dimension2d<unsigned>)(*other));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::dimension2d<unsigned>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_dimension2du_new01_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator== of class  irr::core::dimension2d<unsigned> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2du__eq00
static int tolua_NeoGame_irr_core_dimension2du__eq00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::dimension2d<unsigned>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::dimension2d<unsigned>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::dimension2d<unsigned>* self = (const irr::core::dimension2d<unsigned>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::dimension2d<unsigned>* other = ((const irr::core::dimension2d<unsigned>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator=='", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->operator==(*other);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.eq'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator== of class  irr::core::dimension2d<unsigned> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2du__eq01
static int tolua_NeoGame_irr_core_dimension2du__eq01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::dimension2d<unsigned>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<unsigned>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::dimension2d<unsigned>* self = (const irr::core::dimension2d<unsigned>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector2d<unsigned>* other = ((const irr::core::vector2d<unsigned>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator=='", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->operator==(*other);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_dimension2du__eq00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  irr::core::dimension2d<unsigned> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2du_set00
static int tolua_NeoGame_irr_core_dimension2du_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::dimension2d<unsigned>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::dimension2d<unsigned>* self = (irr::core::dimension2d<unsigned>*)  tolua_tousertype(tolua_S,1,0);
  const unsigned width = ((const unsigned)  tolua_tonumber(tolua_S,2,0));
  const unsigned height = ((const unsigned)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'", NULL);
#endif
  {
   irr::core::dimension2d<unsigned>& tolua_ret = (irr::core::dimension2d<unsigned>&)  self->set(width,height);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::dimension2d<unsigned>");
   tolua_pushnumber(tolua_S,(lua_Number)width);
   tolua_pushnumber(tolua_S,(lua_Number)height);
  }
 }
 return 3;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator/ of class  irr::core::dimension2d<unsigned> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2du__div00
static int tolua_NeoGame_irr_core_dimension2du__div00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::dimension2d<unsigned>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::dimension2d<unsigned>* self = (const irr::core::dimension2d<unsigned>*)  tolua_tousertype(tolua_S,1,0);
  const unsigned scale = ((const unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator/'", NULL);
#endif
  {
   irr::core::dimension2d<unsigned> tolua_ret = (irr::core::dimension2d<unsigned>)  self->operator/(scale);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::dimension2d<unsigned>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::dimension2d<unsigned>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::dimension2d<unsigned>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::dimension2d<unsigned>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
   tolua_pushnumber(tolua_S,(lua_Number)scale);
  }
 }
 return 2;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.div'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator* of class  irr::core::dimension2d<unsigned> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2du__mul00
static int tolua_NeoGame_irr_core_dimension2du__mul00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::dimension2d<unsigned>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::dimension2d<unsigned>* self = (const irr::core::dimension2d<unsigned>*)  tolua_tousertype(tolua_S,1,0);
  const unsigned scale = ((const unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator*'", NULL);
#endif
  {
   irr::core::dimension2d<unsigned> tolua_ret = (irr::core::dimension2d<unsigned>)  self->operator*(scale);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::dimension2d<unsigned>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::dimension2d<unsigned>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::dimension2d<unsigned>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::dimension2d<unsigned>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
   tolua_pushnumber(tolua_S,(lua_Number)scale);
  }
 }
 return 2;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.mul'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator+ of class  irr::core::dimension2d<unsigned> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2du__add00
static int tolua_NeoGame_irr_core_dimension2du__add00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::dimension2d<unsigned>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::dimension2d<unsigned>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::dimension2d<unsigned>* self = (const irr::core::dimension2d<unsigned>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::dimension2d<unsigned>* other = ((const irr::core::dimension2d<unsigned>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator+'", NULL);
#endif
  {
   irr::core::dimension2d<unsigned> tolua_ret = (irr::core::dimension2d<unsigned>)  self->operator+(*other);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::dimension2d<unsigned>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::dimension2d<unsigned>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::dimension2d<unsigned>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::dimension2d<unsigned>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.add'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator- of class  irr::core::dimension2d<unsigned> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2du__sub00
static int tolua_NeoGame_irr_core_dimension2du__sub00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::dimension2d<unsigned>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::dimension2d<unsigned>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::dimension2d<unsigned>* self = (const irr::core::dimension2d<unsigned>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::dimension2d<unsigned>* other = ((const irr::core::dimension2d<unsigned>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator-'", NULL);
#endif
  {
   irr::core::dimension2d<unsigned> tolua_ret = (irr::core::dimension2d<unsigned>)  self->operator-(*other);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::dimension2d<unsigned>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::dimension2d<unsigned>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::dimension2d<unsigned>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::dimension2d<unsigned>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.sub'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getArea of class  irr::core::dimension2d<unsigned> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2du_getArea00
static int tolua_NeoGame_irr_core_dimension2du_getArea00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::dimension2d<unsigned>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::dimension2d<unsigned>* self = (const irr::core::dimension2d<unsigned>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getArea'", NULL);
#endif
  {
   unsigned tolua_ret = (unsigned)  self->getArea();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getArea'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getOptimalSize of class  irr::core::dimension2d<unsigned> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2du_getOptimalSize00
static int tolua_NeoGame_irr_core_dimension2du_getOptimalSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::dimension2d<unsigned>",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,1,&tolua_err) ||
     !tolua_isboolean(tolua_S,3,1,&tolua_err) ||
     !tolua_isboolean(tolua_S,4,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::dimension2d<unsigned>* self = (const irr::core::dimension2d<unsigned>*)  tolua_tousertype(tolua_S,1,0);
  bool requirePowerOfTwo = ((bool)  tolua_toboolean(tolua_S,2,true));
  bool requireSquare = ((bool)  tolua_toboolean(tolua_S,3,false));
  bool larger = ((bool)  tolua_toboolean(tolua_S,4,true));
  unsigned int maxValue = ((unsigned int)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getOptimalSize'", NULL);
#endif
  {
   irr::core::dimension2d<unsigned> tolua_ret = (irr::core::dimension2d<unsigned>)  self->getOptimalSize(requirePowerOfTwo,requireSquare,larger,maxValue);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::dimension2d<unsigned>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::dimension2d<unsigned>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::dimension2d<unsigned>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::dimension2d<unsigned>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getOptimalSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getInterpolated of class  irr::core::dimension2d<unsigned> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_dimension2du_getInterpolated00
static int tolua_NeoGame_irr_core_dimension2du_getInterpolated00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::dimension2d<unsigned>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::dimension2d<unsigned>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::dimension2d<unsigned>* self = (const irr::core::dimension2d<unsigned>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::dimension2d<unsigned>* other = ((const irr::core::dimension2d<unsigned>*)  tolua_tousertype(tolua_S,2,0));
  float d = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getInterpolated'", NULL);
#endif
  {
   irr::core::dimension2d<unsigned> tolua_ret = (irr::core::dimension2d<unsigned>)  self->getInterpolated(*other,d);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::dimension2d<unsigned>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::dimension2d<unsigned>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::dimension2d<unsigned>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::dimension2d<unsigned>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getInterpolated'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Width of class  irr::core::dimension2d<unsigned> */
#ifndef TOLUA_DISABLE_tolua_get_irr__core__dimension2d_unsigned__Width
static int tolua_get_irr__core__dimension2d_unsigned__Width(lua_State* tolua_S)
{
  irr::core::dimension2d<unsigned>* self = (irr::core::dimension2d<unsigned>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Width'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Width);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Width of class  irr::core::dimension2d<unsigned> */
#ifndef TOLUA_DISABLE_tolua_set_irr__core__dimension2d_unsigned__Width
static int tolua_set_irr__core__dimension2d_unsigned__Width(lua_State* tolua_S)
{
  irr::core::dimension2d<unsigned>* self = (irr::core::dimension2d<unsigned>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Width'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Width = ((unsigned)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Height of class  irr::core::dimension2d<unsigned> */
#ifndef TOLUA_DISABLE_tolua_get_irr__core__dimension2d_unsigned__Height
static int tolua_get_irr__core__dimension2d_unsigned__Height(lua_State* tolua_S)
{
  irr::core::dimension2d<unsigned>* self = (irr::core::dimension2d<unsigned>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Height'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Height);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Height of class  irr::core::dimension2d<unsigned> */
#ifndef TOLUA_DISABLE_tolua_set_irr__core__dimension2d_unsigned__Height
static int tolua_set_irr__core__dimension2d_unsigned__Height(lua_State* tolua_S)
{
  irr::core::dimension2d<unsigned>* self = (irr::core::dimension2d<unsigned>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Height'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Height = ((unsigned)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFrameCount of class  irr::scene::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IAnimatedMesh_getFrameCount00
static int tolua_NeoGame_irr_scene_IAnimatedMesh_getFrameCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IAnimatedMesh",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IAnimatedMesh* self = (const irr::scene::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFrameCount'", NULL);
#endif
  {
   unsigned int tolua_ret = (unsigned int)  self->getFrameCount();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFrameCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAnimationSpeed of class  irr::scene::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IAnimatedMesh_getAnimationSpeed00
static int tolua_NeoGame_irr_scene_IAnimatedMesh_getAnimationSpeed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IAnimatedMesh",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IAnimatedMesh* self = (const irr::scene::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAnimationSpeed'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getAnimationSpeed();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAnimationSpeed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAnimationSpeed of class  irr::scene::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IAnimatedMesh_setAnimationSpeed00
static int tolua_NeoGame_irr_scene_IAnimatedMesh_setAnimationSpeed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IAnimatedMesh",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IAnimatedMesh* self = (irr::scene::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
  float fps = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAnimationSpeed'", NULL);
#endif
  {
   self->setAnimationSpeed(fps);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAnimationSpeed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMesh of class  irr::scene::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IAnimatedMesh_getMesh00
static int tolua_NeoGame_irr_scene_IAnimatedMesh_getMesh00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IAnimatedMesh",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IAnimatedMesh* self = (irr::scene::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
  int frame = ((int)  tolua_tonumber(tolua_S,2,0));
  int detailLevel = ((int)  tolua_tonumber(tolua_S,3,255));
  int startFrameLoop = ((int)  tolua_tonumber(tolua_S,4,-1));
  int endFrameLoop = ((int)  tolua_tonumber(tolua_S,5,-1));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMesh'", NULL);
#endif
  {
   irr::scene::IMesh* tolua_ret = (irr::scene::IMesh*)  self->getMesh(frame,detailLevel,startFrameLoop,endFrameLoop);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IMesh");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMesh'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMeshType of class  irr::scene::IAnimatedMesh */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IAnimatedMesh_getMeshType00
static int tolua_NeoGame_irr_scene_IAnimatedMesh_getMeshType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IAnimatedMesh",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IAnimatedMesh* self = (const irr::scene::IAnimatedMesh*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMeshType'", NULL);
#endif
  {
   irr::scene::E_ANIMATED_MESH_TYPE tolua_ret = (irr::scene::E_ANIMATED_MESH_TYPE)  self->getMeshType();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMeshType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setCurrentFrame of class  irr::scene::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_setCurrentFrame00
static int tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_setCurrentFrame00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IAnimatedMeshSceneNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IAnimatedMeshSceneNode* self = (irr::scene::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
  float frame = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setCurrentFrame'", NULL);
#endif
  {
   self->setCurrentFrame(frame);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setCurrentFrame'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setFrameLoop of class  irr::scene::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_setFrameLoop00
static int tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_setFrameLoop00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IAnimatedMeshSceneNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IAnimatedMeshSceneNode* self = (irr::scene::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
  int begin = ((int)  tolua_tonumber(tolua_S,2,0));
  int end = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setFrameLoop'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->setFrameLoop(begin,end);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setFrameLoop'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAnimationSpeed of class  irr::scene::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_setAnimationSpeed00
static int tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_setAnimationSpeed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IAnimatedMeshSceneNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IAnimatedMeshSceneNode* self = (irr::scene::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
  float framesPerSecond = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAnimationSpeed'", NULL);
#endif
  {
   self->setAnimationSpeed(framesPerSecond);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAnimationSpeed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAnimationSpeed of class  irr::scene::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_getAnimationSpeed00
static int tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_getAnimationSpeed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IAnimatedMeshSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IAnimatedMeshSceneNode* self = (const irr::scene::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAnimationSpeed'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getAnimationSpeed();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAnimationSpeed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addShadowVolumeSceneNode of class  irr::scene::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_addShadowVolumeSceneNode00
static int tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_addShadowVolumeSceneNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IAnimatedMeshSceneNode",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const irr::scene::IMesh",1,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
     !tolua_isboolean(tolua_S,4,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IAnimatedMeshSceneNode* self = (irr::scene::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::scene::IMesh* shadowMesh = ((const irr::scene::IMesh*)  tolua_tousertype(tolua_S,2,0));
  int id = ((int)  tolua_tonumber(tolua_S,3,-1));
  bool zfailmethod = ((bool)  tolua_toboolean(tolua_S,4,true));
  float infinity = ((float)  tolua_tonumber(tolua_S,5,1000.0f));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addShadowVolumeSceneNode'", NULL);
#endif
  {
   irr::scene::IShadowVolumeSceneNode* tolua_ret = (irr::scene::IShadowVolumeSceneNode*)  self->addShadowVolumeSceneNode(shadowMesh,id,zfailmethod,infinity);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IShadowVolumeSceneNode");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addShadowVolumeSceneNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFrameNr of class  irr::scene::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_getFrameNr00
static int tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_getFrameNr00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IAnimatedMeshSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IAnimatedMeshSceneNode* self = (const irr::scene::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFrameNr'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getFrameNr();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFrameNr'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getStartFrame of class  irr::scene::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_getStartFrame00
static int tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_getStartFrame00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IAnimatedMeshSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IAnimatedMeshSceneNode* self = (const irr::scene::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getStartFrame'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getStartFrame();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getStartFrame'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getEndFrame of class  irr::scene::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_getEndFrame00
static int tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_getEndFrame00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IAnimatedMeshSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IAnimatedMeshSceneNode* self = (const irr::scene::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getEndFrame'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getEndFrame();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getEndFrame'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setLoopMode of class  irr::scene::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_setLoopMode00
static int tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_setLoopMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IAnimatedMeshSceneNode",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IAnimatedMeshSceneNode* self = (irr::scene::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
  bool playAnimationLooped = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setLoopMode'", NULL);
#endif
  {
   self->setLoopMode(playAnimationLooped);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setLoopMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getLoopMode of class  irr::scene::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_getLoopMode00
static int tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_getLoopMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IAnimatedMeshSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IAnimatedMeshSceneNode* self = (const irr::scene::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getLoopMode'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->getLoopMode();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLoopMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setReadOnlyMaterials of class  irr::scene::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_setReadOnlyMaterials00
static int tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_setReadOnlyMaterials00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IAnimatedMeshSceneNode",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IAnimatedMeshSceneNode* self = (irr::scene::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
  bool readonly = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setReadOnlyMaterials'", NULL);
#endif
  {
   self->setReadOnlyMaterials(readonly);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setReadOnlyMaterials'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isReadOnlyMaterials of class  irr::scene::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_isReadOnlyMaterials00
static int tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_isReadOnlyMaterials00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IAnimatedMeshSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IAnimatedMeshSceneNode* self = (const irr::scene::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isReadOnlyMaterials'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isReadOnlyMaterials();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isReadOnlyMaterials'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMesh of class  irr::scene::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_setMesh00
static int tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_setMesh00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IAnimatedMeshSceneNode",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::IAnimatedMesh",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IAnimatedMeshSceneNode* self = (irr::scene::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::IAnimatedMesh* mesh = ((irr::scene::IAnimatedMesh*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMesh'", NULL);
#endif
  {
   self->setMesh(mesh);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMesh'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMesh of class  irr::scene::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_getMesh00
static int tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_getMesh00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IAnimatedMeshSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IAnimatedMeshSceneNode* self = (irr::scene::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMesh'", NULL);
#endif
  {
   irr::scene::IAnimatedMesh* tolua_ret = (irr::scene::IAnimatedMesh*)  self->getMesh();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IAnimatedMesh");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMesh'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setJointMode of class  irr::scene::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_setJointMode00
static int tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_setJointMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IAnimatedMeshSceneNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IAnimatedMeshSceneNode* self = (irr::scene::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::E_JOINT_UPDATE_ON_RENDER mode = ((irr::scene::E_JOINT_UPDATE_ON_RENDER) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setJointMode'", NULL);
#endif
  {
   self->setJointMode(mode);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setJointMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTransitionTime of class  irr::scene::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_setTransitionTime00
static int tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_setTransitionTime00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IAnimatedMeshSceneNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IAnimatedMeshSceneNode* self = (irr::scene::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
  float Time = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTransitionTime'", NULL);
#endif
  {
   self->setTransitionTime(Time);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTransitionTime'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: animateJoints of class  irr::scene::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_animateJoints00
static int tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_animateJoints00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IAnimatedMeshSceneNode",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IAnimatedMeshSceneNode* self = (irr::scene::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
  bool CalculateAbsolutePositions = ((bool)  tolua_toboolean(tolua_S,2,true));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'animateJoints'", NULL);
#endif
  {
   self->animateJoints(CalculateAbsolutePositions);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'animateJoints'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setRenderFromIdentity of class  irr::scene::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_setRenderFromIdentity00
static int tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_setRenderFromIdentity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IAnimatedMeshSceneNode",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IAnimatedMeshSceneNode* self = (irr::scene::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
  bool On = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setRenderFromIdentity'", NULL);
#endif
  {
   self->setRenderFromIdentity(On);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setRenderFromIdentity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: clone of class  irr::scene::IAnimatedMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_clone00
static int tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_clone00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IAnimatedMeshSceneNode",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::ISceneNode",1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IAnimatedMeshSceneNode* self = (irr::scene::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::ISceneNode* newParent = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'clone'", NULL);
#endif
  {
   irr::scene::ISceneNode* tolua_ret = (irr::scene::ISceneNode*)  self->clone(newParent);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::ISceneNode");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'clone'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setSize of class  irr::scene::IBillboardSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IBillboardSceneNode_setSize00
static int tolua_NeoGame_irr_scene_IBillboardSceneNode_setSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IBillboardSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::dimension2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IBillboardSceneNode* self = (irr::scene::IBillboardSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::dimension2d<float>* size = ((const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setSize'", NULL);
#endif
  {
   self->setSize(*size);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setSize of class  irr::scene::IBillboardSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IBillboardSceneNode_setSize01
static int tolua_NeoGame_irr_scene_IBillboardSceneNode_setSize01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IBillboardSceneNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IBillboardSceneNode* self = (irr::scene::IBillboardSceneNode*)  tolua_tousertype(tolua_S,1,0);
  float height = ((float)  tolua_tonumber(tolua_S,2,0));
  float bottomEdgeWidth = ((float)  tolua_tonumber(tolua_S,3,0));
  float topEdgeWidth = ((float)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setSize'", NULL);
#endif
  {
   self->setSize(height,bottomEdgeWidth,topEdgeWidth);
  }
 }
 return 0;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IBillboardSceneNode_setSize00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSize of class  irr::scene::IBillboardSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IBillboardSceneNode_getSize00
static int tolua_NeoGame_irr_scene_IBillboardSceneNode_getSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IBillboardSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IBillboardSceneNode* self = (const irr::scene::IBillboardSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSize'", NULL);
#endif
  {
   const irr::core::dimension2d<float>& tolua_ret = (const irr::core::dimension2d<float>&)  self->getSize();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const irr::core::dimension2d<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSize of class  irr::scene::IBillboardSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IBillboardSceneNode_getSize01
static int tolua_NeoGame_irr_scene_IBillboardSceneNode_getSize01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IBillboardSceneNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::scene::IBillboardSceneNode* self = (const irr::scene::IBillboardSceneNode*)  tolua_tousertype(tolua_S,1,0);
  float height = ((float)  tolua_tonumber(tolua_S,2,0));
  float bottomEdgeWidth = ((float)  tolua_tonumber(tolua_S,3,0));
  float topEdgeWidth = ((float)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSize'", NULL);
#endif
  {
   self->getSize(height,bottomEdgeWidth,topEdgeWidth);
   tolua_pushnumber(tolua_S,(lua_Number)height);
   tolua_pushnumber(tolua_S,(lua_Number)bottomEdgeWidth);
   tolua_pushnumber(tolua_S,(lua_Number)topEdgeWidth);
  }
 }
 return 3;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IBillboardSceneNode_getSize00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: setColor of class  irr::scene::IBillboardSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IBillboardSceneNode_setColor00
static int tolua_NeoGame_irr_scene_IBillboardSceneNode_setColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IBillboardSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IBillboardSceneNode* self = (irr::scene::IBillboardSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::video::SColor* overallColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setColor'", NULL);
#endif
  {
   self->setColor(*overallColor);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setColor of class  irr::scene::IBillboardSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IBillboardSceneNode_setColor01
static int tolua_NeoGame_irr_scene_IBillboardSceneNode_setColor01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IBillboardSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::video::SColor",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IBillboardSceneNode* self = (irr::scene::IBillboardSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::video::SColor* topColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,2,0));
  const irr::video::SColor* bottomColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setColor'", NULL);
#endif
  {
   self->setColor(*topColor,*bottomColor);
  }
 }
 return 0;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IBillboardSceneNode_setColor00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getColor of class  irr::scene::IBillboardSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IBillboardSceneNode_getColor00
static int tolua_NeoGame_irr_scene_IBillboardSceneNode_getColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IBillboardSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::video::SColor",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IBillboardSceneNode* self = (const irr::scene::IBillboardSceneNode*)  tolua_tousertype(tolua_S,1,0);
  irr::video::SColor* topColor = ((irr::video::SColor*)  tolua_tousertype(tolua_S,2,0));
  irr::video::SColor* bottomColor = ((irr::video::SColor*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getColor'", NULL);
#endif
  {
   self->getColor(*topColor,*bottomColor);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setProjectionMatrix of class  irr::scene::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ICameraSceneNode_setProjectionMatrix00
static int tolua_NeoGame_irr_scene_ICameraSceneNode_setProjectionMatrix00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ICameraSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::CMatrix4<float>",0,&tolua_err)) ||
     !tolua_isboolean(tolua_S,3,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ICameraSceneNode* self = (irr::scene::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::CMatrix4<float>* projection = ((const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,2,0));
  bool isOrthogonal = ((bool)  tolua_toboolean(tolua_S,3,false));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setProjectionMatrix'", NULL);
#endif
  {
   self->setProjectionMatrix(*projection,isOrthogonal);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setProjectionMatrix'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getProjectionMatrix of class  irr::scene::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ICameraSceneNode_getProjectionMatrix00
static int tolua_NeoGame_irr_scene_ICameraSceneNode_getProjectionMatrix00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::ICameraSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::ICameraSceneNode* self = (const irr::scene::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getProjectionMatrix'", NULL);
#endif
  {
   const irr::core::CMatrix4<float>& tolua_ret = (const irr::core::CMatrix4<float>&)  self->getProjectionMatrix();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const irr::core::CMatrix4<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getProjectionMatrix'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getViewMatrix of class  irr::scene::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ICameraSceneNode_getViewMatrix00
static int tolua_NeoGame_irr_scene_ICameraSceneNode_getViewMatrix00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::ICameraSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::ICameraSceneNode* self = (const irr::scene::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getViewMatrix'", NULL);
#endif
  {
   const irr::core::CMatrix4<float>& tolua_ret = (const irr::core::CMatrix4<float>&)  self->getViewMatrix();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const irr::core::CMatrix4<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getViewMatrix'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setViewMatrixAffector of class  irr::scene::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ICameraSceneNode_setViewMatrixAffector00
static int tolua_NeoGame_irr_scene_ICameraSceneNode_setViewMatrixAffector00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ICameraSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::CMatrix4<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ICameraSceneNode* self = (irr::scene::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::CMatrix4<float>* affector = ((const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setViewMatrixAffector'", NULL);
#endif
  {
   self->setViewMatrixAffector(*affector);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setViewMatrixAffector'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getViewMatrixAffector of class  irr::scene::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ICameraSceneNode_getViewMatrixAffector00
static int tolua_NeoGame_irr_scene_ICameraSceneNode_getViewMatrixAffector00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::ICameraSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::ICameraSceneNode* self = (const irr::scene::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getViewMatrixAffector'", NULL);
#endif
  {
   const irr::core::CMatrix4<float>& tolua_ret = (const irr::core::CMatrix4<float>&)  self->getViewMatrixAffector();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const irr::core::CMatrix4<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getViewMatrixAffector'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTarget of class  irr::scene::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ICameraSceneNode_setTarget00
static int tolua_NeoGame_irr_scene_ICameraSceneNode_setTarget00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ICameraSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ICameraSceneNode* self = (irr::scene::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* pos = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTarget'", NULL);
#endif
  {
   self->setTarget(*pos);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTarget'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setRotation of class  irr::scene::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ICameraSceneNode_setRotation00
static int tolua_NeoGame_irr_scene_ICameraSceneNode_setRotation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ICameraSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ICameraSceneNode* self = (irr::scene::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* rotation = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setRotation'", NULL);
#endif
  {
   self->setRotation(*rotation);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setRotation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTarget of class  irr::scene::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ICameraSceneNode_getTarget00
static int tolua_NeoGame_irr_scene_ICameraSceneNode_getTarget00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::ICameraSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::ICameraSceneNode* self = (const irr::scene::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTarget'", NULL);
#endif
  {
   const irr::core::vector3d<float>& tolua_ret = (const irr::core::vector3d<float>&)  self->getTarget();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const irr::core::vector3d<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTarget'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setUpVector of class  irr::scene::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ICameraSceneNode_setUpVector00
static int tolua_NeoGame_irr_scene_ICameraSceneNode_setUpVector00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ICameraSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ICameraSceneNode* self = (irr::scene::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* pos = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setUpVector'", NULL);
#endif
  {
   self->setUpVector(*pos);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setUpVector'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getUpVector of class  irr::scene::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ICameraSceneNode_getUpVector00
static int tolua_NeoGame_irr_scene_ICameraSceneNode_getUpVector00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::ICameraSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::ICameraSceneNode* self = (const irr::scene::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getUpVector'", NULL);
#endif
  {
   const irr::core::vector3d<float>& tolua_ret = (const irr::core::vector3d<float>&)  self->getUpVector();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const irr::core::vector3d<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getUpVector'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getNearValue of class  irr::scene::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ICameraSceneNode_getNearValue00
static int tolua_NeoGame_irr_scene_ICameraSceneNode_getNearValue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::ICameraSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::ICameraSceneNode* self = (const irr::scene::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getNearValue'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getNearValue();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getNearValue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFarValue of class  irr::scene::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ICameraSceneNode_getFarValue00
static int tolua_NeoGame_irr_scene_ICameraSceneNode_getFarValue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::ICameraSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::ICameraSceneNode* self = (const irr::scene::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFarValue'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getFarValue();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFarValue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAspectRatio of class  irr::scene::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ICameraSceneNode_getAspectRatio00
static int tolua_NeoGame_irr_scene_ICameraSceneNode_getAspectRatio00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::ICameraSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::ICameraSceneNode* self = (const irr::scene::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAspectRatio'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getAspectRatio();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAspectRatio'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFOV of class  irr::scene::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ICameraSceneNode_getFOV00
static int tolua_NeoGame_irr_scene_ICameraSceneNode_getFOV00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::ICameraSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::ICameraSceneNode* self = (const irr::scene::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFOV'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getFOV();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFOV'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setNearValue of class  irr::scene::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ICameraSceneNode_setNearValue00
static int tolua_NeoGame_irr_scene_ICameraSceneNode_setNearValue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ICameraSceneNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ICameraSceneNode* self = (irr::scene::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
  float zn = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setNearValue'", NULL);
#endif
  {
   self->setNearValue(zn);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setNearValue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setFarValue of class  irr::scene::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ICameraSceneNode_setFarValue00
static int tolua_NeoGame_irr_scene_ICameraSceneNode_setFarValue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ICameraSceneNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ICameraSceneNode* self = (irr::scene::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
  float zf = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setFarValue'", NULL);
#endif
  {
   self->setFarValue(zf);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setFarValue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAspectRatio of class  irr::scene::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ICameraSceneNode_setAspectRatio00
static int tolua_NeoGame_irr_scene_ICameraSceneNode_setAspectRatio00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ICameraSceneNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ICameraSceneNode* self = (irr::scene::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
  float aspect = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAspectRatio'", NULL);
#endif
  {
   self->setAspectRatio(aspect);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAspectRatio'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setFOV of class  irr::scene::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ICameraSceneNode_setFOV00
static int tolua_NeoGame_irr_scene_ICameraSceneNode_setFOV00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ICameraSceneNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ICameraSceneNode* self = (irr::scene::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
  float fovy = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setFOV'", NULL);
#endif
  {
   self->setFOV(fovy);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setFOV'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setInputReceiverEnabled of class  irr::scene::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ICameraSceneNode_setInputReceiverEnabled00
static int tolua_NeoGame_irr_scene_ICameraSceneNode_setInputReceiverEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ICameraSceneNode",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ICameraSceneNode* self = (irr::scene::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
  bool enabled = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setInputReceiverEnabled'", NULL);
#endif
  {
   self->setInputReceiverEnabled(enabled);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setInputReceiverEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isInputReceiverEnabled of class  irr::scene::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ICameraSceneNode_isInputReceiverEnabled00
static int tolua_NeoGame_irr_scene_ICameraSceneNode_isInputReceiverEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::ICameraSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::ICameraSceneNode* self = (const irr::scene::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isInputReceiverEnabled'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isInputReceiverEnabled();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isInputReceiverEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isOrthogonal of class  irr::scene::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ICameraSceneNode_isOrthogonal00
static int tolua_NeoGame_irr_scene_ICameraSceneNode_isOrthogonal00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::ICameraSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::ICameraSceneNode* self = (const irr::scene::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isOrthogonal'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isOrthogonal();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isOrthogonal'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: bindTargetAndRotation of class  irr::scene::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ICameraSceneNode_bindTargetAndRotation00
static int tolua_NeoGame_irr_scene_ICameraSceneNode_bindTargetAndRotation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ICameraSceneNode",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ICameraSceneNode* self = (irr::scene::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
  bool bound = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'bindTargetAndRotation'", NULL);
#endif
  {
   self->bindTargetAndRotation(bound);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'bindTargetAndRotation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTargetAndRotationBinding of class  irr::scene::ICameraSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ICameraSceneNode_getTargetAndRotationBinding00
static int tolua_NeoGame_irr_scene_ICameraSceneNode_getTargetAndRotationBinding00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::ICameraSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::ICameraSceneNode* self = (const irr::scene::ICameraSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTargetAndRotationBinding'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->getTargetAndRotationBinding();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTargetAndRotationBinding'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getRelativeTransformationMatrix of class  irr::scene::IDummyTransformationSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IDummyTransformationSceneNode_getRelativeTransformationMatrix00
static int tolua_NeoGame_irr_scene_IDummyTransformationSceneNode_getRelativeTransformationMatrix00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IDummyTransformationSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IDummyTransformationSceneNode* self = (irr::scene::IDummyTransformationSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getRelativeTransformationMatrix'", NULL);
#endif
  {
   irr::core::CMatrix4<float>& tolua_ret = (irr::core::CMatrix4<float>&)  self->getRelativeTransformationMatrix();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::CMatrix4<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRelativeTransformationMatrix'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setLightData of class  irr::scene::ILightSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ILightSceneNode_setLightData00
static int tolua_NeoGame_irr_scene_ILightSceneNode_setLightData00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ILightSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::video::SLight",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ILightSceneNode* self = (irr::scene::ILightSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::video::SLight* light = ((const irr::video::SLight*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setLightData'", NULL);
#endif
  {
   self->setLightData(*light);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setLightData'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getLightData of class  irr::scene::ILightSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ILightSceneNode_getLightData00
static int tolua_NeoGame_irr_scene_ILightSceneNode_getLightData00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ILightSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ILightSceneNode* self = (irr::scene::ILightSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getLightData'", NULL);
#endif
  {
   irr::video::SLight& tolua_ret = (irr::video::SLight&)  self->getLightData();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::video::SLight");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLightData'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setVisible of class  irr::scene::ILightSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ILightSceneNode_setVisible00
static int tolua_NeoGame_irr_scene_ILightSceneNode_setVisible00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ILightSceneNode",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ILightSceneNode* self = (irr::scene::ILightSceneNode*)  tolua_tousertype(tolua_S,1,0);
  bool isVisible = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setVisible'", NULL);
#endif
  {
   self->setVisible(isVisible);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setVisible'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setRadius of class  irr::scene::ILightSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ILightSceneNode_setRadius00
static int tolua_NeoGame_irr_scene_ILightSceneNode_setRadius00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ILightSceneNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ILightSceneNode* self = (irr::scene::ILightSceneNode*)  tolua_tousertype(tolua_S,1,0);
  float radius = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setRadius'", NULL);
#endif
  {
   self->setRadius(radius);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setRadius'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getRadius of class  irr::scene::ILightSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ILightSceneNode_getRadius00
static int tolua_NeoGame_irr_scene_ILightSceneNode_getRadius00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::ILightSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::ILightSceneNode* self = (const irr::scene::ILightSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getRadius'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getRadius();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRadius'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setLightType of class  irr::scene::ILightSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ILightSceneNode_setLightType00
static int tolua_NeoGame_irr_scene_ILightSceneNode_setLightType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ILightSceneNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ILightSceneNode* self = (irr::scene::ILightSceneNode*)  tolua_tousertype(tolua_S,1,0);
  irr::video::E_LIGHT_TYPE type = ((irr::video::E_LIGHT_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setLightType'", NULL);
#endif
  {
   self->setLightType(type);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setLightType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getLightType of class  irr::scene::ILightSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ILightSceneNode_getLightType00
static int tolua_NeoGame_irr_scene_ILightSceneNode_getLightType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::ILightSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::ILightSceneNode* self = (const irr::scene::ILightSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getLightType'", NULL);
#endif
  {
   irr::video::E_LIGHT_TYPE tolua_ret = (irr::video::E_LIGHT_TYPE)  self->getLightType();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLightType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: enableCastShadow of class  irr::scene::ILightSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ILightSceneNode_enableCastShadow00
static int tolua_NeoGame_irr_scene_ILightSceneNode_enableCastShadow00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ILightSceneNode",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ILightSceneNode* self = (irr::scene::ILightSceneNode*)  tolua_tousertype(tolua_S,1,0);
  bool shadow = ((bool)  tolua_toboolean(tolua_S,2,true));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'enableCastShadow'", NULL);
#endif
  {
   self->enableCastShadow(shadow);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'enableCastShadow'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCastShadow of class  irr::scene::ILightSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ILightSceneNode_getCastShadow00
static int tolua_NeoGame_irr_scene_ILightSceneNode_getCastShadow00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::ILightSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::ILightSceneNode* self = (const irr::scene::ILightSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCastShadow'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->getCastShadow();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCastShadow'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getBoundingBox of class  irr::scene::IMesh */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IMesh_getBoundingBox00
static int tolua_NeoGame_irr_scene_IMesh_getBoundingBox00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IMesh",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IMesh* self = (const irr::scene::IMesh*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getBoundingBox'", NULL);
#endif
  {
   const irr::core::aabbox3d<f32>& tolua_ret = (const irr::core::aabbox3d<f32>&)  self->getBoundingBox();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const irr::core::aabbox3d<f32>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getBoundingBox'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setBoundingBox of class  irr::scene::IMesh */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IMesh_setBoundingBox00
static int tolua_NeoGame_irr_scene_IMesh_setBoundingBox00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IMesh",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::aabbox3df",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IMesh* self = (irr::scene::IMesh*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::aabbox3df* box = ((const irr::core::aabbox3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setBoundingBox'", NULL);
#endif
  {
   self->setBoundingBox(*box);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setBoundingBox'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMaterialFlag of class  irr::scene::IMesh */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IMesh_setMaterialFlag00
static int tolua_NeoGame_irr_scene_IMesh_setMaterialFlag00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IMesh",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IMesh* self = (irr::scene::IMesh*)  tolua_tousertype(tolua_S,1,0);
  irr::video::E_MATERIAL_FLAG flag = ((irr::video::E_MATERIAL_FLAG) (int)  tolua_tonumber(tolua_S,2,0));
  bool newvalue = ((bool)  tolua_toboolean(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMaterialFlag'", NULL);
#endif
  {
   self->setMaterialFlag(flag,newvalue);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMaterialFlag'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMesh of class  irr::scene::IMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IMeshSceneNode_setMesh00
static int tolua_NeoGame_irr_scene_IMeshSceneNode_setMesh00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IMeshSceneNode",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::IMesh",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IMeshSceneNode* self = (irr::scene::IMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::IMesh* mesh = ((irr::scene::IMesh*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMesh'", NULL);
#endif
  {
   self->setMesh(mesh);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMesh'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMesh of class  irr::scene::IMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IMeshSceneNode_getMesh00
static int tolua_NeoGame_irr_scene_IMeshSceneNode_getMesh00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IMeshSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IMeshSceneNode* self = (irr::scene::IMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMesh'", NULL);
#endif
  {
   irr::scene::IMesh* tolua_ret = (irr::scene::IMesh*)  self->getMesh();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IMesh");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMesh'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addShadowVolumeSceneNode of class  irr::scene::IMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IMeshSceneNode_addShadowVolumeSceneNode00
static int tolua_NeoGame_irr_scene_IMeshSceneNode_addShadowVolumeSceneNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IMeshSceneNode",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const irr::scene::IMesh",1,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
     !tolua_isboolean(tolua_S,4,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IMeshSceneNode* self = (irr::scene::IMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::scene::IMesh* shadowMesh = ((const irr::scene::IMesh*)  tolua_tousertype(tolua_S,2,0));
  int id = ((int)  tolua_tonumber(tolua_S,3,-1));
  bool zfailmethod = ((bool)  tolua_toboolean(tolua_S,4,true));
  float infinity = ((float)  tolua_tonumber(tolua_S,5,1000.0f));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addShadowVolumeSceneNode'", NULL);
#endif
  {
   irr::scene::IShadowVolumeSceneNode* tolua_ret = (irr::scene::IShadowVolumeSceneNode*)  self->addShadowVolumeSceneNode(shadowMesh,id,zfailmethod,infinity);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IShadowVolumeSceneNode");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addShadowVolumeSceneNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setReadOnlyMaterials of class  irr::scene::IMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IMeshSceneNode_setReadOnlyMaterials00
static int tolua_NeoGame_irr_scene_IMeshSceneNode_setReadOnlyMaterials00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IMeshSceneNode",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IMeshSceneNode* self = (irr::scene::IMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
  bool readonly = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setReadOnlyMaterials'", NULL);
#endif
  {
   self->setReadOnlyMaterials(readonly);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setReadOnlyMaterials'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isReadOnlyMaterials of class  irr::scene::IMeshSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IMeshSceneNode_isReadOnlyMaterials00
static int tolua_NeoGame_irr_scene_IMeshSceneNode_isReadOnlyMaterials00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IMeshSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IMeshSceneNode* self = (const irr::scene::IMeshSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isReadOnlyMaterials'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isReadOnlyMaterials();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isReadOnlyMaterials'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setEnabled of class  irr::scene::IParticleAffector */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleAffector_setEnabled00
static int tolua_NeoGame_irr_scene_IParticleAffector_setEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleAffector",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleAffector* self = (irr::scene::IParticleAffector*)  tolua_tousertype(tolua_S,1,0);
  bool enabled = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setEnabled'", NULL);
#endif
  {
   self->setEnabled(enabled);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getEnabled of class  irr::scene::IParticleAffector */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleAffector_getEnabled00
static int tolua_NeoGame_irr_scene_IParticleAffector_getEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleAffector",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleAffector* self = (const irr::scene::IParticleAffector*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getEnabled'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->getEnabled();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getType of class  irr::scene::IParticleAffector */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleAffector_getType00
static int tolua_NeoGame_irr_scene_IParticleAffector_getType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleAffector",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleAffector* self = (const irr::scene::IParticleAffector*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getType'", NULL);
#endif
  {
   irr::scene::E_PARTICLE_AFFECTOR_TYPE tolua_ret = (irr::scene::E_PARTICLE_AFFECTOR_TYPE)  self->getType();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAnimatedMeshSceneNode of class  irr::scene::IParticleAnimatedMeshSceneNodeEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleAnimatedMeshSceneNodeEmitter_setAnimatedMeshSceneNode00
static int tolua_NeoGame_irr_scene_IParticleAnimatedMeshSceneNodeEmitter_setAnimatedMeshSceneNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleAnimatedMeshSceneNodeEmitter",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::IAnimatedMeshSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter* self = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::IAnimatedMeshSceneNode* node = ((irr::scene::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAnimatedMeshSceneNode'", NULL);
#endif
  {
   self->setAnimatedMeshSceneNode(node);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAnimatedMeshSceneNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setUseNormalDirection of class  irr::scene::IParticleAnimatedMeshSceneNodeEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleAnimatedMeshSceneNodeEmitter_setUseNormalDirection00
static int tolua_NeoGame_irr_scene_IParticleAnimatedMeshSceneNodeEmitter_setUseNormalDirection00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleAnimatedMeshSceneNodeEmitter",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter* self = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter*)  tolua_tousertype(tolua_S,1,0);
  bool useNormalDirection = ((bool)  tolua_toboolean(tolua_S,2,true));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setUseNormalDirection'", NULL);
#endif
  {
   self->setUseNormalDirection(useNormalDirection);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setUseNormalDirection'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setNormalDirectionModifier of class  irr::scene::IParticleAnimatedMeshSceneNodeEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleAnimatedMeshSceneNodeEmitter_setNormalDirectionModifier00
static int tolua_NeoGame_irr_scene_IParticleAnimatedMeshSceneNodeEmitter_setNormalDirectionModifier00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleAnimatedMeshSceneNodeEmitter",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter* self = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter*)  tolua_tousertype(tolua_S,1,0);
  float normalDirectionModifier = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setNormalDirectionModifier'", NULL);
#endif
  {
   self->setNormalDirectionModifier(normalDirectionModifier);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setNormalDirectionModifier'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setEveryMeshVertex of class  irr::scene::IParticleAnimatedMeshSceneNodeEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleAnimatedMeshSceneNodeEmitter_setEveryMeshVertex00
static int tolua_NeoGame_irr_scene_IParticleAnimatedMeshSceneNodeEmitter_setEveryMeshVertex00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleAnimatedMeshSceneNodeEmitter",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter* self = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter*)  tolua_tousertype(tolua_S,1,0);
  bool everyMeshVertex = ((bool)  tolua_toboolean(tolua_S,2,true));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setEveryMeshVertex'", NULL);
#endif
  {
   self->setEveryMeshVertex(everyMeshVertex);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setEveryMeshVertex'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAnimatedMeshSceneNode of class  irr::scene::IParticleAnimatedMeshSceneNodeEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleAnimatedMeshSceneNodeEmitter_getAnimatedMeshSceneNode00
static int tolua_NeoGame_irr_scene_IParticleAnimatedMeshSceneNodeEmitter_getAnimatedMeshSceneNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleAnimatedMeshSceneNodeEmitter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleAnimatedMeshSceneNodeEmitter* self = (const irr::scene::IParticleAnimatedMeshSceneNodeEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAnimatedMeshSceneNode'", NULL);
#endif
  {
   const irr::scene::IAnimatedMeshSceneNode* tolua_ret = (const irr::scene::IAnimatedMeshSceneNode*)  self->getAnimatedMeshSceneNode();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"const irr::scene::IAnimatedMeshSceneNode");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAnimatedMeshSceneNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isUsingNormalDirection of class  irr::scene::IParticleAnimatedMeshSceneNodeEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleAnimatedMeshSceneNodeEmitter_isUsingNormalDirection00
static int tolua_NeoGame_irr_scene_IParticleAnimatedMeshSceneNodeEmitter_isUsingNormalDirection00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleAnimatedMeshSceneNodeEmitter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleAnimatedMeshSceneNodeEmitter* self = (const irr::scene::IParticleAnimatedMeshSceneNodeEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isUsingNormalDirection'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isUsingNormalDirection();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isUsingNormalDirection'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getNormalDirectionModifier of class  irr::scene::IParticleAnimatedMeshSceneNodeEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleAnimatedMeshSceneNodeEmitter_getNormalDirectionModifier00
static int tolua_NeoGame_irr_scene_IParticleAnimatedMeshSceneNodeEmitter_getNormalDirectionModifier00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleAnimatedMeshSceneNodeEmitter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleAnimatedMeshSceneNodeEmitter* self = (const irr::scene::IParticleAnimatedMeshSceneNodeEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getNormalDirectionModifier'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getNormalDirectionModifier();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getNormalDirectionModifier'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getEveryMeshVertex of class  irr::scene::IParticleAnimatedMeshSceneNodeEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleAnimatedMeshSceneNodeEmitter_getEveryMeshVertex00
static int tolua_NeoGame_irr_scene_IParticleAnimatedMeshSceneNodeEmitter_getEveryMeshVertex00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleAnimatedMeshSceneNodeEmitter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleAnimatedMeshSceneNodeEmitter* self = (const irr::scene::IParticleAnimatedMeshSceneNodeEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getEveryMeshVertex'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->getEveryMeshVertex();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getEveryMeshVertex'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getType of class  irr::scene::IParticleAnimatedMeshSceneNodeEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleAnimatedMeshSceneNodeEmitter_getType00
static int tolua_NeoGame_irr_scene_IParticleAnimatedMeshSceneNodeEmitter_getType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleAnimatedMeshSceneNodeEmitter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter* self = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getType'", NULL);
#endif
  {
   irr::scene::E_PARTICLE_EMITTER_TYPE tolua_ret = (irr::scene::E_PARTICLE_EMITTER_TYPE)  self->getType();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setPoint of class  irr::scene::IParticleAttractionAffector */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleAttractionAffector_setPoint00
static int tolua_NeoGame_irr_scene_IParticleAttractionAffector_setPoint00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleAttractionAffector",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleAttractionAffector* self = (irr::scene::IParticleAttractionAffector*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* point = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setPoint'", NULL);
#endif
  {
   self->setPoint(*point);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setPoint'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAttract of class  irr::scene::IParticleAttractionAffector */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleAttractionAffector_setAttract00
static int tolua_NeoGame_irr_scene_IParticleAttractionAffector_setAttract00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleAttractionAffector",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleAttractionAffector* self = (irr::scene::IParticleAttractionAffector*)  tolua_tousertype(tolua_S,1,0);
  bool attract = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAttract'", NULL);
#endif
  {
   self->setAttract(attract);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAttract'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAffectX of class  irr::scene::IParticleAttractionAffector */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleAttractionAffector_setAffectX00
static int tolua_NeoGame_irr_scene_IParticleAttractionAffector_setAffectX00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleAttractionAffector",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleAttractionAffector* self = (irr::scene::IParticleAttractionAffector*)  tolua_tousertype(tolua_S,1,0);
  bool affect = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAffectX'", NULL);
#endif
  {
   self->setAffectX(affect);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAffectX'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAffectY of class  irr::scene::IParticleAttractionAffector */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleAttractionAffector_setAffectY00
static int tolua_NeoGame_irr_scene_IParticleAttractionAffector_setAffectY00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleAttractionAffector",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleAttractionAffector* self = (irr::scene::IParticleAttractionAffector*)  tolua_tousertype(tolua_S,1,0);
  bool affect = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAffectY'", NULL);
#endif
  {
   self->setAffectY(affect);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAffectY'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAffectZ of class  irr::scene::IParticleAttractionAffector */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleAttractionAffector_setAffectZ00
static int tolua_NeoGame_irr_scene_IParticleAttractionAffector_setAffectZ00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleAttractionAffector",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleAttractionAffector* self = (irr::scene::IParticleAttractionAffector*)  tolua_tousertype(tolua_S,1,0);
  bool affect = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAffectZ'", NULL);
#endif
  {
   self->setAffectZ(affect);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAffectZ'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getPoint of class  irr::scene::IParticleAttractionAffector */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleAttractionAffector_getPoint00
static int tolua_NeoGame_irr_scene_IParticleAttractionAffector_getPoint00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleAttractionAffector",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleAttractionAffector* self = (const irr::scene::IParticleAttractionAffector*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getPoint'", NULL);
#endif
  {
   const irr::core::vector3d<float>& tolua_ret = (const irr::core::vector3d<float>&)  self->getPoint();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const irr::core::vector3d<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getPoint'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAttract of class  irr::scene::IParticleAttractionAffector */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleAttractionAffector_getAttract00
static int tolua_NeoGame_irr_scene_IParticleAttractionAffector_getAttract00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleAttractionAffector",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleAttractionAffector* self = (const irr::scene::IParticleAttractionAffector*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAttract'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->getAttract();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAttract'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAffectX of class  irr::scene::IParticleAttractionAffector */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleAttractionAffector_getAffectX00
static int tolua_NeoGame_irr_scene_IParticleAttractionAffector_getAffectX00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleAttractionAffector",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleAttractionAffector* self = (const irr::scene::IParticleAttractionAffector*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAffectX'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->getAffectX();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAffectX'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAffectY of class  irr::scene::IParticleAttractionAffector */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleAttractionAffector_getAffectY00
static int tolua_NeoGame_irr_scene_IParticleAttractionAffector_getAffectY00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleAttractionAffector",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleAttractionAffector* self = (const irr::scene::IParticleAttractionAffector*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAffectY'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->getAffectY();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAffectY'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAffectZ of class  irr::scene::IParticleAttractionAffector */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleAttractionAffector_getAffectZ00
static int tolua_NeoGame_irr_scene_IParticleAttractionAffector_getAffectZ00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleAttractionAffector",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleAttractionAffector* self = (const irr::scene::IParticleAttractionAffector*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAffectZ'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->getAffectZ();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAffectZ'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getType of class  irr::scene::IParticleAttractionAffector */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleAttractionAffector_getType00
static int tolua_NeoGame_irr_scene_IParticleAttractionAffector_getType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleAttractionAffector",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleAttractionAffector* self = (const irr::scene::IParticleAttractionAffector*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getType'", NULL);
#endif
  {
   irr::scene::E_PARTICLE_AFFECTOR_TYPE tolua_ret = (irr::scene::E_PARTICLE_AFFECTOR_TYPE)  self->getType();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setBox of class  irr::scene::IParticleBoxEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleBoxEmitter_setBox00
static int tolua_NeoGame_irr_scene_IParticleBoxEmitter_setBox00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleBoxEmitter",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::aabbox3df",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleBoxEmitter* self = (irr::scene::IParticleBoxEmitter*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::aabbox3df* box = ((const irr::core::aabbox3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setBox'", NULL);
#endif
  {
   self->setBox(*box);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setBox'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getBox of class  irr::scene::IParticleBoxEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleBoxEmitter_getBox00
static int tolua_NeoGame_irr_scene_IParticleBoxEmitter_getBox00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleBoxEmitter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleBoxEmitter* self = (const irr::scene::IParticleBoxEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getBox'", NULL);
#endif
  {
   const irr::core::aabbox3df& tolua_ret = (const irr::core::aabbox3df&)  self->getBox();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const irr::core::aabbox3df");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getBox'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getType of class  irr::scene::IParticleBoxEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleBoxEmitter_getType00
static int tolua_NeoGame_irr_scene_IParticleBoxEmitter_getType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleBoxEmitter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleBoxEmitter* self = (const irr::scene::IParticleBoxEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getType'", NULL);
#endif
  {
   irr::scene::E_PARTICLE_EMITTER_TYPE tolua_ret = (irr::scene::E_PARTICLE_EMITTER_TYPE)  self->getType();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setCenter of class  irr::scene::IParticleCylinderEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleCylinderEmitter_setCenter00
static int tolua_NeoGame_irr_scene_IParticleCylinderEmitter_setCenter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleCylinderEmitter",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleCylinderEmitter* self = (irr::scene::IParticleCylinderEmitter*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* center = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setCenter'", NULL);
#endif
  {
   self->setCenter(*center);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setCenter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setNormal of class  irr::scene::IParticleCylinderEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleCylinderEmitter_setNormal00
static int tolua_NeoGame_irr_scene_IParticleCylinderEmitter_setNormal00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleCylinderEmitter",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleCylinderEmitter* self = (irr::scene::IParticleCylinderEmitter*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* normal = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setNormal'", NULL);
#endif
  {
   self->setNormal(*normal);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setNormal'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setRadius of class  irr::scene::IParticleCylinderEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleCylinderEmitter_setRadius00
static int tolua_NeoGame_irr_scene_IParticleCylinderEmitter_setRadius00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleCylinderEmitter",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleCylinderEmitter* self = (irr::scene::IParticleCylinderEmitter*)  tolua_tousertype(tolua_S,1,0);
  float radius = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setRadius'", NULL);
#endif
  {
   self->setRadius(radius);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setRadius'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setLength of class  irr::scene::IParticleCylinderEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleCylinderEmitter_setLength00
static int tolua_NeoGame_irr_scene_IParticleCylinderEmitter_setLength00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleCylinderEmitter",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleCylinderEmitter* self = (irr::scene::IParticleCylinderEmitter*)  tolua_tousertype(tolua_S,1,0);
  float length = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setLength'", NULL);
#endif
  {
   self->setLength(length);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setLength'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setOutlineOnly of class  irr::scene::IParticleCylinderEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleCylinderEmitter_setOutlineOnly00
static int tolua_NeoGame_irr_scene_IParticleCylinderEmitter_setOutlineOnly00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleCylinderEmitter",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleCylinderEmitter* self = (irr::scene::IParticleCylinderEmitter*)  tolua_tousertype(tolua_S,1,0);
  bool outlineOnly = ((bool)  tolua_toboolean(tolua_S,2,true));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setOutlineOnly'", NULL);
#endif
  {
   self->setOutlineOnly(outlineOnly);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setOutlineOnly'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCenter of class  irr::scene::IParticleCylinderEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleCylinderEmitter_getCenter00
static int tolua_NeoGame_irr_scene_IParticleCylinderEmitter_getCenter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleCylinderEmitter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleCylinderEmitter* self = (const irr::scene::IParticleCylinderEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCenter'", NULL);
#endif
  {
   const irr::core::vector3d<float>& tolua_ret = (const irr::core::vector3d<float>&)  self->getCenter();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const irr::core::vector3d<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCenter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getNormal of class  irr::scene::IParticleCylinderEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleCylinderEmitter_getNormal00
static int tolua_NeoGame_irr_scene_IParticleCylinderEmitter_getNormal00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleCylinderEmitter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleCylinderEmitter* self = (const irr::scene::IParticleCylinderEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getNormal'", NULL);
#endif
  {
   const irr::core::vector3d<float>& tolua_ret = (const irr::core::vector3d<float>&)  self->getNormal();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const irr::core::vector3d<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getNormal'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getRadius of class  irr::scene::IParticleCylinderEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleCylinderEmitter_getRadius00
static int tolua_NeoGame_irr_scene_IParticleCylinderEmitter_getRadius00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleCylinderEmitter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleCylinderEmitter* self = (const irr::scene::IParticleCylinderEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getRadius'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getRadius();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRadius'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getLength of class  irr::scene::IParticleCylinderEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleCylinderEmitter_getLength00
static int tolua_NeoGame_irr_scene_IParticleCylinderEmitter_getLength00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleCylinderEmitter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleCylinderEmitter* self = (const irr::scene::IParticleCylinderEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getLength'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getLength();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLength'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getOutlineOnly of class  irr::scene::IParticleCylinderEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleCylinderEmitter_getOutlineOnly00
static int tolua_NeoGame_irr_scene_IParticleCylinderEmitter_getOutlineOnly00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleCylinderEmitter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleCylinderEmitter* self = (const irr::scene::IParticleCylinderEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getOutlineOnly'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->getOutlineOnly();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getOutlineOnly'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getType of class  irr::scene::IParticleCylinderEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleCylinderEmitter_getType00
static int tolua_NeoGame_irr_scene_IParticleCylinderEmitter_getType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleCylinderEmitter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleCylinderEmitter* self = (const irr::scene::IParticleCylinderEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getType'", NULL);
#endif
  {
   irr::scene::E_PARTICLE_EMITTER_TYPE tolua_ret = (irr::scene::E_PARTICLE_EMITTER_TYPE)  self->getType();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setDirection of class  irr::scene::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleEmitter_setDirection00
static int tolua_NeoGame_irr_scene_IParticleEmitter_setDirection00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleEmitter",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleEmitter* self = (irr::scene::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* newDirection = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setDirection'", NULL);
#endif
  {
   self->setDirection(*newDirection);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setDirection'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMinParticlesPerSecond of class  irr::scene::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleEmitter_setMinParticlesPerSecond00
static int tolua_NeoGame_irr_scene_IParticleEmitter_setMinParticlesPerSecond00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleEmitter",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleEmitter* self = (irr::scene::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
  unsigned minPPS = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMinParticlesPerSecond'", NULL);
#endif
  {
   self->setMinParticlesPerSecond(minPPS);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMinParticlesPerSecond'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMaxParticlesPerSecond of class  irr::scene::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleEmitter_setMaxParticlesPerSecond00
static int tolua_NeoGame_irr_scene_IParticleEmitter_setMaxParticlesPerSecond00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleEmitter",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleEmitter* self = (irr::scene::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
  unsigned maxPPS = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMaxParticlesPerSecond'", NULL);
#endif
  {
   self->setMaxParticlesPerSecond(maxPPS);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMaxParticlesPerSecond'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMinStartColor of class  irr::scene::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleEmitter_setMinStartColor00
static int tolua_NeoGame_irr_scene_IParticleEmitter_setMinStartColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleEmitter",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleEmitter* self = (irr::scene::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
  const irr::video::SColor* color = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMinStartColor'", NULL);
#endif
  {
   self->setMinStartColor(*color);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMinStartColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMaxStartColor of class  irr::scene::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleEmitter_setMaxStartColor00
static int tolua_NeoGame_irr_scene_IParticleEmitter_setMaxStartColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleEmitter",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleEmitter* self = (irr::scene::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
  const irr::video::SColor* color = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMaxStartColor'", NULL);
#endif
  {
   self->setMaxStartColor(*color);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMaxStartColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMaxStartSize of class  irr::scene::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleEmitter_setMaxStartSize00
static int tolua_NeoGame_irr_scene_IParticleEmitter_setMaxStartSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleEmitter",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::dimension2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleEmitter* self = (irr::scene::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::dimension2d<float>* size = ((const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMaxStartSize'", NULL);
#endif
  {
   self->setMaxStartSize(*size);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMaxStartSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMinStartSize of class  irr::scene::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleEmitter_setMinStartSize00
static int tolua_NeoGame_irr_scene_IParticleEmitter_setMinStartSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleEmitter",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::dimension2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleEmitter* self = (irr::scene::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::dimension2d<float>* size = ((const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMinStartSize'", NULL);
#endif
  {
   self->setMinStartSize(*size);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMinStartSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMinLifeTime of class  irr::scene::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleEmitter_setMinLifeTime00
static int tolua_NeoGame_irr_scene_IParticleEmitter_setMinLifeTime00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleEmitter",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleEmitter* self = (irr::scene::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
  unsigned lifeTimeMin = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMinLifeTime'", NULL);
#endif
  {
   self->setMinLifeTime(lifeTimeMin);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMinLifeTime'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMaxLifeTime of class  irr::scene::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleEmitter_setMaxLifeTime00
static int tolua_NeoGame_irr_scene_IParticleEmitter_setMaxLifeTime00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleEmitter",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleEmitter* self = (irr::scene::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
  unsigned lifeTimeMax = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMaxLifeTime'", NULL);
#endif
  {
   self->setMaxLifeTime(lifeTimeMax);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMaxLifeTime'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMaxAngleDegrees of class  irr::scene::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleEmitter_setMaxAngleDegrees00
static int tolua_NeoGame_irr_scene_IParticleEmitter_setMaxAngleDegrees00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleEmitter",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleEmitter* self = (irr::scene::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
  int maxAngleDegrees = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMaxAngleDegrees'", NULL);
#endif
  {
   self->setMaxAngleDegrees(maxAngleDegrees);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMaxAngleDegrees'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDirection of class  irr::scene::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleEmitter_getDirection00
static int tolua_NeoGame_irr_scene_IParticleEmitter_getDirection00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleEmitter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleEmitter* self = (const irr::scene::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDirection'", NULL);
#endif
  {
   const irr::core::vector3d<float>& tolua_ret = (const irr::core::vector3d<float>&)  self->getDirection();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const irr::core::vector3d<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDirection'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMinParticlesPerSecond of class  irr::scene::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleEmitter_getMinParticlesPerSecond00
static int tolua_NeoGame_irr_scene_IParticleEmitter_getMinParticlesPerSecond00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleEmitter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleEmitter* self = (const irr::scene::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMinParticlesPerSecond'", NULL);
#endif
  {
   unsigned tolua_ret = (unsigned)  self->getMinParticlesPerSecond();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMinParticlesPerSecond'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMaxParticlesPerSecond of class  irr::scene::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleEmitter_getMaxParticlesPerSecond00
static int tolua_NeoGame_irr_scene_IParticleEmitter_getMaxParticlesPerSecond00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleEmitter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleEmitter* self = (const irr::scene::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMaxParticlesPerSecond'", NULL);
#endif
  {
   unsigned tolua_ret = (unsigned)  self->getMaxParticlesPerSecond();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMaxParticlesPerSecond'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMinStartColor of class  irr::scene::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleEmitter_getMinStartColor00
static int tolua_NeoGame_irr_scene_IParticleEmitter_getMinStartColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleEmitter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleEmitter* self = (const irr::scene::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMinStartColor'", NULL);
#endif
  {
   const irr::video::SColor& tolua_ret = (const irr::video::SColor&)  self->getMinStartColor();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const irr::video::SColor");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMinStartColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMaxStartColor of class  irr::scene::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleEmitter_getMaxStartColor00
static int tolua_NeoGame_irr_scene_IParticleEmitter_getMaxStartColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleEmitter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleEmitter* self = (const irr::scene::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMaxStartColor'", NULL);
#endif
  {
   const irr::video::SColor& tolua_ret = (const irr::video::SColor&)  self->getMaxStartColor();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const irr::video::SColor");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMaxStartColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMaxStartSize of class  irr::scene::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleEmitter_getMaxStartSize00
static int tolua_NeoGame_irr_scene_IParticleEmitter_getMaxStartSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleEmitter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleEmitter* self = (const irr::scene::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMaxStartSize'", NULL);
#endif
  {
   const irr::core::dimension2d<float>& tolua_ret = (const irr::core::dimension2d<float>&)  self->getMaxStartSize();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const irr::core::dimension2d<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMaxStartSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMinStartSize of class  irr::scene::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleEmitter_getMinStartSize00
static int tolua_NeoGame_irr_scene_IParticleEmitter_getMinStartSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleEmitter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleEmitter* self = (const irr::scene::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMinStartSize'", NULL);
#endif
  {
   const irr::core::dimension2d<float>& tolua_ret = (const irr::core::dimension2d<float>&)  self->getMinStartSize();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const irr::core::dimension2d<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMinStartSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMinLifeTime of class  irr::scene::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleEmitter_getMinLifeTime00
static int tolua_NeoGame_irr_scene_IParticleEmitter_getMinLifeTime00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleEmitter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleEmitter* self = (const irr::scene::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMinLifeTime'", NULL);
#endif
  {
   unsigned tolua_ret = (unsigned)  self->getMinLifeTime();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMinLifeTime'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMaxLifeTime of class  irr::scene::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleEmitter_getMaxLifeTime00
static int tolua_NeoGame_irr_scene_IParticleEmitter_getMaxLifeTime00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleEmitter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleEmitter* self = (const irr::scene::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMaxLifeTime'", NULL);
#endif
  {
   unsigned tolua_ret = (unsigned)  self->getMaxLifeTime();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMaxLifeTime'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMaxAngleDegrees of class  irr::scene::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleEmitter_getMaxAngleDegrees00
static int tolua_NeoGame_irr_scene_IParticleEmitter_getMaxAngleDegrees00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleEmitter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleEmitter* self = (const irr::scene::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMaxAngleDegrees'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getMaxAngleDegrees();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMaxAngleDegrees'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getType of class  irr::scene::IParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleEmitter_getType00
static int tolua_NeoGame_irr_scene_IParticleEmitter_getType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleEmitter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleEmitter* self = (const irr::scene::IParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getType'", NULL);
#endif
  {
   irr::scene::E_PARTICLE_EMITTER_TYPE tolua_ret = (irr::scene::E_PARTICLE_EMITTER_TYPE)  self->getType();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTargetColor of class  irr::scene::IParticleFadeOutAffector */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleFadeOutAffector_setTargetColor00
static int tolua_NeoGame_irr_scene_IParticleFadeOutAffector_setTargetColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleFadeOutAffector",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleFadeOutAffector* self = (irr::scene::IParticleFadeOutAffector*)  tolua_tousertype(tolua_S,1,0);
  const irr::video::SColor* targetColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTargetColor'", NULL);
#endif
  {
   self->setTargetColor(*targetColor);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTargetColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setFadeOutTime of class  irr::scene::IParticleFadeOutAffector */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleFadeOutAffector_setFadeOutTime00
static int tolua_NeoGame_irr_scene_IParticleFadeOutAffector_setFadeOutTime00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleFadeOutAffector",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleFadeOutAffector* self = (irr::scene::IParticleFadeOutAffector*)  tolua_tousertype(tolua_S,1,0);
  unsigned int fadeOutTime = ((unsigned int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setFadeOutTime'", NULL);
#endif
  {
   self->setFadeOutTime(fadeOutTime);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setFadeOutTime'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTargetColor of class  irr::scene::IParticleFadeOutAffector */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleFadeOutAffector_getTargetColor00
static int tolua_NeoGame_irr_scene_IParticleFadeOutAffector_getTargetColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleFadeOutAffector",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleFadeOutAffector* self = (const irr::scene::IParticleFadeOutAffector*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTargetColor'", NULL);
#endif
  {
   const irr::video::SColor& tolua_ret = (const irr::video::SColor&)  self->getTargetColor();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const irr::video::SColor");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTargetColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFadeOutTime of class  irr::scene::IParticleFadeOutAffector */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleFadeOutAffector_getFadeOutTime00
static int tolua_NeoGame_irr_scene_IParticleFadeOutAffector_getFadeOutTime00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleFadeOutAffector",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleFadeOutAffector* self = (const irr::scene::IParticleFadeOutAffector*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFadeOutTime'", NULL);
#endif
  {
   unsigned int tolua_ret = (unsigned int)  self->getFadeOutTime();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFadeOutTime'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getType of class  irr::scene::IParticleFadeOutAffector */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleFadeOutAffector_getType00
static int tolua_NeoGame_irr_scene_IParticleFadeOutAffector_getType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleFadeOutAffector",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleFadeOutAffector* self = (const irr::scene::IParticleFadeOutAffector*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getType'", NULL);
#endif
  {
   irr::scene::E_PARTICLE_AFFECTOR_TYPE tolua_ret = (irr::scene::E_PARTICLE_AFFECTOR_TYPE)  self->getType();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTimeForceLost of class  irr::scene::IParticleGravityAffector */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleGravityAffector_setTimeForceLost00
static int tolua_NeoGame_irr_scene_IParticleGravityAffector_setTimeForceLost00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleGravityAffector",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleGravityAffector* self = (irr::scene::IParticleGravityAffector*)  tolua_tousertype(tolua_S,1,0);
  float timeForceLost = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTimeForceLost'", NULL);
#endif
  {
   self->setTimeForceLost(timeForceLost);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTimeForceLost'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setGravity of class  irr::scene::IParticleGravityAffector */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleGravityAffector_setGravity00
static int tolua_NeoGame_irr_scene_IParticleGravityAffector_setGravity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleGravityAffector",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleGravityAffector* self = (irr::scene::IParticleGravityAffector*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* gravity = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setGravity'", NULL);
#endif
  {
   self->setGravity(*gravity);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setGravity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTimeForceLost of class  irr::scene::IParticleGravityAffector */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleGravityAffector_getTimeForceLost00
static int tolua_NeoGame_irr_scene_IParticleGravityAffector_getTimeForceLost00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleGravityAffector",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleGravityAffector* self = (const irr::scene::IParticleGravityAffector*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTimeForceLost'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getTimeForceLost();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTimeForceLost'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGravity of class  irr::scene::IParticleGravityAffector */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleGravityAffector_getGravity00
static int tolua_NeoGame_irr_scene_IParticleGravityAffector_getGravity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleGravityAffector",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleGravityAffector* self = (const irr::scene::IParticleGravityAffector*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGravity'", NULL);
#endif
  {
   const irr::core::vector3d<float>& tolua_ret = (const irr::core::vector3d<float>&)  self->getGravity();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const irr::core::vector3d<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGravity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getType of class  irr::scene::IParticleGravityAffector */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleGravityAffector_getType00
static int tolua_NeoGame_irr_scene_IParticleGravityAffector_getType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleGravityAffector",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleGravityAffector* self = (const irr::scene::IParticleGravityAffector*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getType'", NULL);
#endif
  {
   irr::scene::E_PARTICLE_AFFECTOR_TYPE tolua_ret = (irr::scene::E_PARTICLE_AFFECTOR_TYPE)  self->getType();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMesh of class  irr::scene::IParticleMeshEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleMeshEmitter_setMesh00
static int tolua_NeoGame_irr_scene_IParticleMeshEmitter_setMesh00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleMeshEmitter",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::IMesh",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleMeshEmitter* self = (irr::scene::IParticleMeshEmitter*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::IMesh* mesh = ((irr::scene::IMesh*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMesh'", NULL);
#endif
  {
   self->setMesh(mesh);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMesh'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setUseNormalDirection of class  irr::scene::IParticleMeshEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleMeshEmitter_setUseNormalDirection00
static int tolua_NeoGame_irr_scene_IParticleMeshEmitter_setUseNormalDirection00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleMeshEmitter",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleMeshEmitter* self = (irr::scene::IParticleMeshEmitter*)  tolua_tousertype(tolua_S,1,0);
  bool useNormalDirection = ((bool)  tolua_toboolean(tolua_S,2,true));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setUseNormalDirection'", NULL);
#endif
  {
   self->setUseNormalDirection(useNormalDirection);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setUseNormalDirection'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setNormalDirectionModifier of class  irr::scene::IParticleMeshEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleMeshEmitter_setNormalDirectionModifier00
static int tolua_NeoGame_irr_scene_IParticleMeshEmitter_setNormalDirectionModifier00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleMeshEmitter",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleMeshEmitter* self = (irr::scene::IParticleMeshEmitter*)  tolua_tousertype(tolua_S,1,0);
  float normalDirectionModifier = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setNormalDirectionModifier'", NULL);
#endif
  {
   self->setNormalDirectionModifier(normalDirectionModifier);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setNormalDirectionModifier'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setEveryMeshVertex of class  irr::scene::IParticleMeshEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleMeshEmitter_setEveryMeshVertex00
static int tolua_NeoGame_irr_scene_IParticleMeshEmitter_setEveryMeshVertex00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleMeshEmitter",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleMeshEmitter* self = (irr::scene::IParticleMeshEmitter*)  tolua_tousertype(tolua_S,1,0);
  bool everyMeshVertex = ((bool)  tolua_toboolean(tolua_S,2,true));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setEveryMeshVertex'", NULL);
#endif
  {
   self->setEveryMeshVertex(everyMeshVertex);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setEveryMeshVertex'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMesh of class  irr::scene::IParticleMeshEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleMeshEmitter_getMesh00
static int tolua_NeoGame_irr_scene_IParticleMeshEmitter_getMesh00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleMeshEmitter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleMeshEmitter* self = (const irr::scene::IParticleMeshEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMesh'", NULL);
#endif
  {
   const irr::scene::IMesh* tolua_ret = (const irr::scene::IMesh*)  self->getMesh();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"const irr::scene::IMesh");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMesh'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isUsingNormalDirection of class  irr::scene::IParticleMeshEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleMeshEmitter_isUsingNormalDirection00
static int tolua_NeoGame_irr_scene_IParticleMeshEmitter_isUsingNormalDirection00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleMeshEmitter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleMeshEmitter* self = (const irr::scene::IParticleMeshEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isUsingNormalDirection'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isUsingNormalDirection();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isUsingNormalDirection'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getNormalDirectionModifier of class  irr::scene::IParticleMeshEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleMeshEmitter_getNormalDirectionModifier00
static int tolua_NeoGame_irr_scene_IParticleMeshEmitter_getNormalDirectionModifier00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleMeshEmitter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleMeshEmitter* self = (const irr::scene::IParticleMeshEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getNormalDirectionModifier'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getNormalDirectionModifier();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getNormalDirectionModifier'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getEveryMeshVertex of class  irr::scene::IParticleMeshEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleMeshEmitter_getEveryMeshVertex00
static int tolua_NeoGame_irr_scene_IParticleMeshEmitter_getEveryMeshVertex00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleMeshEmitter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleMeshEmitter* self = (const irr::scene::IParticleMeshEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getEveryMeshVertex'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->getEveryMeshVertex();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getEveryMeshVertex'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getType of class  irr::scene::IParticleMeshEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleMeshEmitter_getType00
static int tolua_NeoGame_irr_scene_IParticleMeshEmitter_getType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleMeshEmitter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleMeshEmitter* self = (const irr::scene::IParticleMeshEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getType'", NULL);
#endif
  {
   irr::scene::E_PARTICLE_EMITTER_TYPE tolua_ret = (irr::scene::E_PARTICLE_EMITTER_TYPE)  self->getType();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setCenter of class  irr::scene::IParticleRingEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleRingEmitter_setCenter00
static int tolua_NeoGame_irr_scene_IParticleRingEmitter_setCenter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleRingEmitter",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleRingEmitter* self = (irr::scene::IParticleRingEmitter*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* center = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setCenter'", NULL);
#endif
  {
   self->setCenter(*center);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setCenter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setRadius of class  irr::scene::IParticleRingEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleRingEmitter_setRadius00
static int tolua_NeoGame_irr_scene_IParticleRingEmitter_setRadius00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleRingEmitter",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleRingEmitter* self = (irr::scene::IParticleRingEmitter*)  tolua_tousertype(tolua_S,1,0);
  float radius = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setRadius'", NULL);
#endif
  {
   self->setRadius(radius);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setRadius'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setRingThickness of class  irr::scene::IParticleRingEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleRingEmitter_setRingThickness00
static int tolua_NeoGame_irr_scene_IParticleRingEmitter_setRingThickness00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleRingEmitter",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleRingEmitter* self = (irr::scene::IParticleRingEmitter*)  tolua_tousertype(tolua_S,1,0);
  float ringThickness = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setRingThickness'", NULL);
#endif
  {
   self->setRingThickness(ringThickness);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setRingThickness'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCenter of class  irr::scene::IParticleRingEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleRingEmitter_getCenter00
static int tolua_NeoGame_irr_scene_IParticleRingEmitter_getCenter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleRingEmitter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleRingEmitter* self = (const irr::scene::IParticleRingEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCenter'", NULL);
#endif
  {
   const irr::core::vector3d<float>& tolua_ret = (const irr::core::vector3d<float>&)  self->getCenter();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const irr::core::vector3d<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCenter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getRadius of class  irr::scene::IParticleRingEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleRingEmitter_getRadius00
static int tolua_NeoGame_irr_scene_IParticleRingEmitter_getRadius00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleRingEmitter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleRingEmitter* self = (const irr::scene::IParticleRingEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getRadius'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getRadius();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRadius'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getRingThickness of class  irr::scene::IParticleRingEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleRingEmitter_getRingThickness00
static int tolua_NeoGame_irr_scene_IParticleRingEmitter_getRingThickness00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleRingEmitter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleRingEmitter* self = (const irr::scene::IParticleRingEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getRingThickness'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getRingThickness();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRingThickness'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getType of class  irr::scene::IParticleRingEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleRingEmitter_getType00
static int tolua_NeoGame_irr_scene_IParticleRingEmitter_getType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleRingEmitter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleRingEmitter* self = (const irr::scene::IParticleRingEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getType'", NULL);
#endif
  {
   irr::scene::E_PARTICLE_EMITTER_TYPE tolua_ret = (irr::scene::E_PARTICLE_EMITTER_TYPE)  self->getType();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setPivotPoint of class  irr::scene::IParticleRotationAffector */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleRotationAffector_setPivotPoint00
static int tolua_NeoGame_irr_scene_IParticleRotationAffector_setPivotPoint00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleRotationAffector",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleRotationAffector* self = (irr::scene::IParticleRotationAffector*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* point = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setPivotPoint'", NULL);
#endif
  {
   self->setPivotPoint(*point);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setPivotPoint'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setSpeed of class  irr::scene::IParticleRotationAffector */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleRotationAffector_setSpeed00
static int tolua_NeoGame_irr_scene_IParticleRotationAffector_setSpeed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleRotationAffector",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleRotationAffector* self = (irr::scene::IParticleRotationAffector*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* speed = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setSpeed'", NULL);
#endif
  {
   self->setSpeed(*speed);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setSpeed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getPivotPoint of class  irr::scene::IParticleRotationAffector */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleRotationAffector_getPivotPoint00
static int tolua_NeoGame_irr_scene_IParticleRotationAffector_getPivotPoint00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleRotationAffector",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleRotationAffector* self = (const irr::scene::IParticleRotationAffector*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getPivotPoint'", NULL);
#endif
  {
   const irr::core::vector3d<float>& tolua_ret = (const irr::core::vector3d<float>&)  self->getPivotPoint();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const irr::core::vector3d<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getPivotPoint'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSpeed of class  irr::scene::IParticleRotationAffector */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleRotationAffector_getSpeed00
static int tolua_NeoGame_irr_scene_IParticleRotationAffector_getSpeed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleRotationAffector",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleRotationAffector* self = (const irr::scene::IParticleRotationAffector*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSpeed'", NULL);
#endif
  {
   const irr::core::vector3d<float>& tolua_ret = (const irr::core::vector3d<float>&)  self->getSpeed();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const irr::core::vector3d<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSpeed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getType of class  irr::scene::IParticleRotationAffector */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleRotationAffector_getType00
static int tolua_NeoGame_irr_scene_IParticleRotationAffector_getType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleRotationAffector",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleRotationAffector* self = (const irr::scene::IParticleRotationAffector*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getType'", NULL);
#endif
  {
   irr::scene::E_PARTICLE_AFFECTOR_TYPE tolua_ret = (irr::scene::E_PARTICLE_AFFECTOR_TYPE)  self->getType();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setCenter of class  irr::scene::IParticleSphereEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSphereEmitter_setCenter00
static int tolua_NeoGame_irr_scene_IParticleSphereEmitter_setCenter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSphereEmitter",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleSphereEmitter* self = (irr::scene::IParticleSphereEmitter*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* center = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setCenter'", NULL);
#endif
  {
   self->setCenter(*center);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setCenter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setRadius of class  irr::scene::IParticleSphereEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSphereEmitter_setRadius00
static int tolua_NeoGame_irr_scene_IParticleSphereEmitter_setRadius00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSphereEmitter",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleSphereEmitter* self = (irr::scene::IParticleSphereEmitter*)  tolua_tousertype(tolua_S,1,0);
  float radius = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setRadius'", NULL);
#endif
  {
   self->setRadius(radius);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setRadius'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCenter of class  irr::scene::IParticleSphereEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSphereEmitter_getCenter00
static int tolua_NeoGame_irr_scene_IParticleSphereEmitter_getCenter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleSphereEmitter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleSphereEmitter* self = (const irr::scene::IParticleSphereEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCenter'", NULL);
#endif
  {
   const irr::core::vector3d<float>& tolua_ret = (const irr::core::vector3d<float>&)  self->getCenter();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const irr::core::vector3d<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCenter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getRadius of class  irr::scene::IParticleSphereEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSphereEmitter_getRadius00
static int tolua_NeoGame_irr_scene_IParticleSphereEmitter_getRadius00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleSphereEmitter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleSphereEmitter* self = (const irr::scene::IParticleSphereEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getRadius'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getRadius();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRadius'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getType of class  irr::scene::IParticleSphereEmitter */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSphereEmitter_getType00
static int tolua_NeoGame_irr_scene_IParticleSphereEmitter_getType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::IParticleSphereEmitter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::IParticleSphereEmitter* self = (const irr::scene::IParticleSphereEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getType'", NULL);
#endif
  {
   irr::scene::E_PARTICLE_EMITTER_TYPE tolua_ret = (irr::scene::E_PARTICLE_EMITTER_TYPE)  self->getType();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setParticleSize of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_setParticleSize00
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_setParticleSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setParticleSize'", NULL);
#endif
  {
   self->setParticleSize();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setParticleSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setParticleSize of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_setParticleSize01
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_setParticleSize01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::dimension2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::dimension2d<float>* size = ((const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setParticleSize'", NULL);
#endif
  {
   self->setParticleSize(*size);
  }
 }
 return 0;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_setParticleSize00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: setParticlesAreGlobal of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_setParticlesAreGlobal00
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_setParticlesAreGlobal00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  bool global = ((bool)  tolua_toboolean(tolua_S,2,true));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setParticlesAreGlobal'", NULL);
#endif
  {
   self->setParticlesAreGlobal(global);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setParticlesAreGlobal'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: clearParticles of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_clearParticles00
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_clearParticles00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'clearParticles'", NULL);
#endif
  {
   self->clearParticles();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'clearParticles'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_getEmitter00
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_getEmitter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getEmitter'", NULL);
#endif
  {
   irr::scene::IParticleEmitter* tolua_ret = (irr::scene::IParticleEmitter*)  self->getEmitter();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleEmitter");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getEmitter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_setEmitter00
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_setEmitter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::IParticleEmitter",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::IParticleEmitter* emitter = ((irr::scene::IParticleEmitter*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setEmitter'", NULL);
#endif
  {
   self->setEmitter(emitter);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setEmitter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addAffector of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_addAffector00
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_addAffector00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::IParticleAffector",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::IParticleAffector* affector = ((irr::scene::IParticleAffector*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addAffector'", NULL);
#endif
  {
   self->addAffector(affector);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addAffector'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeAllAffectors of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_removeAllAffectors00
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_removeAllAffectors00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeAllAffectors'", NULL);
#endif
  {
   self->removeAllAffectors();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removeAllAffectors'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: createAnimatedMeshSceneNodeEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter00
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::IAnimatedMeshSceneNode",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,3,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::IAnimatedMeshSceneNode* node = ((irr::scene::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,2,0));
  bool useNormalDirection = ((bool)  tolua_toboolean(tolua_S,3,true));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createAnimatedMeshSceneNodeEmitter'", NULL);
#endif
  {
   irr::scene::IParticleAnimatedMeshSceneNodeEmitter* tolua_ret = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter*)  self->createAnimatedMeshSceneNodeEmitter(node,useNormalDirection);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleAnimatedMeshSceneNodeEmitter");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'createAnimatedMeshSceneNodeEmitter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: createAnimatedMeshSceneNodeEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter01
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::IAnimatedMeshSceneNode",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,5,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,6,1,&tolua_err) ||
     !tolua_isboolean(tolua_S,7,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,8,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,9,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,10,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::IAnimatedMeshSceneNode* node = ((irr::scene::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,2,0));
  bool useNormalDirection = ((bool)  tolua_toboolean(tolua_S,3,0));
  const irr::core::vector3d<float>* direction = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,4,0));
  float normalDirectionModifier = ((float)  tolua_tonumber(tolua_S,5,100.0f));
  int mbNumber = ((int)  tolua_tonumber(tolua_S,6,-1));
  bool everyMeshVertex = ((bool)  tolua_toboolean(tolua_S,7,false));
  unsigned minParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,8,5));
  unsigned maxParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,9,10));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createAnimatedMeshSceneNodeEmitter'", NULL);
#endif
  {
   irr::scene::IParticleAnimatedMeshSceneNodeEmitter* tolua_ret = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter*)  self->createAnimatedMeshSceneNodeEmitter(node,useNormalDirection,*direction,normalDirectionModifier,mbNumber,everyMeshVertex,minParticlesPerSecond,maxParticlesPerSecond);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleAnimatedMeshSceneNodeEmitter");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createAnimatedMeshSceneNodeEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter02
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::IAnimatedMeshSceneNode",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
     !tolua_isboolean(tolua_S,7,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,8,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,9,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,10,&tolua_err) || !tolua_isusertype(tolua_S,10,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,11,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::IAnimatedMeshSceneNode* node = ((irr::scene::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,2,0));
  bool useNormalDirection = ((bool)  tolua_toboolean(tolua_S,3,0));
  const irr::core::vector3d<float>* direction = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,4,0));
  float normalDirectionModifier = ((float)  tolua_tonumber(tolua_S,5,0));
  int mbNumber = ((int)  tolua_tonumber(tolua_S,6,0));
  bool everyMeshVertex = ((bool)  tolua_toboolean(tolua_S,7,0));
  unsigned minParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,8,0));
  unsigned maxParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,9,0));
  const irr::video::SColor* minStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,10,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createAnimatedMeshSceneNodeEmitter'", NULL);
#endif
  {
   irr::scene::IParticleAnimatedMeshSceneNodeEmitter* tolua_ret = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter*)  self->createAnimatedMeshSceneNodeEmitter(node,useNormalDirection,*direction,normalDirectionModifier,mbNumber,everyMeshVertex,minParticlesPerSecond,maxParticlesPerSecond,*minStartColor);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleAnimatedMeshSceneNodeEmitter");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createAnimatedMeshSceneNodeEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter03
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::IAnimatedMeshSceneNode",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
     !tolua_isboolean(tolua_S,7,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,8,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,9,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,10,&tolua_err) || !tolua_isusertype(tolua_S,10,"const irr::video::SColor",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,11,&tolua_err) || !tolua_isusertype(tolua_S,11,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,12,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,13,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,14,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,15,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::IAnimatedMeshSceneNode* node = ((irr::scene::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,2,0));
  bool useNormalDirection = ((bool)  tolua_toboolean(tolua_S,3,0));
  const irr::core::vector3d<float>* direction = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,4,0));
  float normalDirectionModifier = ((float)  tolua_tonumber(tolua_S,5,0));
  int mbNumber = ((int)  tolua_tonumber(tolua_S,6,0));
  bool everyMeshVertex = ((bool)  tolua_toboolean(tolua_S,7,0));
  unsigned minParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,8,0));
  unsigned maxParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,9,0));
  const irr::video::SColor* minStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,10,0));
  const irr::video::SColor* maxStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,11,0));
  unsigned lifeTimeMin = ((unsigned)  tolua_tonumber(tolua_S,12,2000));
  unsigned lifeTimeMax = ((unsigned)  tolua_tonumber(tolua_S,13,4000));
  int maxAngleDegrees = ((int)  tolua_tonumber(tolua_S,14,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createAnimatedMeshSceneNodeEmitter'", NULL);
#endif
  {
   irr::scene::IParticleAnimatedMeshSceneNodeEmitter* tolua_ret = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter*)  self->createAnimatedMeshSceneNodeEmitter(node,useNormalDirection,*direction,normalDirectionModifier,mbNumber,everyMeshVertex,minParticlesPerSecond,maxParticlesPerSecond,*minStartColor,*maxStartColor,lifeTimeMin,lifeTimeMax,maxAngleDegrees);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleAnimatedMeshSceneNodeEmitter");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createAnimatedMeshSceneNodeEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter04
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter04(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::IAnimatedMeshSceneNode",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
     !tolua_isboolean(tolua_S,7,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,8,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,9,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,10,&tolua_err) || !tolua_isusertype(tolua_S,10,"const irr::video::SColor",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,11,&tolua_err) || !tolua_isusertype(tolua_S,11,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,12,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,13,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,14,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,15,&tolua_err) || !tolua_isusertype(tolua_S,15,"const irr::core::dimension2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,16,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::IAnimatedMeshSceneNode* node = ((irr::scene::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,2,0));
  bool useNormalDirection = ((bool)  tolua_toboolean(tolua_S,3,0));
  const irr::core::vector3d<float>* direction = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,4,0));
  float normalDirectionModifier = ((float)  tolua_tonumber(tolua_S,5,0));
  int mbNumber = ((int)  tolua_tonumber(tolua_S,6,0));
  bool everyMeshVertex = ((bool)  tolua_toboolean(tolua_S,7,0));
  unsigned minParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,8,0));
  unsigned maxParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,9,0));
  const irr::video::SColor* minStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,10,0));
  const irr::video::SColor* maxStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,11,0));
  unsigned lifeTimeMin = ((unsigned)  tolua_tonumber(tolua_S,12,0));
  unsigned lifeTimeMax = ((unsigned)  tolua_tonumber(tolua_S,13,0));
  int maxAngleDegrees = ((int)  tolua_tonumber(tolua_S,14,0));
  const irr::core::dimension2d<float>* minStartSize = ((const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,15,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createAnimatedMeshSceneNodeEmitter'", NULL);
#endif
  {
   irr::scene::IParticleAnimatedMeshSceneNodeEmitter* tolua_ret = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter*)  self->createAnimatedMeshSceneNodeEmitter(node,useNormalDirection,*direction,normalDirectionModifier,mbNumber,everyMeshVertex,minParticlesPerSecond,maxParticlesPerSecond,*minStartColor,*maxStartColor,lifeTimeMin,lifeTimeMax,maxAngleDegrees,*minStartSize);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleAnimatedMeshSceneNodeEmitter");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter03(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createAnimatedMeshSceneNodeEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter05
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter05(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::IAnimatedMeshSceneNode",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
     !tolua_isboolean(tolua_S,7,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,8,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,9,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,10,&tolua_err) || !tolua_isusertype(tolua_S,10,"const irr::video::SColor",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,11,&tolua_err) || !tolua_isusertype(tolua_S,11,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,12,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,13,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,14,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,15,&tolua_err) || !tolua_isusertype(tolua_S,15,"const irr::core::dimension2d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,16,&tolua_err) || !tolua_isusertype(tolua_S,16,"const irr::core::dimension2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,17,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::IAnimatedMeshSceneNode* node = ((irr::scene::IAnimatedMeshSceneNode*)  tolua_tousertype(tolua_S,2,0));
  bool useNormalDirection = ((bool)  tolua_toboolean(tolua_S,3,0));
  const irr::core::vector3d<float>* direction = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,4,0));
  float normalDirectionModifier = ((float)  tolua_tonumber(tolua_S,5,0));
  int mbNumber = ((int)  tolua_tonumber(tolua_S,6,0));
  bool everyMeshVertex = ((bool)  tolua_toboolean(tolua_S,7,0));
  unsigned minParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,8,0));
  unsigned maxParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,9,0));
  const irr::video::SColor* minStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,10,0));
  const irr::video::SColor* maxStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,11,0));
  unsigned lifeTimeMin = ((unsigned)  tolua_tonumber(tolua_S,12,0));
  unsigned lifeTimeMax = ((unsigned)  tolua_tonumber(tolua_S,13,0));
  int maxAngleDegrees = ((int)  tolua_tonumber(tolua_S,14,0));
  const irr::core::dimension2d<float>* minStartSize = ((const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,15,0));
  const irr::core::dimension2d<float>* maxStartSize = ((const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,16,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createAnimatedMeshSceneNodeEmitter'", NULL);
#endif
  {
   irr::scene::IParticleAnimatedMeshSceneNodeEmitter* tolua_ret = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter*)  self->createAnimatedMeshSceneNodeEmitter(node,useNormalDirection,*direction,normalDirectionModifier,mbNumber,everyMeshVertex,minParticlesPerSecond,maxParticlesPerSecond,*minStartColor,*maxStartColor,lifeTimeMin,lifeTimeMax,maxAngleDegrees,*minStartSize,*maxStartSize);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleAnimatedMeshSceneNodeEmitter");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter04(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createBoxEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createBoxEmitter00
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createBoxEmitter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createBoxEmitter'", NULL);
#endif
  {
   irr::scene::IParticleBoxEmitter* tolua_ret = (irr::scene::IParticleBoxEmitter*)  self->createBoxEmitter();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleBoxEmitter");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'createBoxEmitter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: createBoxEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createBoxEmitter01
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createBoxEmitter01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::aabbox3df",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::aabbox3df* box = ((const irr::core::aabbox3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createBoxEmitter'", NULL);
#endif
  {
   irr::scene::IParticleBoxEmitter* tolua_ret = (irr::scene::IParticleBoxEmitter*)  self->createBoxEmitter(*box);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleBoxEmitter");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createBoxEmitter00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createBoxEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createBoxEmitter02
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createBoxEmitter02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::aabbox3df",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::aabbox3df* box = ((const irr::core::aabbox3df*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::vector3d<float>* direction = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,3,0));
  unsigned minParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,4,5));
  unsigned maxParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,5,10));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createBoxEmitter'", NULL);
#endif
  {
   irr::scene::IParticleBoxEmitter* tolua_ret = (irr::scene::IParticleBoxEmitter*)  self->createBoxEmitter(*box,*direction,minParticlesPerSecond,maxParticlesPerSecond);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleBoxEmitter");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createBoxEmitter01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createBoxEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createBoxEmitter03
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createBoxEmitter03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::aabbox3df",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,6,&tolua_err) || !tolua_isusertype(tolua_S,6,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::aabbox3df* box = ((const irr::core::aabbox3df*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::vector3d<float>* direction = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,3,0));
  unsigned minParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,4,0));
  unsigned maxParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,5,0));
  const irr::video::SColor* minStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,6,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createBoxEmitter'", NULL);
#endif
  {
   irr::scene::IParticleBoxEmitter* tolua_ret = (irr::scene::IParticleBoxEmitter*)  self->createBoxEmitter(*box,*direction,minParticlesPerSecond,maxParticlesPerSecond,*minStartColor);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleBoxEmitter");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createBoxEmitter02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createBoxEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createBoxEmitter04
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createBoxEmitter04(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::aabbox3df",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,6,&tolua_err) || !tolua_isusertype(tolua_S,6,"const irr::video::SColor",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,7,&tolua_err) || !tolua_isusertype(tolua_S,7,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,8,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,9,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,10,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,11,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::aabbox3df* box = ((const irr::core::aabbox3df*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::vector3d<float>* direction = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,3,0));
  unsigned minParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,4,0));
  unsigned maxParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,5,0));
  const irr::video::SColor* minStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,6,0));
  const irr::video::SColor* maxStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,7,0));
  unsigned lifeTimeMin = ((unsigned)  tolua_tonumber(tolua_S,8,2000));
  unsigned lifeTimeMax = ((unsigned)  tolua_tonumber(tolua_S,9,4000));
  int maxAngleDegrees = ((int)  tolua_tonumber(tolua_S,10,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createBoxEmitter'", NULL);
#endif
  {
   irr::scene::IParticleBoxEmitter* tolua_ret = (irr::scene::IParticleBoxEmitter*)  self->createBoxEmitter(*box,*direction,minParticlesPerSecond,maxParticlesPerSecond,*minStartColor,*maxStartColor,lifeTimeMin,lifeTimeMax,maxAngleDegrees);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleBoxEmitter");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createBoxEmitter03(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createBoxEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createBoxEmitter05
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createBoxEmitter05(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::aabbox3df",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,6,&tolua_err) || !tolua_isusertype(tolua_S,6,"const irr::video::SColor",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,7,&tolua_err) || !tolua_isusertype(tolua_S,7,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,8,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,9,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,10,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,11,&tolua_err) || !tolua_isusertype(tolua_S,11,"const irr::core::dimension2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,12,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::aabbox3df* box = ((const irr::core::aabbox3df*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::vector3d<float>* direction = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,3,0));
  unsigned minParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,4,0));
  unsigned maxParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,5,0));
  const irr::video::SColor* minStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,6,0));
  const irr::video::SColor* maxStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,7,0));
  unsigned lifeTimeMin = ((unsigned)  tolua_tonumber(tolua_S,8,0));
  unsigned lifeTimeMax = ((unsigned)  tolua_tonumber(tolua_S,9,0));
  int maxAngleDegrees = ((int)  tolua_tonumber(tolua_S,10,0));
  const irr::core::dimension2d<float>* minStartSize = ((const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,11,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createBoxEmitter'", NULL);
#endif
  {
   irr::scene::IParticleBoxEmitter* tolua_ret = (irr::scene::IParticleBoxEmitter*)  self->createBoxEmitter(*box,*direction,minParticlesPerSecond,maxParticlesPerSecond,*minStartColor,*maxStartColor,lifeTimeMin,lifeTimeMax,maxAngleDegrees,*minStartSize);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleBoxEmitter");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createBoxEmitter04(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createBoxEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createBoxEmitter06
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createBoxEmitter06(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::aabbox3df",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,6,&tolua_err) || !tolua_isusertype(tolua_S,6,"const irr::video::SColor",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,7,&tolua_err) || !tolua_isusertype(tolua_S,7,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,8,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,9,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,10,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,11,&tolua_err) || !tolua_isusertype(tolua_S,11,"const irr::core::dimension2d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,12,&tolua_err) || !tolua_isusertype(tolua_S,12,"const irr::core::dimension2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,13,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::aabbox3df* box = ((const irr::core::aabbox3df*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::vector3d<float>* direction = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,3,0));
  unsigned minParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,4,0));
  unsigned maxParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,5,0));
  const irr::video::SColor* minStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,6,0));
  const irr::video::SColor* maxStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,7,0));
  unsigned lifeTimeMin = ((unsigned)  tolua_tonumber(tolua_S,8,0));
  unsigned lifeTimeMax = ((unsigned)  tolua_tonumber(tolua_S,9,0));
  int maxAngleDegrees = ((int)  tolua_tonumber(tolua_S,10,0));
  const irr::core::dimension2d<float>* minStartSize = ((const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,11,0));
  const irr::core::dimension2d<float>* maxStartSize = ((const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,12,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createBoxEmitter'", NULL);
#endif
  {
   irr::scene::IParticleBoxEmitter* tolua_ret = (irr::scene::IParticleBoxEmitter*)  self->createBoxEmitter(*box,*direction,minParticlesPerSecond,maxParticlesPerSecond,*minStartColor,*maxStartColor,lifeTimeMin,lifeTimeMax,maxAngleDegrees,*minStartSize,*maxStartSize);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleBoxEmitter");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createBoxEmitter05(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createCylinderEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createCylinderEmitter00
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createCylinderEmitter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isboolean(tolua_S,6,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* center = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  float radius = ((float)  tolua_tonumber(tolua_S,3,0));
  const irr::core::vector3d<float>* normal = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,4,0));
  float length = ((float)  tolua_tonumber(tolua_S,5,0));
  bool outlineOnly = ((bool)  tolua_toboolean(tolua_S,6,false));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createCylinderEmitter'", NULL);
#endif
  {
   irr::scene::IParticleCylinderEmitter* tolua_ret = (irr::scene::IParticleCylinderEmitter*)  self->createCylinderEmitter(*center,radius,*normal,length,outlineOnly);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleCylinderEmitter");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'createCylinderEmitter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: createCylinderEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createCylinderEmitter01
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createCylinderEmitter01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isboolean(tolua_S,6,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,7,&tolua_err) || !tolua_isusertype(tolua_S,7,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,8,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,9,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,10,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* center = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  float radius = ((float)  tolua_tonumber(tolua_S,3,0));
  const irr::core::vector3d<float>* normal = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,4,0));
  float length = ((float)  tolua_tonumber(tolua_S,5,0));
  bool outlineOnly = ((bool)  tolua_toboolean(tolua_S,6,0));
  const irr::core::vector3d<float>* direction = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,7,0));
  unsigned minParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,8,5));
  unsigned maxParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,9,10));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createCylinderEmitter'", NULL);
#endif
  {
   irr::scene::IParticleCylinderEmitter* tolua_ret = (irr::scene::IParticleCylinderEmitter*)  self->createCylinderEmitter(*center,radius,*normal,length,outlineOnly,*direction,minParticlesPerSecond,maxParticlesPerSecond);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleCylinderEmitter");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createCylinderEmitter00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createCylinderEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createCylinderEmitter02
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createCylinderEmitter02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isboolean(tolua_S,6,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,7,&tolua_err) || !tolua_isusertype(tolua_S,7,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,8,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,9,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,10,&tolua_err) || !tolua_isusertype(tolua_S,10,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,11,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* center = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  float radius = ((float)  tolua_tonumber(tolua_S,3,0));
  const irr::core::vector3d<float>* normal = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,4,0));
  float length = ((float)  tolua_tonumber(tolua_S,5,0));
  bool outlineOnly = ((bool)  tolua_toboolean(tolua_S,6,0));
  const irr::core::vector3d<float>* direction = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,7,0));
  unsigned minParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,8,0));
  unsigned maxParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,9,0));
  const irr::video::SColor* minStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,10,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createCylinderEmitter'", NULL);
#endif
  {
   irr::scene::IParticleCylinderEmitter* tolua_ret = (irr::scene::IParticleCylinderEmitter*)  self->createCylinderEmitter(*center,radius,*normal,length,outlineOnly,*direction,minParticlesPerSecond,maxParticlesPerSecond,*minStartColor);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleCylinderEmitter");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createCylinderEmitter01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createCylinderEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createCylinderEmitter03
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createCylinderEmitter03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isboolean(tolua_S,6,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,7,&tolua_err) || !tolua_isusertype(tolua_S,7,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,8,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,9,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,10,&tolua_err) || !tolua_isusertype(tolua_S,10,"const irr::video::SColor",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,11,&tolua_err) || !tolua_isusertype(tolua_S,11,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,12,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,13,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,14,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,15,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* center = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  float radius = ((float)  tolua_tonumber(tolua_S,3,0));
  const irr::core::vector3d<float>* normal = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,4,0));
  float length = ((float)  tolua_tonumber(tolua_S,5,0));
  bool outlineOnly = ((bool)  tolua_toboolean(tolua_S,6,0));
  const irr::core::vector3d<float>* direction = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,7,0));
  unsigned minParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,8,0));
  unsigned maxParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,9,0));
  const irr::video::SColor* minStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,10,0));
  const irr::video::SColor* maxStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,11,0));
  unsigned lifeTimeMin = ((unsigned)  tolua_tonumber(tolua_S,12,2000));
  unsigned lifeTimeMax = ((unsigned)  tolua_tonumber(tolua_S,13,4000));
  int maxAngleDegrees = ((int)  tolua_tonumber(tolua_S,14,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createCylinderEmitter'", NULL);
#endif
  {
   irr::scene::IParticleCylinderEmitter* tolua_ret = (irr::scene::IParticleCylinderEmitter*)  self->createCylinderEmitter(*center,radius,*normal,length,outlineOnly,*direction,minParticlesPerSecond,maxParticlesPerSecond,*minStartColor,*maxStartColor,lifeTimeMin,lifeTimeMax,maxAngleDegrees);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleCylinderEmitter");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createCylinderEmitter02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createCylinderEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createCylinderEmitter04
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createCylinderEmitter04(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isboolean(tolua_S,6,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,7,&tolua_err) || !tolua_isusertype(tolua_S,7,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,8,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,9,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,10,&tolua_err) || !tolua_isusertype(tolua_S,10,"const irr::video::SColor",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,11,&tolua_err) || !tolua_isusertype(tolua_S,11,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,12,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,13,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,14,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,15,&tolua_err) || !tolua_isusertype(tolua_S,15,"const irr::core::dimension2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,16,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* center = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  float radius = ((float)  tolua_tonumber(tolua_S,3,0));
  const irr::core::vector3d<float>* normal = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,4,0));
  float length = ((float)  tolua_tonumber(tolua_S,5,0));
  bool outlineOnly = ((bool)  tolua_toboolean(tolua_S,6,0));
  const irr::core::vector3d<float>* direction = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,7,0));
  unsigned minParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,8,0));
  unsigned maxParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,9,0));
  const irr::video::SColor* minStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,10,0));
  const irr::video::SColor* maxStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,11,0));
  unsigned lifeTimeMin = ((unsigned)  tolua_tonumber(tolua_S,12,0));
  unsigned lifeTimeMax = ((unsigned)  tolua_tonumber(tolua_S,13,0));
  int maxAngleDegrees = ((int)  tolua_tonumber(tolua_S,14,0));
  const irr::core::dimension2d<float>* minStartSize = ((const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,15,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createCylinderEmitter'", NULL);
#endif
  {
   irr::scene::IParticleCylinderEmitter* tolua_ret = (irr::scene::IParticleCylinderEmitter*)  self->createCylinderEmitter(*center,radius,*normal,length,outlineOnly,*direction,minParticlesPerSecond,maxParticlesPerSecond,*minStartColor,*maxStartColor,lifeTimeMin,lifeTimeMax,maxAngleDegrees,*minStartSize);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleCylinderEmitter");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createCylinderEmitter03(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createCylinderEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createCylinderEmitter05
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createCylinderEmitter05(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isboolean(tolua_S,6,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,7,&tolua_err) || !tolua_isusertype(tolua_S,7,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,8,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,9,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,10,&tolua_err) || !tolua_isusertype(tolua_S,10,"const irr::video::SColor",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,11,&tolua_err) || !tolua_isusertype(tolua_S,11,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,12,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,13,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,14,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,15,&tolua_err) || !tolua_isusertype(tolua_S,15,"const irr::core::dimension2d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,16,&tolua_err) || !tolua_isusertype(tolua_S,16,"const irr::core::dimension2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,17,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* center = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  float radius = ((float)  tolua_tonumber(tolua_S,3,0));
  const irr::core::vector3d<float>* normal = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,4,0));
  float length = ((float)  tolua_tonumber(tolua_S,5,0));
  bool outlineOnly = ((bool)  tolua_toboolean(tolua_S,6,0));
  const irr::core::vector3d<float>* direction = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,7,0));
  unsigned minParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,8,0));
  unsigned maxParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,9,0));
  const irr::video::SColor* minStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,10,0));
  const irr::video::SColor* maxStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,11,0));
  unsigned lifeTimeMin = ((unsigned)  tolua_tonumber(tolua_S,12,0));
  unsigned lifeTimeMax = ((unsigned)  tolua_tonumber(tolua_S,13,0));
  int maxAngleDegrees = ((int)  tolua_tonumber(tolua_S,14,0));
  const irr::core::dimension2d<float>* minStartSize = ((const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,15,0));
  const irr::core::dimension2d<float>* maxStartSize = ((const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,16,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createCylinderEmitter'", NULL);
#endif
  {
   irr::scene::IParticleCylinderEmitter* tolua_ret = (irr::scene::IParticleCylinderEmitter*)  self->createCylinderEmitter(*center,radius,*normal,length,outlineOnly,*direction,minParticlesPerSecond,maxParticlesPerSecond,*minStartColor,*maxStartColor,lifeTimeMin,lifeTimeMax,maxAngleDegrees,*minStartSize,*maxStartSize);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleCylinderEmitter");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createCylinderEmitter04(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createMeshEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createMeshEmitter00
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createMeshEmitter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::IMesh",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,3,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::IMesh* mesh = ((irr::scene::IMesh*)  tolua_tousertype(tolua_S,2,0));
  bool useNormalDirection = ((bool)  tolua_toboolean(tolua_S,3,true));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createMeshEmitter'", NULL);
#endif
  {
   irr::scene::IParticleMeshEmitter* tolua_ret = (irr::scene::IParticleMeshEmitter*)  self->createMeshEmitter(mesh,useNormalDirection);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleMeshEmitter");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'createMeshEmitter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: createMeshEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createMeshEmitter01
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createMeshEmitter01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::IMesh",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,5,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,6,1,&tolua_err) ||
     !tolua_isboolean(tolua_S,7,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,8,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,9,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,10,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::IMesh* mesh = ((irr::scene::IMesh*)  tolua_tousertype(tolua_S,2,0));
  bool useNormalDirection = ((bool)  tolua_toboolean(tolua_S,3,0));
  const irr::core::vector3d<float>* direction = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,4,0));
  float normalDirectionModifier = ((float)  tolua_tonumber(tolua_S,5,100.0f));
  int mbNumber = ((int)  tolua_tonumber(tolua_S,6,-1));
  bool everyMeshVertex = ((bool)  tolua_toboolean(tolua_S,7,false));
  unsigned minParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,8,5));
  unsigned maxParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,9,10));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createMeshEmitter'", NULL);
#endif
  {
   irr::scene::IParticleMeshEmitter* tolua_ret = (irr::scene::IParticleMeshEmitter*)  self->createMeshEmitter(mesh,useNormalDirection,*direction,normalDirectionModifier,mbNumber,everyMeshVertex,minParticlesPerSecond,maxParticlesPerSecond);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleMeshEmitter");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createMeshEmitter00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createMeshEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createMeshEmitter02
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createMeshEmitter02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::IMesh",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
     !tolua_isboolean(tolua_S,7,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,8,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,9,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,10,&tolua_err) || !tolua_isusertype(tolua_S,10,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,11,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::IMesh* mesh = ((irr::scene::IMesh*)  tolua_tousertype(tolua_S,2,0));
  bool useNormalDirection = ((bool)  tolua_toboolean(tolua_S,3,0));
  const irr::core::vector3d<float>* direction = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,4,0));
  float normalDirectionModifier = ((float)  tolua_tonumber(tolua_S,5,0));
  int mbNumber = ((int)  tolua_tonumber(tolua_S,6,0));
  bool everyMeshVertex = ((bool)  tolua_toboolean(tolua_S,7,0));
  unsigned minParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,8,0));
  unsigned maxParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,9,0));
  const irr::video::SColor* minStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,10,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createMeshEmitter'", NULL);
#endif
  {
   irr::scene::IParticleMeshEmitter* tolua_ret = (irr::scene::IParticleMeshEmitter*)  self->createMeshEmitter(mesh,useNormalDirection,*direction,normalDirectionModifier,mbNumber,everyMeshVertex,minParticlesPerSecond,maxParticlesPerSecond,*minStartColor);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleMeshEmitter");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createMeshEmitter01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createMeshEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createMeshEmitter03
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createMeshEmitter03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::IMesh",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
     !tolua_isboolean(tolua_S,7,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,8,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,9,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,10,&tolua_err) || !tolua_isusertype(tolua_S,10,"const irr::video::SColor",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,11,&tolua_err) || !tolua_isusertype(tolua_S,11,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,12,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,13,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,14,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,15,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::IMesh* mesh = ((irr::scene::IMesh*)  tolua_tousertype(tolua_S,2,0));
  bool useNormalDirection = ((bool)  tolua_toboolean(tolua_S,3,0));
  const irr::core::vector3d<float>* direction = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,4,0));
  float normalDirectionModifier = ((float)  tolua_tonumber(tolua_S,5,0));
  int mbNumber = ((int)  tolua_tonumber(tolua_S,6,0));
  bool everyMeshVertex = ((bool)  tolua_toboolean(tolua_S,7,0));
  unsigned minParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,8,0));
  unsigned maxParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,9,0));
  const irr::video::SColor* minStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,10,0));
  const irr::video::SColor* maxStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,11,0));
  unsigned lifeTimeMin = ((unsigned)  tolua_tonumber(tolua_S,12,2000));
  unsigned lifeTimeMax = ((unsigned)  tolua_tonumber(tolua_S,13,4000));
  int maxAngleDegrees = ((int)  tolua_tonumber(tolua_S,14,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createMeshEmitter'", NULL);
#endif
  {
   irr::scene::IParticleMeshEmitter* tolua_ret = (irr::scene::IParticleMeshEmitter*)  self->createMeshEmitter(mesh,useNormalDirection,*direction,normalDirectionModifier,mbNumber,everyMeshVertex,minParticlesPerSecond,maxParticlesPerSecond,*minStartColor,*maxStartColor,lifeTimeMin,lifeTimeMax,maxAngleDegrees);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleMeshEmitter");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createMeshEmitter02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createMeshEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createMeshEmitter04
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createMeshEmitter04(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::IMesh",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
     !tolua_isboolean(tolua_S,7,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,8,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,9,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,10,&tolua_err) || !tolua_isusertype(tolua_S,10,"const irr::video::SColor",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,11,&tolua_err) || !tolua_isusertype(tolua_S,11,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,12,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,13,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,14,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,15,&tolua_err) || !tolua_isusertype(tolua_S,15,"const irr::core::dimension2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,16,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::IMesh* mesh = ((irr::scene::IMesh*)  tolua_tousertype(tolua_S,2,0));
  bool useNormalDirection = ((bool)  tolua_toboolean(tolua_S,3,0));
  const irr::core::vector3d<float>* direction = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,4,0));
  float normalDirectionModifier = ((float)  tolua_tonumber(tolua_S,5,0));
  int mbNumber = ((int)  tolua_tonumber(tolua_S,6,0));
  bool everyMeshVertex = ((bool)  tolua_toboolean(tolua_S,7,0));
  unsigned minParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,8,0));
  unsigned maxParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,9,0));
  const irr::video::SColor* minStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,10,0));
  const irr::video::SColor* maxStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,11,0));
  unsigned lifeTimeMin = ((unsigned)  tolua_tonumber(tolua_S,12,0));
  unsigned lifeTimeMax = ((unsigned)  tolua_tonumber(tolua_S,13,0));
  int maxAngleDegrees = ((int)  tolua_tonumber(tolua_S,14,0));
  const irr::core::dimension2d<float>* minStartSize = ((const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,15,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createMeshEmitter'", NULL);
#endif
  {
   irr::scene::IParticleMeshEmitter* tolua_ret = (irr::scene::IParticleMeshEmitter*)  self->createMeshEmitter(mesh,useNormalDirection,*direction,normalDirectionModifier,mbNumber,everyMeshVertex,minParticlesPerSecond,maxParticlesPerSecond,*minStartColor,*maxStartColor,lifeTimeMin,lifeTimeMax,maxAngleDegrees,*minStartSize);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleMeshEmitter");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createMeshEmitter03(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createMeshEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createMeshEmitter05
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createMeshEmitter05(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::IMesh",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
     !tolua_isboolean(tolua_S,7,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,8,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,9,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,10,&tolua_err) || !tolua_isusertype(tolua_S,10,"const irr::video::SColor",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,11,&tolua_err) || !tolua_isusertype(tolua_S,11,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,12,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,13,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,14,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,15,&tolua_err) || !tolua_isusertype(tolua_S,15,"const irr::core::dimension2d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,16,&tolua_err) || !tolua_isusertype(tolua_S,16,"const irr::core::dimension2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,17,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::IMesh* mesh = ((irr::scene::IMesh*)  tolua_tousertype(tolua_S,2,0));
  bool useNormalDirection = ((bool)  tolua_toboolean(tolua_S,3,0));
  const irr::core::vector3d<float>* direction = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,4,0));
  float normalDirectionModifier = ((float)  tolua_tonumber(tolua_S,5,0));
  int mbNumber = ((int)  tolua_tonumber(tolua_S,6,0));
  bool everyMeshVertex = ((bool)  tolua_toboolean(tolua_S,7,0));
  unsigned minParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,8,0));
  unsigned maxParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,9,0));
  const irr::video::SColor* minStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,10,0));
  const irr::video::SColor* maxStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,11,0));
  unsigned lifeTimeMin = ((unsigned)  tolua_tonumber(tolua_S,12,0));
  unsigned lifeTimeMax = ((unsigned)  tolua_tonumber(tolua_S,13,0));
  int maxAngleDegrees = ((int)  tolua_tonumber(tolua_S,14,0));
  const irr::core::dimension2d<float>* minStartSize = ((const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,15,0));
  const irr::core::dimension2d<float>* maxStartSize = ((const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,16,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createMeshEmitter'", NULL);
#endif
  {
   irr::scene::IParticleMeshEmitter* tolua_ret = (irr::scene::IParticleMeshEmitter*)  self->createMeshEmitter(mesh,useNormalDirection,*direction,normalDirectionModifier,mbNumber,everyMeshVertex,minParticlesPerSecond,maxParticlesPerSecond,*minStartColor,*maxStartColor,lifeTimeMin,lifeTimeMax,maxAngleDegrees,*minStartSize,*maxStartSize);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleMeshEmitter");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createMeshEmitter04(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createPointEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createPointEmitter00
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createPointEmitter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createPointEmitter'", NULL);
#endif
  {
    irr::scene::IParticleEmitter* tolua_ret = (  irr::scene::IParticleEmitter*)  self->createPointEmitter();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleEmitter");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'createPointEmitter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: createPointEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createPointEmitter01
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createPointEmitter01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* direction = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  unsigned minParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,3,5));
  unsigned maxParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,4,10));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createPointEmitter'", NULL);
#endif
  {
    irr::scene::IParticleEmitter* tolua_ret = (  irr::scene::IParticleEmitter*)  self->createPointEmitter(*direction,minParticlesPerSecond,maxParticlesPerSecond);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleEmitter");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createPointEmitter00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createPointEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createPointEmitter02
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createPointEmitter02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* direction = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  unsigned minParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,3,0));
  unsigned maxParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,4,0));
  const irr::video::SColor* minStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createPointEmitter'", NULL);
#endif
  {
    irr::scene::IParticleEmitter* tolua_ret = (  irr::scene::IParticleEmitter*)  self->createPointEmitter(*direction,minParticlesPerSecond,maxParticlesPerSecond,*minStartColor);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleEmitter");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createPointEmitter01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createPointEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createPointEmitter03
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createPointEmitter03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"const irr::video::SColor",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,6,&tolua_err) || !tolua_isusertype(tolua_S,6,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,7,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,8,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,9,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,10,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* direction = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  unsigned minParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,3,0));
  unsigned maxParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,4,0));
  const irr::video::SColor* minStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,5,0));
  const irr::video::SColor* maxStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,6,0));
  unsigned lifeTimeMin = ((unsigned)  tolua_tonumber(tolua_S,7,2000));
  unsigned lifeTimeMax = ((unsigned)  tolua_tonumber(tolua_S,8,4000));
  int maxAngleDegrees = ((int)  tolua_tonumber(tolua_S,9,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createPointEmitter'", NULL);
#endif
  {
    irr::scene::IParticleEmitter* tolua_ret = (  irr::scene::IParticleEmitter*)  self->createPointEmitter(*direction,minParticlesPerSecond,maxParticlesPerSecond,*minStartColor,*maxStartColor,lifeTimeMin,lifeTimeMax,maxAngleDegrees);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleEmitter");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createPointEmitter02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createPointEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createPointEmitter04
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createPointEmitter04(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"const irr::video::SColor",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,6,&tolua_err) || !tolua_isusertype(tolua_S,6,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,7,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,8,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,9,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,10,&tolua_err) || !tolua_isusertype(tolua_S,10,"const irr::core::dimension2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,11,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* direction = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  unsigned minParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,3,0));
  unsigned maxParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,4,0));
  const irr::video::SColor* minStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,5,0));
  const irr::video::SColor* maxStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,6,0));
  unsigned lifeTimeMin = ((unsigned)  tolua_tonumber(tolua_S,7,0));
  unsigned lifeTimeMax = ((unsigned)  tolua_tonumber(tolua_S,8,0));
  int maxAngleDegrees = ((int)  tolua_tonumber(tolua_S,9,0));
  const irr::core::dimension2d<float>* minStartSize = ((const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,10,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createPointEmitter'", NULL);
#endif
  {
    irr::scene::IParticleEmitter* tolua_ret = (  irr::scene::IParticleEmitter*)  self->createPointEmitter(*direction,minParticlesPerSecond,maxParticlesPerSecond,*minStartColor,*maxStartColor,lifeTimeMin,lifeTimeMax,maxAngleDegrees,*minStartSize);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleEmitter");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createPointEmitter03(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createPointEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createPointEmitter05
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createPointEmitter05(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"const irr::video::SColor",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,6,&tolua_err) || !tolua_isusertype(tolua_S,6,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,7,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,8,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,9,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,10,&tolua_err) || !tolua_isusertype(tolua_S,10,"const irr::core::dimension2d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,11,&tolua_err) || !tolua_isusertype(tolua_S,11,"const irr::core::dimension2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,12,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* direction = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  unsigned minParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,3,0));
  unsigned maxParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,4,0));
  const irr::video::SColor* minStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,5,0));
  const irr::video::SColor* maxStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,6,0));
  unsigned lifeTimeMin = ((unsigned)  tolua_tonumber(tolua_S,7,0));
  unsigned lifeTimeMax = ((unsigned)  tolua_tonumber(tolua_S,8,0));
  int maxAngleDegrees = ((int)  tolua_tonumber(tolua_S,9,0));
  const irr::core::dimension2d<float>* minStartSize = ((const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,10,0));
  const irr::core::dimension2d<float>* maxStartSize = ((const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,11,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createPointEmitter'", NULL);
#endif
  {
    irr::scene::IParticleEmitter* tolua_ret = (  irr::scene::IParticleEmitter*)  self->createPointEmitter(*direction,minParticlesPerSecond,maxParticlesPerSecond,*minStartColor,*maxStartColor,lifeTimeMin,lifeTimeMax,maxAngleDegrees,*minStartSize,*maxStartSize);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleEmitter");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createPointEmitter04(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createRingEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createRingEmitter00
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createRingEmitter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* center = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  float radius = ((float)  tolua_tonumber(tolua_S,3,0));
  float ringThickness = ((float)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createRingEmitter'", NULL);
#endif
  {
   irr::scene::IParticleRingEmitter* tolua_ret = (irr::scene::IParticleRingEmitter*)  self->createRingEmitter(*center,radius,ringThickness);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleRingEmitter");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'createRingEmitter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: createRingEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createRingEmitter01
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createRingEmitter01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,6,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,7,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,8,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* center = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  float radius = ((float)  tolua_tonumber(tolua_S,3,0));
  float ringThickness = ((float)  tolua_tonumber(tolua_S,4,0));
  const irr::core::vector3d<float>* direction = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,5,0));
  unsigned minParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,6,5));
  unsigned maxParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,7,10));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createRingEmitter'", NULL);
#endif
  {
   irr::scene::IParticleRingEmitter* tolua_ret = (irr::scene::IParticleRingEmitter*)  self->createRingEmitter(*center,radius,ringThickness,*direction,minParticlesPerSecond,maxParticlesPerSecond);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleRingEmitter");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createRingEmitter00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createRingEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createRingEmitter02
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createRingEmitter02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,7,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,8,&tolua_err) || !tolua_isusertype(tolua_S,8,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,9,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* center = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  float radius = ((float)  tolua_tonumber(tolua_S,3,0));
  float ringThickness = ((float)  tolua_tonumber(tolua_S,4,0));
  const irr::core::vector3d<float>* direction = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,5,0));
  unsigned minParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,6,0));
  unsigned maxParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,7,0));
  const irr::video::SColor* minStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,8,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createRingEmitter'", NULL);
#endif
  {
   irr::scene::IParticleRingEmitter* tolua_ret = (irr::scene::IParticleRingEmitter*)  self->createRingEmitter(*center,radius,ringThickness,*direction,minParticlesPerSecond,maxParticlesPerSecond,*minStartColor);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleRingEmitter");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createRingEmitter01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createRingEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createRingEmitter03
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createRingEmitter03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,7,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,8,&tolua_err) || !tolua_isusertype(tolua_S,8,"const irr::video::SColor",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,9,&tolua_err) || !tolua_isusertype(tolua_S,9,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,10,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,11,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,12,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,13,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* center = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  float radius = ((float)  tolua_tonumber(tolua_S,3,0));
  float ringThickness = ((float)  tolua_tonumber(tolua_S,4,0));
  const irr::core::vector3d<float>* direction = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,5,0));
  unsigned minParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,6,0));
  unsigned maxParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,7,0));
  const irr::video::SColor* minStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,8,0));
  const irr::video::SColor* maxStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,9,0));
  unsigned lifeTimeMin = ((unsigned)  tolua_tonumber(tolua_S,10,2000));
  unsigned lifeTimeMax = ((unsigned)  tolua_tonumber(tolua_S,11,4000));
  int maxAngleDegrees = ((int)  tolua_tonumber(tolua_S,12,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createRingEmitter'", NULL);
#endif
  {
   irr::scene::IParticleRingEmitter* tolua_ret = (irr::scene::IParticleRingEmitter*)  self->createRingEmitter(*center,radius,ringThickness,*direction,minParticlesPerSecond,maxParticlesPerSecond,*minStartColor,*maxStartColor,lifeTimeMin,lifeTimeMax,maxAngleDegrees);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleRingEmitter");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createRingEmitter02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createRingEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createRingEmitter04
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createRingEmitter04(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,7,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,8,&tolua_err) || !tolua_isusertype(tolua_S,8,"const irr::video::SColor",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,9,&tolua_err) || !tolua_isusertype(tolua_S,9,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,10,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,11,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,12,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,13,&tolua_err) || !tolua_isusertype(tolua_S,13,"const irr::core::dimension2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,14,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* center = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  float radius = ((float)  tolua_tonumber(tolua_S,3,0));
  float ringThickness = ((float)  tolua_tonumber(tolua_S,4,0));
  const irr::core::vector3d<float>* direction = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,5,0));
  unsigned minParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,6,0));
  unsigned maxParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,7,0));
  const irr::video::SColor* minStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,8,0));
  const irr::video::SColor* maxStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,9,0));
  unsigned lifeTimeMin = ((unsigned)  tolua_tonumber(tolua_S,10,0));
  unsigned lifeTimeMax = ((unsigned)  tolua_tonumber(tolua_S,11,0));
  int maxAngleDegrees = ((int)  tolua_tonumber(tolua_S,12,0));
  const irr::core::dimension2d<float>* minStartSize = ((const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,13,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createRingEmitter'", NULL);
#endif
  {
   irr::scene::IParticleRingEmitter* tolua_ret = (irr::scene::IParticleRingEmitter*)  self->createRingEmitter(*center,radius,ringThickness,*direction,minParticlesPerSecond,maxParticlesPerSecond,*minStartColor,*maxStartColor,lifeTimeMin,lifeTimeMax,maxAngleDegrees,*minStartSize);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleRingEmitter");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createRingEmitter03(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createRingEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createRingEmitter05
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createRingEmitter05(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,7,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,8,&tolua_err) || !tolua_isusertype(tolua_S,8,"const irr::video::SColor",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,9,&tolua_err) || !tolua_isusertype(tolua_S,9,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,10,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,11,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,12,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,13,&tolua_err) || !tolua_isusertype(tolua_S,13,"const irr::core::dimension2d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,14,&tolua_err) || !tolua_isusertype(tolua_S,14,"const irr::core::dimension2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,15,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* center = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  float radius = ((float)  tolua_tonumber(tolua_S,3,0));
  float ringThickness = ((float)  tolua_tonumber(tolua_S,4,0));
  const irr::core::vector3d<float>* direction = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,5,0));
  unsigned minParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,6,0));
  unsigned maxParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,7,0));
  const irr::video::SColor* minStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,8,0));
  const irr::video::SColor* maxStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,9,0));
  unsigned lifeTimeMin = ((unsigned)  tolua_tonumber(tolua_S,10,0));
  unsigned lifeTimeMax = ((unsigned)  tolua_tonumber(tolua_S,11,0));
  int maxAngleDegrees = ((int)  tolua_tonumber(tolua_S,12,0));
  const irr::core::dimension2d<float>* minStartSize = ((const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,13,0));
  const irr::core::dimension2d<float>* maxStartSize = ((const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,14,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createRingEmitter'", NULL);
#endif
  {
   irr::scene::IParticleRingEmitter* tolua_ret = (irr::scene::IParticleRingEmitter*)  self->createRingEmitter(*center,radius,ringThickness,*direction,minParticlesPerSecond,maxParticlesPerSecond,*minStartColor,*maxStartColor,lifeTimeMin,lifeTimeMax,maxAngleDegrees,*minStartSize,*maxStartSize);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleRingEmitter");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createRingEmitter04(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createSphereEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createSphereEmitter00
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createSphereEmitter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* center = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  float radius = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createSphereEmitter'", NULL);
#endif
  {
   irr::scene::IParticleSphereEmitter* tolua_ret = (irr::scene::IParticleSphereEmitter*)  self->createSphereEmitter(*center,radius);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleSphereEmitter");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'createSphereEmitter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: createSphereEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createSphereEmitter01
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createSphereEmitter01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,5,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,6,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* center = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  float radius = ((float)  tolua_tonumber(tolua_S,3,0));
  const irr::core::vector3d<float>* direction = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,4,0));
  unsigned minParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,5,5));
  unsigned maxParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,6,10));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createSphereEmitter'", NULL);
#endif
  {
   irr::scene::IParticleSphereEmitter* tolua_ret = (irr::scene::IParticleSphereEmitter*)  self->createSphereEmitter(*center,radius,*direction,minParticlesPerSecond,maxParticlesPerSecond);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleSphereEmitter");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createSphereEmitter00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createSphereEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createSphereEmitter02
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createSphereEmitter02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,7,&tolua_err) || !tolua_isusertype(tolua_S,7,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,8,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* center = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  float radius = ((float)  tolua_tonumber(tolua_S,3,0));
  const irr::core::vector3d<float>* direction = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,4,0));
  unsigned minParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,5,0));
  unsigned maxParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,6,0));
  const irr::video::SColor* minStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,7,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createSphereEmitter'", NULL);
#endif
  {
   irr::scene::IParticleSphereEmitter* tolua_ret = (irr::scene::IParticleSphereEmitter*)  self->createSphereEmitter(*center,radius,*direction,minParticlesPerSecond,maxParticlesPerSecond,*minStartColor);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleSphereEmitter");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createSphereEmitter01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createSphereEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createSphereEmitter03
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createSphereEmitter03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,7,&tolua_err) || !tolua_isusertype(tolua_S,7,"const irr::video::SColor",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,8,&tolua_err) || !tolua_isusertype(tolua_S,8,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,9,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,10,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,11,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,12,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* center = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  float radius = ((float)  tolua_tonumber(tolua_S,3,0));
  const irr::core::vector3d<float>* direction = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,4,0));
  unsigned minParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,5,0));
  unsigned maxParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,6,0));
  const irr::video::SColor* minStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,7,0));
  const irr::video::SColor* maxStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,8,0));
  unsigned lifeTimeMin = ((unsigned)  tolua_tonumber(tolua_S,9,2000));
  unsigned lifeTimeMax = ((unsigned)  tolua_tonumber(tolua_S,10,4000));
  int maxAngleDegrees = ((int)  tolua_tonumber(tolua_S,11,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createSphereEmitter'", NULL);
#endif
  {
   irr::scene::IParticleSphereEmitter* tolua_ret = (irr::scene::IParticleSphereEmitter*)  self->createSphereEmitter(*center,radius,*direction,minParticlesPerSecond,maxParticlesPerSecond,*minStartColor,*maxStartColor,lifeTimeMin,lifeTimeMax,maxAngleDegrees);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleSphereEmitter");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createSphereEmitter02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createSphereEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createSphereEmitter04
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createSphereEmitter04(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,7,&tolua_err) || !tolua_isusertype(tolua_S,7,"const irr::video::SColor",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,8,&tolua_err) || !tolua_isusertype(tolua_S,8,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,9,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,10,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,11,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,12,&tolua_err) || !tolua_isusertype(tolua_S,12,"const irr::core::dimension2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,13,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* center = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  float radius = ((float)  tolua_tonumber(tolua_S,3,0));
  const irr::core::vector3d<float>* direction = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,4,0));
  unsigned minParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,5,0));
  unsigned maxParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,6,0));
  const irr::video::SColor* minStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,7,0));
  const irr::video::SColor* maxStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,8,0));
  unsigned lifeTimeMin = ((unsigned)  tolua_tonumber(tolua_S,9,0));
  unsigned lifeTimeMax = ((unsigned)  tolua_tonumber(tolua_S,10,0));
  int maxAngleDegrees = ((int)  tolua_tonumber(tolua_S,11,0));
  const irr::core::dimension2d<float>* minStartSize = ((const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,12,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createSphereEmitter'", NULL);
#endif
  {
   irr::scene::IParticleSphereEmitter* tolua_ret = (irr::scene::IParticleSphereEmitter*)  self->createSphereEmitter(*center,radius,*direction,minParticlesPerSecond,maxParticlesPerSecond,*minStartColor,*maxStartColor,lifeTimeMin,lifeTimeMax,maxAngleDegrees,*minStartSize);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleSphereEmitter");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createSphereEmitter03(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createSphereEmitter of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createSphereEmitter05
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createSphereEmitter05(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,7,&tolua_err) || !tolua_isusertype(tolua_S,7,"const irr::video::SColor",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,8,&tolua_err) || !tolua_isusertype(tolua_S,8,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,9,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,10,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,11,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,12,&tolua_err) || !tolua_isusertype(tolua_S,12,"const irr::core::dimension2d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,13,&tolua_err) || !tolua_isusertype(tolua_S,13,"const irr::core::dimension2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,14,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* center = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  float radius = ((float)  tolua_tonumber(tolua_S,3,0));
  const irr::core::vector3d<float>* direction = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,4,0));
  unsigned minParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,5,0));
  unsigned maxParticlesPerSecond = ((unsigned)  tolua_tonumber(tolua_S,6,0));
  const irr::video::SColor* minStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,7,0));
  const irr::video::SColor* maxStartColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,8,0));
  unsigned lifeTimeMin = ((unsigned)  tolua_tonumber(tolua_S,9,0));
  unsigned lifeTimeMax = ((unsigned)  tolua_tonumber(tolua_S,10,0));
  int maxAngleDegrees = ((int)  tolua_tonumber(tolua_S,11,0));
  const irr::core::dimension2d<float>* minStartSize = ((const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,12,0));
  const irr::core::dimension2d<float>* maxStartSize = ((const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,13,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createSphereEmitter'", NULL);
#endif
  {
   irr::scene::IParticleSphereEmitter* tolua_ret = (irr::scene::IParticleSphereEmitter*)  self->createSphereEmitter(*center,radius,*direction,minParticlesPerSecond,maxParticlesPerSecond,*minStartColor,*maxStartColor,lifeTimeMin,lifeTimeMax,maxAngleDegrees,*minStartSize,*maxStartSize);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleSphereEmitter");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createSphereEmitter04(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createAttractionAffector of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createAttractionAffector00
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createAttractionAffector00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
     !tolua_isboolean(tolua_S,4,1,&tolua_err) ||
     !tolua_isboolean(tolua_S,5,1,&tolua_err) ||
     !tolua_isboolean(tolua_S,6,1,&tolua_err) ||
     !tolua_isboolean(tolua_S,7,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,8,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* point = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  float speed = ((float)  tolua_tonumber(tolua_S,3,1.0f));
  bool attract = ((bool)  tolua_toboolean(tolua_S,4,true));
  bool affectX = ((bool)  tolua_toboolean(tolua_S,5,true));
  bool affectY = ((bool)  tolua_toboolean(tolua_S,6,true));
  bool affectZ = ((bool)  tolua_toboolean(tolua_S,7,true));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createAttractionAffector'", NULL);
#endif
  {
   irr::scene::IParticleAttractionAffector* tolua_ret = (irr::scene::IParticleAttractionAffector*)  self->createAttractionAffector(*point,speed,attract,affectX,affectY,affectZ);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleAttractionAffector");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'createAttractionAffector'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: createScaleParticleAffector of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createScaleParticleAffector00
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createScaleParticleAffector00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createScaleParticleAffector'", NULL);
#endif
  {
   irr::scene::IParticleAffector* tolua_ret = (irr::scene::IParticleAffector*)  self->createScaleParticleAffector();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleAffector");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'createScaleParticleAffector'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: createScaleParticleAffector of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createScaleParticleAffector01
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createScaleParticleAffector01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::dimension2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::dimension2d<float>* scaleTo = ((const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createScaleParticleAffector'", NULL);
#endif
  {
   irr::scene::IParticleAffector* tolua_ret = (irr::scene::IParticleAffector*)  self->createScaleParticleAffector(*scaleTo);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleAffector");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createScaleParticleAffector00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createFadeOutParticleAffector of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createFadeOutParticleAffector00
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createFadeOutParticleAffector00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createFadeOutParticleAffector'", NULL);
#endif
  {
   irr::scene::IParticleFadeOutAffector* tolua_ret = (irr::scene::IParticleFadeOutAffector*)  self->createFadeOutParticleAffector();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleFadeOutAffector");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'createFadeOutParticleAffector'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: createFadeOutParticleAffector of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createFadeOutParticleAffector01
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createFadeOutParticleAffector01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::video::SColor* targetColor = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,2,0));
  unsigned timeNeededToFadeOut = ((unsigned)  tolua_tonumber(tolua_S,3,1000));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createFadeOutParticleAffector'", NULL);
#endif
  {
   irr::scene::IParticleFadeOutAffector* tolua_ret = (irr::scene::IParticleFadeOutAffector*)  self->createFadeOutParticleAffector(*targetColor,timeNeededToFadeOut);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleFadeOutAffector");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createFadeOutParticleAffector00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createGravityAffector of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createGravityAffector00
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createGravityAffector00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createGravityAffector'", NULL);
#endif
  {
   irr::scene::IParticleGravityAffector* tolua_ret = (irr::scene::IParticleGravityAffector*)  self->createGravityAffector();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleGravityAffector");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'createGravityAffector'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: createGravityAffector of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createGravityAffector01
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createGravityAffector01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* gravity = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  unsigned timeForceLost = ((unsigned)  tolua_tonumber(tolua_S,3,1000));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createGravityAffector'", NULL);
#endif
  {
   irr::scene::IParticleGravityAffector* tolua_ret = (irr::scene::IParticleGravityAffector*)  self->createGravityAffector(*gravity,timeForceLost);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleGravityAffector");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createGravityAffector00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createRotationAffector of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createRotationAffector00
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createRotationAffector00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createRotationAffector'", NULL);
#endif
  {
   irr::scene::IParticleRotationAffector* tolua_ret = (irr::scene::IParticleRotationAffector*)  self->createRotationAffector();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleRotationAffector");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'createRotationAffector'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: createRotationAffector of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createRotationAffector01
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createRotationAffector01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* speed = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createRotationAffector'", NULL);
#endif
  {
   irr::scene::IParticleRotationAffector* tolua_ret = (irr::scene::IParticleRotationAffector*)  self->createRotationAffector(*speed);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleRotationAffector");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createRotationAffector00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: createRotationAffector of class  irr::scene::IParticleSystemSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createRotationAffector02
static int tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createRotationAffector02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IParticleSystemSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::scene::IParticleSystemSceneNode* self = (irr::scene::IParticleSystemSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* speed = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::vector3d<float>* pivotPoint = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'createRotationAffector'", NULL);
#endif
  {
   irr::scene::IParticleRotationAffector* tolua_ret = (irr::scene::IParticleRotationAffector*)  self->createRotationAffector(*speed,*pivotPoint);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleRotationAffector");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createRotationAffector01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: grab of class  irr::IReferenceCounted */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_IReferenceCounted_grab00
static int tolua_NeoGame_irr_IReferenceCounted_grab00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::IReferenceCounted",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::IReferenceCounted* self = (const irr::IReferenceCounted*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'grab'", NULL);
#endif
  {
   self->grab();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'grab'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: drop of class  irr::IReferenceCounted */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_IReferenceCounted_drop00
static int tolua_NeoGame_irr_IReferenceCounted_drop00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::IReferenceCounted",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::IReferenceCounted* self = (const irr::IReferenceCounted*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'drop'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->drop();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'drop'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getReferenceCount of class  irr::IReferenceCounted */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_IReferenceCounted_getReferenceCount00
static int tolua_NeoGame_irr_IReferenceCounted_getReferenceCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::IReferenceCounted",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::IReferenceCounted* self = (const irr::IReferenceCounted*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getReferenceCount'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getReferenceCount();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getReferenceCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: render of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_render00
static int tolua_NeoGame_irr_scene_ISceneNode_render00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ISceneNode* self = (irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'render'", NULL);
#endif
  {
   self->render();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'render'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getName of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_getName00
static int tolua_NeoGame_irr_scene_ISceneNode_getName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::ISceneNode* self = (const irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getName'", NULL);
#endif
  {
   const char* tolua_ret = (const char*)  self->getName();
   tolua_pushstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setName of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_setName00
static int tolua_NeoGame_irr_scene_ISceneNode_setName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ISceneNode* self = (irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  const char* name = ((const char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setName'", NULL);
#endif
  {
   self->setName(name);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getBoundingBox of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_getBoundingBox00
static int tolua_NeoGame_irr_scene_ISceneNode_getBoundingBox00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::ISceneNode* self = (const irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getBoundingBox'", NULL);
#endif
  {
   const irr::core::aabbox3df& tolua_ret = (const irr::core::aabbox3df&)  self->getBoundingBox();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const irr::core::aabbox3df");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getBoundingBox'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTransformedBoundingBox of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_getTransformedBoundingBox00
static int tolua_NeoGame_irr_scene_ISceneNode_getTransformedBoundingBox00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::ISceneNode* self = (const irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTransformedBoundingBox'", NULL);
#endif
  {
   const irr::core::aabbox3df tolua_ret = (const irr::core::aabbox3df)  self->getTransformedBoundingBox();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::aabbox3df)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"const irr::core::aabbox3df");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(const irr::core::aabbox3df));
     tolua_pushusertype(tolua_S,tolua_obj,"const irr::core::aabbox3df");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTransformedBoundingBox'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAbsoluteTransformation of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_getAbsoluteTransformation00
static int tolua_NeoGame_irr_scene_ISceneNode_getAbsoluteTransformation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::ISceneNode* self = (const irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAbsoluteTransformation'", NULL);
#endif
  {
   const irr::core::CMatrix4<float>& tolua_ret = (const irr::core::CMatrix4<float>&)  self->getAbsoluteTransformation();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const irr::core::CMatrix4<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAbsoluteTransformation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getRelativeTransformation of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_getRelativeTransformation00
static int tolua_NeoGame_irr_scene_ISceneNode_getRelativeTransformation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::ISceneNode* self = (const irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getRelativeTransformation'", NULL);
#endif
  {
   irr::core::CMatrix4<float> tolua_ret = (irr::core::CMatrix4<float>)  self->getRelativeTransformation();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::CMatrix4<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::CMatrix4<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::CMatrix4<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::CMatrix4<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRelativeTransformation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isVisible of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_isVisible00
static int tolua_NeoGame_irr_scene_ISceneNode_isVisible00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::ISceneNode* self = (const irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isVisible'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isVisible();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isVisible'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isTrulyVisible of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_isTrulyVisible00
static int tolua_NeoGame_irr_scene_ISceneNode_isTrulyVisible00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::ISceneNode* self = (const irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isTrulyVisible'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isTrulyVisible();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isTrulyVisible'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setVisible of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_setVisible00
static int tolua_NeoGame_irr_scene_ISceneNode_setVisible00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ISceneNode* self = (irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  bool isVisible = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setVisible'", NULL);
#endif
  {
   self->setVisible(isVisible);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setVisible'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getID of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_getID00
static int tolua_NeoGame_irr_scene_ISceneNode_getID00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::ISceneNode* self = (const irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getID'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getID();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getID'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setID of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_setID00
static int tolua_NeoGame_irr_scene_ISceneNode_setID00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ISceneNode* self = (irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  int id = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setID'", NULL);
#endif
  {
   self->setID(id);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setID'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addChild of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_addChild00
static int tolua_NeoGame_irr_scene_ISceneNode_addChild00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ISceneNode* self = (irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::ISceneNode* child = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addChild'", NULL);
#endif
  {
   self->addChild(child);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addChild'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeChild of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_removeChild00
static int tolua_NeoGame_irr_scene_ISceneNode_removeChild00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ISceneNode* self = (irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::ISceneNode* child = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeChild'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->removeChild(child);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removeChild'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeAll of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_removeAll00
static int tolua_NeoGame_irr_scene_ISceneNode_removeAll00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ISceneNode* self = (irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeAll'", NULL);
#endif
  {
   self->removeAll();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removeAll'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: remove of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_remove00
static int tolua_NeoGame_irr_scene_ISceneNode_remove00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ISceneNode* self = (irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'remove'", NULL);
#endif
  {
   self->remove();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'remove'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addAnimator of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_addAnimator00
static int tolua_NeoGame_irr_scene_ISceneNode_addAnimator00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::ISceneNodeAnimator",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ISceneNode* self = (irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::ISceneNodeAnimator* animator = ((irr::scene::ISceneNodeAnimator*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addAnimator'", NULL);
#endif
  {
   self->addAnimator(animator);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addAnimator'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeAnimator of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_removeAnimator00
static int tolua_NeoGame_irr_scene_ISceneNode_removeAnimator00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::ISceneNodeAnimator",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ISceneNode* self = (irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::ISceneNodeAnimator* animator = ((irr::scene::ISceneNodeAnimator*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeAnimator'", NULL);
#endif
  {
   self->removeAnimator(animator);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removeAnimator'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: removeAnimators of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_removeAnimators00
static int tolua_NeoGame_irr_scene_ISceneNode_removeAnimators00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ISceneNode* self = (irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'removeAnimators'", NULL);
#endif
  {
   self->removeAnimators();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'removeAnimators'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMaterialCount of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_getMaterialCount00
static int tolua_NeoGame_irr_scene_ISceneNode_getMaterialCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::ISceneNode* self = (const irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMaterialCount'", NULL);
#endif
  {
   unsigned int tolua_ret = (unsigned int)  self->getMaterialCount();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMaterialCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMaterialFlag of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_setMaterialFlag00
static int tolua_NeoGame_irr_scene_ISceneNode_setMaterialFlag00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ISceneNode* self = (irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  irr::video::E_MATERIAL_FLAG flag = ((irr::video::E_MATERIAL_FLAG) (int)  tolua_tonumber(tolua_S,2,0));
  bool newvalue = ((bool)  tolua_toboolean(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMaterialFlag'", NULL);
#endif
  {
   self->setMaterialFlag(flag,newvalue);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMaterialFlag'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMaterialTexture of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_setMaterialTexture00
static int tolua_NeoGame_irr_scene_ISceneNode_setMaterialTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"irr::video::ITexture",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ISceneNode* self = (irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  unsigned int textureLayer = ((unsigned int)  tolua_tonumber(tolua_S,2,0));
  irr::video::ITexture* texture = ((irr::video::ITexture*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMaterialTexture'", NULL);
#endif
  {
   self->setMaterialTexture(textureLayer,texture);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMaterialTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMaterialType of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_setMaterialType00
static int tolua_NeoGame_irr_scene_ISceneNode_setMaterialType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ISceneNode* self = (irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  irr::video::E_MATERIAL_TYPE newType = ((irr::video::E_MATERIAL_TYPE) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMaterialType'", NULL);
#endif
  {
   self->setMaterialType(newType);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMaterialType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getScale of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_getScale00
static int tolua_NeoGame_irr_scene_ISceneNode_getScale00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::ISceneNode* self = (const irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getScale'", NULL);
#endif
  {
   const irr::core::vector3d<float>& tolua_ret = (const irr::core::vector3d<float>&)  self->getScale();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const irr::core::vector3d<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getScale'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setScale of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_setScale00
static int tolua_NeoGame_irr_scene_ISceneNode_setScale00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ISceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ISceneNode* self = (irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* scale = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setScale'", NULL);
#endif
  {
   self->setScale(*scale);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setScale'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getRotation of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_getRotation00
static int tolua_NeoGame_irr_scene_ISceneNode_getRotation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::ISceneNode* self = (const irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getRotation'", NULL);
#endif
  {
   const irr::core::vector3d<float>& tolua_ret = (const irr::core::vector3d<float>&)  self->getRotation();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const irr::core::vector3d<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRotation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setRotation of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_setRotation00
static int tolua_NeoGame_irr_scene_ISceneNode_setRotation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ISceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ISceneNode* self = (irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* rotation = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setRotation'", NULL);
#endif
  {
   self->setRotation(*rotation);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setRotation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getPosition of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_getPosition00
static int tolua_NeoGame_irr_scene_ISceneNode_getPosition00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::ISceneNode* self = (const irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getPosition'", NULL);
#endif
  {
   const irr::core::vector3d<float>& tolua_ret = (const irr::core::vector3d<float>&)  self->getPosition();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const irr::core::vector3d<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getPosition'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setPosition of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_setPosition00
static int tolua_NeoGame_irr_scene_ISceneNode_setPosition00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ISceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ISceneNode* self = (irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* newpos = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setPosition'", NULL);
#endif
  {
   self->setPosition(*newpos);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setPosition'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAbsolutePosition of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_getAbsolutePosition00
static int tolua_NeoGame_irr_scene_ISceneNode_getAbsolutePosition00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::ISceneNode* self = (const irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAbsolutePosition'", NULL);
#endif
  {
   irr::core::vector3d<float> tolua_ret = (irr::core::vector3d<float>)  self->getAbsolutePosition();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAbsolutePosition'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAutomaticCulling of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_setAutomaticCulling00
static int tolua_NeoGame_irr_scene_ISceneNode_setAutomaticCulling00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ISceneNode* self = (irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  unsigned int state = ((unsigned int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAutomaticCulling'", NULL);
#endif
  {
   self->setAutomaticCulling(state);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAutomaticCulling'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAutomaticCulling of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_getAutomaticCulling00
static int tolua_NeoGame_irr_scene_ISceneNode_getAutomaticCulling00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::ISceneNode* self = (const irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAutomaticCulling'", NULL);
#endif
  {
   unsigned int tolua_ret = (unsigned int)  self->getAutomaticCulling();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAutomaticCulling'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setDebugDataVisible of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_setDebugDataVisible00
static int tolua_NeoGame_irr_scene_ISceneNode_setDebugDataVisible00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ISceneNode* self = (irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  unsigned int state = ((unsigned int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setDebugDataVisible'", NULL);
#endif
  {
   self->setDebugDataVisible(state);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setDebugDataVisible'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isDebugDataVisible of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_isDebugDataVisible00
static int tolua_NeoGame_irr_scene_ISceneNode_isDebugDataVisible00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::ISceneNode* self = (const irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isDebugDataVisible'", NULL);
#endif
  {
   unsigned int tolua_ret = (unsigned int)  self->isDebugDataVisible();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isDebugDataVisible'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setIsDebugObject of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_setIsDebugObject00
static int tolua_NeoGame_irr_scene_ISceneNode_setIsDebugObject00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ISceneNode* self = (irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  bool debugObject = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setIsDebugObject'", NULL);
#endif
  {
   self->setIsDebugObject(debugObject);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setIsDebugObject'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isDebugObject of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_isDebugObject00
static int tolua_NeoGame_irr_scene_ISceneNode_isDebugObject00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::ISceneNode* self = (const irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isDebugObject'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isDebugObject();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isDebugObject'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setParent of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_setParent00
static int tolua_NeoGame_irr_scene_ISceneNode_setParent00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ISceneNode* self = (irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::ISceneNode* newParent = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setParent'", NULL);
#endif
  {
   self->setParent(newParent);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setParent'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: updateAbsolutePosition of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_updateAbsolutePosition00
static int tolua_NeoGame_irr_scene_ISceneNode_updateAbsolutePosition00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ISceneNode* self = (irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'updateAbsolutePosition'", NULL);
#endif
  {
   self->updateAbsolutePosition();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'updateAbsolutePosition'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getParent of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_getParent00
static int tolua_NeoGame_irr_scene_ISceneNode_getParent00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::ISceneNode* self = (const irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getParent'", NULL);
#endif
  {
   irr::scene::ISceneNode* tolua_ret = (irr::scene::ISceneNode*)  self->getParent();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::ISceneNode");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getParent'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getType of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_getType00
static int tolua_NeoGame_irr_scene_ISceneNode_getType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::ISceneNode* self = (const irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getType'", NULL);
#endif
  {
   irr::scene::ESCENE_NODE_TYPE tolua_ret = (irr::scene::ESCENE_NODE_TYPE)  self->getType();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: clone of class  irr::scene::ISceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNode_clone00
static int tolua_NeoGame_irr_scene_ISceneNode_clone00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::ISceneNode",1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::ISceneNode* self = (irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::ISceneNode* newParent = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'clone'", NULL);
#endif
  {
   irr::scene::ISceneNode* tolua_ret = (irr::scene::ISceneNode*)  self->clone(newParent);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::ISceneNode");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'clone'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getType of class  irr::scene::ISceneNodeAnimator */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNodeAnimator_getType00
static int tolua_NeoGame_irr_scene_ISceneNodeAnimator_getType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::ISceneNodeAnimator",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::ISceneNodeAnimator* self = (const irr::scene::ISceneNodeAnimator*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getType'", NULL);
#endif
  {
   irr::scene::ESCENE_NODE_ANIMATOR_TYPE tolua_ret = (irr::scene::ESCENE_NODE_ANIMATOR_TYPE)  self->getType();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: hasFinished of class  irr::scene::ISceneNodeAnimator */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_ISceneNodeAnimator_hasFinished00
static int tolua_NeoGame_irr_scene_ISceneNodeAnimator_hasFinished00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::scene::ISceneNodeAnimator",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::scene::ISceneNodeAnimator* self = (const irr::scene::ISceneNodeAnimator*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'hasFinished'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->hasFinished();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'hasFinished'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setShadowMesh of class  irr::scene::IShadowVolumeSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IShadowVolumeSceneNode_setShadowMesh00
static int tolua_NeoGame_irr_scene_IShadowVolumeSceneNode_setShadowMesh00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IShadowVolumeSceneNode",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"const irr::scene::IMesh",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IShadowVolumeSceneNode* self = (irr::scene::IShadowVolumeSceneNode*)  tolua_tousertype(tolua_S,1,0);
  const irr::scene::IMesh* mesh = ((const irr::scene::IMesh*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setShadowMesh'", NULL);
#endif
  {
   self->setShadowMesh(mesh);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setShadowMesh'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: updateShadowVolumes of class  irr::scene::IShadowVolumeSceneNode */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_scene_IShadowVolumeSceneNode_updateShadowVolumes00
static int tolua_NeoGame_irr_scene_IShadowVolumeSceneNode_updateShadowVolumes00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::scene::IShadowVolumeSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::scene::IShadowVolumeSceneNode* self = (irr::scene::IShadowVolumeSceneNode*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'updateShadowVolumes'", NULL);
#endif
  {
   self->updateShadowVolumes();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'updateShadowVolumes'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::video::SLight */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SLight_new00
static int tolua_NeoGame_irr_video_SLight_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::video::SLight",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   irr::video::SLight* tolua_ret = (irr::video::SLight*)  Mtolua_new((irr::video::SLight)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::video::SLight");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::video::SLight */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SLight_new00_local
static int tolua_NeoGame_irr_video_SLight_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::video::SLight",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   irr::video::SLight* tolua_ret = (irr::video::SLight*)  Mtolua_new((irr::video::SLight)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::video::SLight");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: AmbientColor of class  irr::video::SLight */
#ifndef TOLUA_DISABLE_tolua_get_irr__video__SLight_AmbientColor
static int tolua_get_irr__video__SLight_AmbientColor(lua_State* tolua_S)
{
  irr::video::SLight* self = (irr::video::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AmbientColor'",NULL);
#endif
   tolua_pushusertype(tolua_S,(void*)&self->AmbientColor,"irr::video::SColorf");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: AmbientColor of class  irr::video::SLight */
#ifndef TOLUA_DISABLE_tolua_set_irr__video__SLight_AmbientColor
static int tolua_set_irr__video__SLight_AmbientColor(lua_State* tolua_S)
{
  irr::video::SLight* self = (irr::video::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'AmbientColor'",NULL);
  if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::video::SColorf",0,&tolua_err)))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->AmbientColor = *((irr::video::SColorf*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: DiffuseColor of class  irr::video::SLight */
#ifndef TOLUA_DISABLE_tolua_get_irr__video__SLight_DiffuseColor
static int tolua_get_irr__video__SLight_DiffuseColor(lua_State* tolua_S)
{
  irr::video::SLight* self = (irr::video::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DiffuseColor'",NULL);
#endif
   tolua_pushusertype(tolua_S,(void*)&self->DiffuseColor,"irr::video::SColorf");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: DiffuseColor of class  irr::video::SLight */
#ifndef TOLUA_DISABLE_tolua_set_irr__video__SLight_DiffuseColor
static int tolua_set_irr__video__SLight_DiffuseColor(lua_State* tolua_S)
{
  irr::video::SLight* self = (irr::video::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'DiffuseColor'",NULL);
  if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::video::SColorf",0,&tolua_err)))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->DiffuseColor = *((irr::video::SColorf*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: SpecularColor of class  irr::video::SLight */
#ifndef TOLUA_DISABLE_tolua_get_irr__video__SLight_SpecularColor
static int tolua_get_irr__video__SLight_SpecularColor(lua_State* tolua_S)
{
  irr::video::SLight* self = (irr::video::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'SpecularColor'",NULL);
#endif
   tolua_pushusertype(tolua_S,(void*)&self->SpecularColor,"irr::video::SColorf");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: SpecularColor of class  irr::video::SLight */
#ifndef TOLUA_DISABLE_tolua_set_irr__video__SLight_SpecularColor
static int tolua_set_irr__video__SLight_SpecularColor(lua_State* tolua_S)
{
  irr::video::SLight* self = (irr::video::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'SpecularColor'",NULL);
  if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::video::SColorf",0,&tolua_err)))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SpecularColor = *((irr::video::SColorf*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Attenuation of class  irr::video::SLight */
#ifndef TOLUA_DISABLE_tolua_get_irr__video__SLight_Attenuation
static int tolua_get_irr__video__SLight_Attenuation(lua_State* tolua_S)
{
  irr::video::SLight* self = (irr::video::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Attenuation'",NULL);
#endif
   tolua_pushusertype(tolua_S,(void*)&self->Attenuation,"irr::core::vector3d<float>");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Attenuation of class  irr::video::SLight */
#ifndef TOLUA_DISABLE_tolua_set_irr__video__SLight_Attenuation
static int tolua_set_irr__video__SLight_Attenuation(lua_State* tolua_S)
{
  irr::video::SLight* self = (irr::video::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Attenuation'",NULL);
  if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::vector3d<float>",0,&tolua_err)))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Attenuation = *((irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: OuterCone of class  irr::video::SLight */
#ifndef TOLUA_DISABLE_tolua_get_irr__video__SLight_OuterCone
static int tolua_get_irr__video__SLight_OuterCone(lua_State* tolua_S)
{
  irr::video::SLight* self = (irr::video::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'OuterCone'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->OuterCone);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: OuterCone of class  irr::video::SLight */
#ifndef TOLUA_DISABLE_tolua_set_irr__video__SLight_OuterCone
static int tolua_set_irr__video__SLight_OuterCone(lua_State* tolua_S)
{
  irr::video::SLight* self = (irr::video::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'OuterCone'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->OuterCone = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: InnerCone of class  irr::video::SLight */
#ifndef TOLUA_DISABLE_tolua_get_irr__video__SLight_InnerCone
static int tolua_get_irr__video__SLight_InnerCone(lua_State* tolua_S)
{
  irr::video::SLight* self = (irr::video::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'InnerCone'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->InnerCone);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: InnerCone of class  irr::video::SLight */
#ifndef TOLUA_DISABLE_tolua_set_irr__video__SLight_InnerCone
static int tolua_set_irr__video__SLight_InnerCone(lua_State* tolua_S)
{
  irr::video::SLight* self = (irr::video::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'InnerCone'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->InnerCone = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Falloff of class  irr::video::SLight */
#ifndef TOLUA_DISABLE_tolua_get_irr__video__SLight_Falloff
static int tolua_get_irr__video__SLight_Falloff(lua_State* tolua_S)
{
  irr::video::SLight* self = (irr::video::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Falloff'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Falloff);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Falloff of class  irr::video::SLight */
#ifndef TOLUA_DISABLE_tolua_set_irr__video__SLight_Falloff
static int tolua_set_irr__video__SLight_Falloff(lua_State* tolua_S)
{
  irr::video::SLight* self = (irr::video::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Falloff'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Falloff = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Position of class  irr::video::SLight */
#ifndef TOLUA_DISABLE_tolua_get_irr__video__SLight_Position
static int tolua_get_irr__video__SLight_Position(lua_State* tolua_S)
{
  irr::video::SLight* self = (irr::video::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Position'",NULL);
#endif
   tolua_pushusertype(tolua_S,(void*)&self->Position,"irr::core::vector3d<float>");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Position of class  irr::video::SLight */
#ifndef TOLUA_DISABLE_tolua_set_irr__video__SLight_Position
static int tolua_set_irr__video__SLight_Position(lua_State* tolua_S)
{
  irr::video::SLight* self = (irr::video::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Position'",NULL);
  if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::vector3d<float>",0,&tolua_err)))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Position = *((irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Direction of class  irr::video::SLight */
#ifndef TOLUA_DISABLE_tolua_get_irr__video__SLight_Direction
static int tolua_get_irr__video__SLight_Direction(lua_State* tolua_S)
{
  irr::video::SLight* self = (irr::video::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Direction'",NULL);
#endif
   tolua_pushusertype(tolua_S,(void*)&self->Direction,"irr::core::vector3d<float>");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Direction of class  irr::video::SLight */
#ifndef TOLUA_DISABLE_tolua_set_irr__video__SLight_Direction
static int tolua_set_irr__video__SLight_Direction(lua_State* tolua_S)
{
  irr::video::SLight* self = (irr::video::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Direction'",NULL);
  if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::vector3d<float>",0,&tolua_err)))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Direction = *((irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Radius of class  irr::video::SLight */
#ifndef TOLUA_DISABLE_tolua_get_irr__video__SLight_Radius
static int tolua_get_irr__video__SLight_Radius(lua_State* tolua_S)
{
  irr::video::SLight* self = (irr::video::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Radius'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Radius);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Radius of class  irr::video::SLight */
#ifndef TOLUA_DISABLE_tolua_set_irr__video__SLight_Radius
static int tolua_set_irr__video__SLight_Radius(lua_State* tolua_S)
{
  irr::video::SLight* self = (irr::video::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Radius'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Radius = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Type of class  irr::video::SLight */
#ifndef TOLUA_DISABLE_tolua_get_irr__video__SLight_Type
static int tolua_get_irr__video__SLight_Type(lua_State* tolua_S)
{
  irr::video::SLight* self = (irr::video::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Type'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Type);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Type of class  irr::video::SLight */
#ifndef TOLUA_DISABLE_tolua_set_irr__video__SLight_Type
static int tolua_set_irr__video__SLight_Type(lua_State* tolua_S)
{
  irr::video::SLight* self = (irr::video::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Type'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Type = ((irr::video::E_LIGHT_TYPE) (int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: CastShadows of class  irr::video::SLight */
#ifndef TOLUA_DISABLE_tolua_get_irr__video__SLight_CastShadows
static int tolua_get_irr__video__SLight_CastShadows(lua_State* tolua_S)
{
  irr::video::SLight* self = (irr::video::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'CastShadows'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->CastShadows);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: CastShadows of class  irr::video::SLight */
#ifndef TOLUA_DISABLE_tolua_set_irr__video__SLight_CastShadows
static int tolua_set_irr__video__SLight_CastShadows(lua_State* tolua_S)
{
  irr::video::SLight* self = (irr::video::SLight*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'CastShadows'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->CastShadows = ((bool)  tolua_toboolean(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_new00
static int tolua_NeoGame_irr_core_matrix4_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::CMatrix4<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::CMatrix4<float>::eConstructor constructor = ((irr::core::CMatrix4<float>::eConstructor) (int)  tolua_tonumber(tolua_S,2,irr::core::CMatrix4<float>::EM4CONST_IDENTITY));
  {
   irr::core::CMatrix4<float>* tolua_ret = (irr::core::CMatrix4<float>*)  Mtolua_new((irr::core::CMatrix4<float>)(constructor));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::CMatrix4<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_new00_local
static int tolua_NeoGame_irr_core_matrix4_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::CMatrix4<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::CMatrix4<float>::eConstructor constructor = ((irr::core::CMatrix4<float>::eConstructor) (int)  tolua_tonumber(tolua_S,2,irr::core::CMatrix4<float>::EM4CONST_IDENTITY));
  {
   irr::core::CMatrix4<float>* tolua_ret = (irr::core::CMatrix4<float>*)  Mtolua_new((irr::core::CMatrix4<float>)(constructor));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::CMatrix4<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_new01
static int tolua_NeoGame_irr_core_matrix4_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::CMatrix4<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::CMatrix4<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::CMatrix4<float>* other = ((const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,2,0));
  irr::core::CMatrix4<float>::eConstructor constructor = ((irr::core::CMatrix4<float>::eConstructor) (int)  tolua_tonumber(tolua_S,3,irr::core::CMatrix4<float>::EM4CONST_COPY));
  {
   irr::core::CMatrix4<float>* tolua_ret = (irr::core::CMatrix4<float>*)  Mtolua_new((irr::core::CMatrix4<float>)(*other,constructor));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::CMatrix4<float>");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_matrix4_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_new01_local
static int tolua_NeoGame_irr_core_matrix4_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::CMatrix4<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::CMatrix4<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::CMatrix4<float>* other = ((const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,2,0));
  irr::core::CMatrix4<float>::eConstructor constructor = ((irr::core::CMatrix4<float>::eConstructor) (int)  tolua_tonumber(tolua_S,3,irr::core::CMatrix4<float>::EM4CONST_COPY));
  {
   irr::core::CMatrix4<float>* tolua_ret = (irr::core::CMatrix4<float>*)  Mtolua_new((irr::core::CMatrix4<float>)(*other,constructor));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::CMatrix4<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_matrix4_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator&[] of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4__seti00
static int tolua_NeoGame_irr_core_matrix4__seti00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::CMatrix4<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::CMatrix4<float>* self = (irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  unsigned int index = ((unsigned int)  tolua_tonumber(tolua_S,2,0));
  float tolua_value = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator&[]'", NULL);
#endif
  self->operator[](index) =  tolua_value;
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.seti'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator[] of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4__geti00
static int tolua_NeoGame_irr_core_matrix4__geti00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::CMatrix4<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::CMatrix4<float>* self = (irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  unsigned int index = ((unsigned int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator[]'", NULL);
#endif
  {
   float tolua_ret = (float)  self->operator[](index);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.geti'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator[] of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4__geti01
static int tolua_NeoGame_irr_core_matrix4__geti01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::CMatrix4<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::CMatrix4<float>* self = (const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  unsigned int index = ((unsigned int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator[]'", NULL);
#endif
  {
   const float tolua_ret = (const float)  self->operator[](index);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_matrix4__geti00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator== of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4__eq00
static int tolua_NeoGame_irr_core_matrix4__eq00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::CMatrix4<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::CMatrix4<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::CMatrix4<float>* self = (const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::CMatrix4<float>* other = ((const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator=='", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->operator==(*other);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.eq'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator+ of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4__add00
static int tolua_NeoGame_irr_core_matrix4__add00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::CMatrix4<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::CMatrix4<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::CMatrix4<float>* self = (const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::CMatrix4<float>* other = ((const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator+'", NULL);
#endif
  {
   irr::core::CMatrix4<float> tolua_ret = (irr::core::CMatrix4<float>)  self->operator+(*other);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::CMatrix4<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::CMatrix4<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::CMatrix4<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::CMatrix4<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.add'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator- of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4__sub00
static int tolua_NeoGame_irr_core_matrix4__sub00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::CMatrix4<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::CMatrix4<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::CMatrix4<float>* self = (const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::CMatrix4<float>* other = ((const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator-'", NULL);
#endif
  {
   irr::core::CMatrix4<float> tolua_ret = (irr::core::CMatrix4<float>)  self->operator-(*other);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::CMatrix4<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::CMatrix4<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::CMatrix4<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::CMatrix4<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.sub'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setbyproduct of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_setbyproduct00
static int tolua_NeoGame_irr_core_matrix4_setbyproduct00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::CMatrix4<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::CMatrix4<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::CMatrix4<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::CMatrix4<float>* self = (irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::CMatrix4<float>* other_a = ((const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::CMatrix4<float>* other_b = ((const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setbyproduct'", NULL);
#endif
  {
   irr::core::CMatrix4<float>& tolua_ret = (irr::core::CMatrix4<float>&)  self->setbyproduct(*other_a,*other_b);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::CMatrix4<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setbyproduct'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setbyproduct_nocheck of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_setbyproduct_nocheck00
static int tolua_NeoGame_irr_core_matrix4_setbyproduct_nocheck00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::CMatrix4<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::CMatrix4<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::CMatrix4<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::CMatrix4<float>* self = (irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::CMatrix4<float>* other_a = ((const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::CMatrix4<float>* other_b = ((const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setbyproduct_nocheck'", NULL);
#endif
  {
   irr::core::CMatrix4<float>& tolua_ret = (irr::core::CMatrix4<float>&)  self->setbyproduct_nocheck(*other_a,*other_b);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::CMatrix4<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setbyproduct_nocheck'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator* of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4__mul00
static int tolua_NeoGame_irr_core_matrix4__mul00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::CMatrix4<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::CMatrix4<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::CMatrix4<float>* self = (const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::CMatrix4<float>* other = ((const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator*'", NULL);
#endif
  {
   irr::core::CMatrix4<float> tolua_ret = (irr::core::CMatrix4<float>)  self->operator*(*other);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::CMatrix4<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::CMatrix4<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::CMatrix4<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::CMatrix4<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.mul'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator* of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4__mul01
static int tolua_NeoGame_irr_core_matrix4__mul01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::CMatrix4<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::CMatrix4<float>* self = (const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  const float scalar = ((const float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator*'", NULL);
#endif
  {
   irr::core::CMatrix4<float> tolua_ret = (irr::core::CMatrix4<float>)  self->operator*(scalar);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::CMatrix4<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::CMatrix4<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::CMatrix4<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::CMatrix4<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
   tolua_pushnumber(tolua_S,(lua_Number)scalar);
  }
 }
 return 2;
tolua_lerror:
 return tolua_NeoGame_irr_core_matrix4__mul00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: makeIdentity of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_makeIdentity00
static int tolua_NeoGame_irr_core_matrix4_makeIdentity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::CMatrix4<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::CMatrix4<float>* self = (irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'makeIdentity'", NULL);
#endif
  {
   irr::core::CMatrix4<float>& tolua_ret = (irr::core::CMatrix4<float>&)  self->makeIdentity();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::CMatrix4<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'makeIdentity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isIdentity of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_isIdentity00
static int tolua_NeoGame_irr_core_matrix4_isIdentity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::CMatrix4<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::CMatrix4<float>* self = (const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isIdentity'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isIdentity();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isIdentity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isOrthogonal of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_isOrthogonal00
static int tolua_NeoGame_irr_core_matrix4_isOrthogonal00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::CMatrix4<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::CMatrix4<float>* self = (const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isOrthogonal'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isOrthogonal();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isOrthogonal'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isIdentity_integer_base of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_isIdentity_integer_base00
static int tolua_NeoGame_irr_core_matrix4_isIdentity_integer_base00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::CMatrix4<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::CMatrix4<float>* self = (const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isIdentity_integer_base'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isIdentity_integer_base();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isIdentity_integer_base'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTranslation of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_setTranslation00
static int tolua_NeoGame_irr_core_matrix4_setTranslation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::CMatrix4<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::CMatrix4<float>* self = (irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* translation = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTranslation'", NULL);
#endif
  {
   irr::core::CMatrix4<float>& tolua_ret = (irr::core::CMatrix4<float>&)  self->setTranslation(*translation);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::CMatrix4<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTranslation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTranslation of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_getTranslation00
static int tolua_NeoGame_irr_core_matrix4_getTranslation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::CMatrix4<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::CMatrix4<float>* self = (const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTranslation'", NULL);
#endif
  {
   irr::core::vector3d<float> tolua_ret = (irr::core::vector3d<float>)  self->getTranslation();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTranslation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setInverseTranslation of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_setInverseTranslation00
static int tolua_NeoGame_irr_core_matrix4_setInverseTranslation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::CMatrix4<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::CMatrix4<float>* self = (irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* translation = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setInverseTranslation'", NULL);
#endif
  {
   irr::core::CMatrix4<float>& tolua_ret = (irr::core::CMatrix4<float>&)  self->setInverseTranslation(*translation);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::CMatrix4<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setInverseTranslation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setRotationRadians of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_setRotationRadians00
static int tolua_NeoGame_irr_core_matrix4_setRotationRadians00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::CMatrix4<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::CMatrix4<float>* self = (irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* rotation = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setRotationRadians'", NULL);
#endif
  {
   irr::core::CMatrix4<float>& tolua_ret = (irr::core::CMatrix4<float>&)  self->setRotationRadians(*rotation);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::CMatrix4<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setRotationRadians'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setRotationDegrees of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_setRotationDegrees00
static int tolua_NeoGame_irr_core_matrix4_setRotationDegrees00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::CMatrix4<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::CMatrix4<float>* self = (irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* rotation = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setRotationDegrees'", NULL);
#endif
  {
   irr::core::CMatrix4<float>& tolua_ret = (irr::core::CMatrix4<float>&)  self->setRotationDegrees(*rotation);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::CMatrix4<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setRotationDegrees'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getRotationDegrees of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_getRotationDegrees00
static int tolua_NeoGame_irr_core_matrix4_getRotationDegrees00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::CMatrix4<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::CMatrix4<float>* self = (const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getRotationDegrees'", NULL);
#endif
  {
   irr::core::vector3d<float> tolua_ret = (irr::core::vector3d<float>)  self->getRotationDegrees();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRotationDegrees'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setInverseRotationRadians of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_setInverseRotationRadians00
static int tolua_NeoGame_irr_core_matrix4_setInverseRotationRadians00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::CMatrix4<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::CMatrix4<float>* self = (irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* rotation = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setInverseRotationRadians'", NULL);
#endif
  {
   irr::core::CMatrix4<float>& tolua_ret = (irr::core::CMatrix4<float>&)  self->setInverseRotationRadians(*rotation);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::CMatrix4<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setInverseRotationRadians'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setInverseRotationDegrees of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_setInverseRotationDegrees00
static int tolua_NeoGame_irr_core_matrix4_setInverseRotationDegrees00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::CMatrix4<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::CMatrix4<float>* self = (irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* rotation = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setInverseRotationDegrees'", NULL);
#endif
  {
   irr::core::CMatrix4<float>& tolua_ret = (irr::core::CMatrix4<float>&)  self->setInverseRotationDegrees(*rotation);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::CMatrix4<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setInverseRotationDegrees'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setRotationAxisRadians of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_setRotationAxisRadians00
static int tolua_NeoGame_irr_core_matrix4_setRotationAxisRadians00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::CMatrix4<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::CMatrix4<float>* self = (irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  const float angle = ((const float)  tolua_tonumber(tolua_S,2,0));
  const irr::core::vector3d<float>* axis = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setRotationAxisRadians'", NULL);
#endif
  {
   irr::core::CMatrix4<float>& tolua_ret = (irr::core::CMatrix4<float>&)  self->setRotationAxisRadians(angle,*axis);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::CMatrix4<float>");
   tolua_pushnumber(tolua_S,(lua_Number)angle);
  }
 }
 return 2;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setRotationAxisRadians'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setScale of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_setScale00
static int tolua_NeoGame_irr_core_matrix4_setScale00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::CMatrix4<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::CMatrix4<float>* self = (irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* scale = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setScale'", NULL);
#endif
  {
   irr::core::CMatrix4<float>& tolua_ret = (irr::core::CMatrix4<float>&)  self->setScale(*scale);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::CMatrix4<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setScale'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setScale of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_setScale01
static int tolua_NeoGame_irr_core_matrix4_setScale01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::CMatrix4<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::core::CMatrix4<float>* self = (irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  const float scale = ((const float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setScale'", NULL);
#endif
  {
   irr::core::CMatrix4<float>& tolua_ret = (irr::core::CMatrix4<float>&)  self->setScale(scale);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::CMatrix4<float>");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_matrix4_setScale00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getScale of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_getScale00
static int tolua_NeoGame_irr_core_matrix4_getScale00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::CMatrix4<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::CMatrix4<float>* self = (const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getScale'", NULL);
#endif
  {
   irr::core::vector3d<float> tolua_ret = (irr::core::vector3d<float>)  self->getScale();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getScale'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: inverseTranslateVect of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_inverseTranslateVect00
static int tolua_NeoGame_irr_core_matrix4_inverseTranslateVect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::CMatrix4<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::CMatrix4<float>* self = (const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  irr::core::vector3d<float>* vect = ((irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'inverseTranslateVect'", NULL);
#endif
  {
   self->inverseTranslateVect(*vect);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'inverseTranslateVect'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: inverseRotateVect of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_inverseRotateVect00
static int tolua_NeoGame_irr_core_matrix4_inverseRotateVect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::CMatrix4<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::CMatrix4<float>* self = (const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  irr::core::vector3d<float>* vect = ((irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'inverseRotateVect'", NULL);
#endif
  {
   self->inverseRotateVect(*vect);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'inverseRotateVect'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: rotateVect of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_rotateVect00
static int tolua_NeoGame_irr_core_matrix4_rotateVect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::CMatrix4<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::CMatrix4<float>* self = (const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  irr::core::vector3d<float>* vect = ((irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'rotateVect'", NULL);
#endif
  {
   self->rotateVect(*vect);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'rotateVect'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: rotateVect of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_rotateVect01
static int tolua_NeoGame_irr_core_matrix4_rotateVect01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::CMatrix4<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::vector3d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::CMatrix4<float>* self = (const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  irr::core::vector3d<float>* out = ((irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::vector3d<float>* in = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'rotateVect'", NULL);
#endif
  {
   self->rotateVect(*out,*in);
  }
 }
 return 0;
tolua_lerror:
 return tolua_NeoGame_irr_core_matrix4_rotateVect00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: transformVect of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_transformVect00
static int tolua_NeoGame_irr_core_matrix4_transformVect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::CMatrix4<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::CMatrix4<float>* self = (const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  irr::core::vector3d<float>* vect = ((irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'transformVect'", NULL);
#endif
  {
   self->transformVect(*vect);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'transformVect'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: transformVect of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_transformVect01
static int tolua_NeoGame_irr_core_matrix4_transformVect01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::CMatrix4<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::vector3d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::CMatrix4<float>* self = (const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  irr::core::vector3d<float>* out = ((irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::vector3d<float>* in = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'transformVect'", NULL);
#endif
  {
   self->transformVect(*out,*in);
  }
 }
 return 0;
tolua_lerror:
 return tolua_NeoGame_irr_core_matrix4_transformVect00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: translateVect of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_translateVect00
static int tolua_NeoGame_irr_core_matrix4_translateVect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::CMatrix4<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::CMatrix4<float>* self = (const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  irr::core::vector3d<float>* vect = ((irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'translateVect'", NULL);
#endif
  {
   self->translateVect(*vect);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'translateVect'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: transformBox of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_transformBox00
static int tolua_NeoGame_irr_core_matrix4_transformBox00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::CMatrix4<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::aabbox3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::CMatrix4<float>* self = (const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  irr::core::aabbox3d<float>* box = ((irr::core::aabbox3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'transformBox'", NULL);
#endif
  {
   self->transformBox(*box);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'transformBox'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: transformBoxEx of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_transformBoxEx00
static int tolua_NeoGame_irr_core_matrix4_transformBoxEx00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::CMatrix4<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::aabbox3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::CMatrix4<float>* self = (const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  irr::core::aabbox3d<float>* box = ((irr::core::aabbox3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'transformBoxEx'", NULL);
#endif
  {
   self->transformBoxEx(*box);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'transformBoxEx'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: multiplyWith1x4Matrix of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_multiplyWith1x4Matrix00
static int tolua_NeoGame_irr_core_matrix4_multiplyWith1x4Matrix00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::CMatrix4<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::CMatrix4<float>* self = (const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  float matrix = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'multiplyWith1x4Matrix'", NULL);
#endif
  {
   self->multiplyWith1x4Matrix(&matrix);
   tolua_pushnumber(tolua_S,(lua_Number)matrix);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'multiplyWith1x4Matrix'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: makeInverse of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_makeInverse00
static int tolua_NeoGame_irr_core_matrix4_makeInverse00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::CMatrix4<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::CMatrix4<float>* self = (irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'makeInverse'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->makeInverse();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'makeInverse'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getInversePrimitive of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_getInversePrimitive00
static int tolua_NeoGame_irr_core_matrix4_getInversePrimitive00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::CMatrix4<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::CMatrix4<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::CMatrix4<float>* self = (const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  irr::core::CMatrix4<float>* out = ((irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getInversePrimitive'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->getInversePrimitive(*out);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getInversePrimitive'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getInverse of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_getInverse00
static int tolua_NeoGame_irr_core_matrix4_getInverse00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::CMatrix4<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::CMatrix4<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::CMatrix4<float>* self = (const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  irr::core::CMatrix4<float>* out = ((irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getInverse'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->getInverse(*out);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getInverse'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: buildProjectionMatrixPerspectiveFovRH of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_buildProjectionMatrixPerspectiveFovRH00
static int tolua_NeoGame_irr_core_matrix4_buildProjectionMatrixPerspectiveFovRH00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::CMatrix4<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::CMatrix4<float>* self = (irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  float fieldOfViewRadians = ((float)  tolua_tonumber(tolua_S,2,0));
  float aspectRatio = ((float)  tolua_tonumber(tolua_S,3,0));
  float zNear = ((float)  tolua_tonumber(tolua_S,4,0));
  float zFar = ((float)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'buildProjectionMatrixPerspectiveFovRH'", NULL);
#endif
  {
   irr::core::CMatrix4<float>& tolua_ret = (irr::core::CMatrix4<float>&)  self->buildProjectionMatrixPerspectiveFovRH(fieldOfViewRadians,aspectRatio,zNear,zFar);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::CMatrix4<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'buildProjectionMatrixPerspectiveFovRH'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: buildProjectionMatrixPerspectiveFovLH of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_buildProjectionMatrixPerspectiveFovLH00
static int tolua_NeoGame_irr_core_matrix4_buildProjectionMatrixPerspectiveFovLH00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::CMatrix4<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::CMatrix4<float>* self = (irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  float fieldOfViewRadians = ((float)  tolua_tonumber(tolua_S,2,0));
  float aspectRatio = ((float)  tolua_tonumber(tolua_S,3,0));
  float zNear = ((float)  tolua_tonumber(tolua_S,4,0));
  float zFar = ((float)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'buildProjectionMatrixPerspectiveFovLH'", NULL);
#endif
  {
   irr::core::CMatrix4<float>& tolua_ret = (irr::core::CMatrix4<float>&)  self->buildProjectionMatrixPerspectiveFovLH(fieldOfViewRadians,aspectRatio,zNear,zFar);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::CMatrix4<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'buildProjectionMatrixPerspectiveFovLH'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: buildProjectionMatrixPerspectiveFovInfinityLH of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_buildProjectionMatrixPerspectiveFovInfinityLH00
static int tolua_NeoGame_irr_core_matrix4_buildProjectionMatrixPerspectiveFovInfinityLH00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::CMatrix4<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::CMatrix4<float>* self = (irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  float fieldOfViewRadians = ((float)  tolua_tonumber(tolua_S,2,0));
  float aspectRatio = ((float)  tolua_tonumber(tolua_S,3,0));
  float zNear = ((float)  tolua_tonumber(tolua_S,4,0));
  float epsilon = ((float)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'buildProjectionMatrixPerspectiveFovInfinityLH'", NULL);
#endif
  {
   irr::core::CMatrix4<float>& tolua_ret = (irr::core::CMatrix4<float>&)  self->buildProjectionMatrixPerspectiveFovInfinityLH(fieldOfViewRadians,aspectRatio,zNear,epsilon);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::CMatrix4<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'buildProjectionMatrixPerspectiveFovInfinityLH'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: buildProjectionMatrixPerspectiveRH of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_buildProjectionMatrixPerspectiveRH00
static int tolua_NeoGame_irr_core_matrix4_buildProjectionMatrixPerspectiveRH00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::CMatrix4<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::CMatrix4<float>* self = (irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  float widthOfViewVolume = ((float)  tolua_tonumber(tolua_S,2,0));
  float heightOfViewVolume = ((float)  tolua_tonumber(tolua_S,3,0));
  float zNear = ((float)  tolua_tonumber(tolua_S,4,0));
  float zFar = ((float)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'buildProjectionMatrixPerspectiveRH'", NULL);
#endif
  {
   irr::core::CMatrix4<float>& tolua_ret = (irr::core::CMatrix4<float>&)  self->buildProjectionMatrixPerspectiveRH(widthOfViewVolume,heightOfViewVolume,zNear,zFar);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::CMatrix4<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'buildProjectionMatrixPerspectiveRH'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: buildProjectionMatrixPerspectiveLH of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_buildProjectionMatrixPerspectiveLH00
static int tolua_NeoGame_irr_core_matrix4_buildProjectionMatrixPerspectiveLH00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::CMatrix4<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::CMatrix4<float>* self = (irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  float widthOfViewVolume = ((float)  tolua_tonumber(tolua_S,2,0));
  float heightOfViewVolume = ((float)  tolua_tonumber(tolua_S,3,0));
  float zNear = ((float)  tolua_tonumber(tolua_S,4,0));
  float zFar = ((float)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'buildProjectionMatrixPerspectiveLH'", NULL);
#endif
  {
   irr::core::CMatrix4<float>& tolua_ret = (irr::core::CMatrix4<float>&)  self->buildProjectionMatrixPerspectiveLH(widthOfViewVolume,heightOfViewVolume,zNear,zFar);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::CMatrix4<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'buildProjectionMatrixPerspectiveLH'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: buildProjectionMatrixOrthoLH of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_buildProjectionMatrixOrthoLH00
static int tolua_NeoGame_irr_core_matrix4_buildProjectionMatrixOrthoLH00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::CMatrix4<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::CMatrix4<float>* self = (irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  float widthOfViewVolume = ((float)  tolua_tonumber(tolua_S,2,0));
  float heightOfViewVolume = ((float)  tolua_tonumber(tolua_S,3,0));
  float zNear = ((float)  tolua_tonumber(tolua_S,4,0));
  float zFar = ((float)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'buildProjectionMatrixOrthoLH'", NULL);
#endif
  {
   irr::core::CMatrix4<float>& tolua_ret = (irr::core::CMatrix4<float>&)  self->buildProjectionMatrixOrthoLH(widthOfViewVolume,heightOfViewVolume,zNear,zFar);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::CMatrix4<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'buildProjectionMatrixOrthoLH'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: buildProjectionMatrixOrthoRH of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_buildProjectionMatrixOrthoRH00
static int tolua_NeoGame_irr_core_matrix4_buildProjectionMatrixOrthoRH00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::CMatrix4<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::CMatrix4<float>* self = (irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  float widthOfViewVolume = ((float)  tolua_tonumber(tolua_S,2,0));
  float heightOfViewVolume = ((float)  tolua_tonumber(tolua_S,3,0));
  float zNear = ((float)  tolua_tonumber(tolua_S,4,0));
  float zFar = ((float)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'buildProjectionMatrixOrthoRH'", NULL);
#endif
  {
   irr::core::CMatrix4<float>& tolua_ret = (irr::core::CMatrix4<float>&)  self->buildProjectionMatrixOrthoRH(widthOfViewVolume,heightOfViewVolume,zNear,zFar);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::CMatrix4<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'buildProjectionMatrixOrthoRH'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: buildCameraLookAtMatrixLH of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_buildCameraLookAtMatrixLH00
static int tolua_NeoGame_irr_core_matrix4_buildCameraLookAtMatrixLH00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::CMatrix4<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::CMatrix4<float>* self = (irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* position = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::vector3d<float>* target = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,3,0));
  const irr::core::vector3d<float>* upVector = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'buildCameraLookAtMatrixLH'", NULL);
#endif
  {
   irr::core::CMatrix4<float>& tolua_ret = (irr::core::CMatrix4<float>&)  self->buildCameraLookAtMatrixLH(*position,*target,*upVector);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::CMatrix4<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'buildCameraLookAtMatrixLH'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: buildCameraLookAtMatrixRH of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_buildCameraLookAtMatrixRH00
static int tolua_NeoGame_irr_core_matrix4_buildCameraLookAtMatrixRH00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::CMatrix4<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::CMatrix4<float>* self = (irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* position = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::vector3d<float>* target = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,3,0));
  const irr::core::vector3d<float>* upVector = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'buildCameraLookAtMatrixRH'", NULL);
#endif
  {
   irr::core::CMatrix4<float>& tolua_ret = (irr::core::CMatrix4<float>&)  self->buildCameraLookAtMatrixRH(*position,*target,*upVector);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::CMatrix4<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'buildCameraLookAtMatrixRH'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: interpolate of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_interpolate00
static int tolua_NeoGame_irr_core_matrix4_interpolate00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::CMatrix4<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::CMatrix4<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::CMatrix4<float>* self = (const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::CMatrix4<float>* b = ((const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,2,0));
  float time = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'interpolate'", NULL);
#endif
  {
   irr::core::CMatrix4<float> tolua_ret = (irr::core::CMatrix4<float>)  self->interpolate(*b,time);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::CMatrix4<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::CMatrix4<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::CMatrix4<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::CMatrix4<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'interpolate'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTransposed of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_getTransposed00
static int tolua_NeoGame_irr_core_matrix4_getTransposed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::CMatrix4<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::CMatrix4<float>* self = (const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTransposed'", NULL);
#endif
  {
   irr::core::CMatrix4<float> tolua_ret = (irr::core::CMatrix4<float>)  self->getTransposed();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::CMatrix4<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::CMatrix4<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::CMatrix4<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::CMatrix4<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTransposed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTransposed of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_getTransposed01
static int tolua_NeoGame_irr_core_matrix4_getTransposed01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::CMatrix4<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::CMatrix4<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::CMatrix4<float>* self = (const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  irr::core::CMatrix4<float>* dest = ((irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTransposed'", NULL);
#endif
  {
   self->getTransposed(*dest);
  }
 }
 return 0;
tolua_lerror:
 return tolua_NeoGame_irr_core_matrix4_getTransposed00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: buildRotateFromTo of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_buildRotateFromTo00
static int tolua_NeoGame_irr_core_matrix4_buildRotateFromTo00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::CMatrix4<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::CMatrix4<float>* self = (irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* from = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::vector3d<float>* to = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'buildRotateFromTo'", NULL);
#endif
  {
   irr::core::CMatrix4<float>& tolua_ret = (irr::core::CMatrix4<float>&)  self->buildRotateFromTo(*from,*to);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::CMatrix4<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'buildRotateFromTo'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setRotationCenter of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_setRotationCenter00
static int tolua_NeoGame_irr_core_matrix4_setRotationCenter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::CMatrix4<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::CMatrix4<float>* self = (irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* center = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::vector3d<float>* translate = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setRotationCenter'", NULL);
#endif
  {
   self->setRotationCenter(*center,*translate);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setRotationCenter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: buildAxisAlignedBillboard of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_buildAxisAlignedBillboard00
static int tolua_NeoGame_irr_core_matrix4_buildAxisAlignedBillboard00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::CMatrix4<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,6,&tolua_err) || !tolua_isusertype(tolua_S,6,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::CMatrix4<float>* self = (irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* camPos = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::vector3d<float>* center = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,3,0));
  const irr::core::vector3d<float>* translation = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,4,0));
  const irr::core::vector3d<float>* axis = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,5,0));
  const irr::core::vector3d<float>* from = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,6,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'buildAxisAlignedBillboard'", NULL);
#endif
  {
   self->buildAxisAlignedBillboard(*camPos,*center,*translation,*axis,*from);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'buildAxisAlignedBillboard'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: buildTextureTransform of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_buildTextureTransform00
static int tolua_NeoGame_irr_core_matrix4_buildTextureTransform00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::CMatrix4<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector2df",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const irr::core::vector2df",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"const irr::core::vector2df",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::CMatrix4<float>* self = (irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  float rotateRad = ((float)  tolua_tonumber(tolua_S,2,0));
  const irr::core::vector2df* rotatecenter = ((const irr::core::vector2df*)  tolua_tousertype(tolua_S,3,0));
  const irr::core::vector2df* translate = ((const irr::core::vector2df*)  tolua_tousertype(tolua_S,4,0));
  const irr::core::vector2df* scale = ((const irr::core::vector2df*)  tolua_tousertype(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'buildTextureTransform'", NULL);
#endif
  {
   irr::core::CMatrix4<float>& tolua_ret = (irr::core::CMatrix4<float>&)  self->buildTextureTransform(rotateRad,*rotatecenter,*translate,*scale);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::CMatrix4<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'buildTextureTransform'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTextureRotationCenter of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_setTextureRotationCenter00
static int tolua_NeoGame_irr_core_matrix4_setTextureRotationCenter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::CMatrix4<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::CMatrix4<float>* self = (irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  float radAngle = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTextureRotationCenter'", NULL);
#endif
  {
   irr::core::CMatrix4<float>& tolua_ret = (irr::core::CMatrix4<float>&)  self->setTextureRotationCenter(radAngle);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::CMatrix4<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTextureRotationCenter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTextureTranslate of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_setTextureTranslate00
static int tolua_NeoGame_irr_core_matrix4_setTextureTranslate00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::CMatrix4<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::CMatrix4<float>* self = (irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  float x = ((float)  tolua_tonumber(tolua_S,2,0));
  float y = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTextureTranslate'", NULL);
#endif
  {
   irr::core::CMatrix4<float>& tolua_ret = (irr::core::CMatrix4<float>&)  self->setTextureTranslate(x,y);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::CMatrix4<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTextureTranslate'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTextureTranslateTransposed of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_setTextureTranslateTransposed00
static int tolua_NeoGame_irr_core_matrix4_setTextureTranslateTransposed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::CMatrix4<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::CMatrix4<float>* self = (irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  float x = ((float)  tolua_tonumber(tolua_S,2,0));
  float y = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTextureTranslateTransposed'", NULL);
#endif
  {
   irr::core::CMatrix4<float>& tolua_ret = (irr::core::CMatrix4<float>&)  self->setTextureTranslateTransposed(x,y);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::CMatrix4<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTextureTranslateTransposed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTextureScale of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_setTextureScale00
static int tolua_NeoGame_irr_core_matrix4_setTextureScale00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::CMatrix4<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::CMatrix4<float>* self = (irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  float sx = ((float)  tolua_tonumber(tolua_S,2,0));
  float sy = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTextureScale'", NULL);
#endif
  {
   irr::core::CMatrix4<float>& tolua_ret = (irr::core::CMatrix4<float>&)  self->setTextureScale(sx,sy);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::CMatrix4<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTextureScale'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTextureScaleCenter of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_setTextureScaleCenter00
static int tolua_NeoGame_irr_core_matrix4_setTextureScaleCenter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::CMatrix4<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::CMatrix4<float>* self = (irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  float sx = ((float)  tolua_tonumber(tolua_S,2,0));
  float sy = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTextureScaleCenter'", NULL);
#endif
  {
   irr::core::CMatrix4<float>& tolua_ret = (irr::core::CMatrix4<float>&)  self->setTextureScaleCenter(sx,sy);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::CMatrix4<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTextureScaleCenter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setM of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_setM00
static int tolua_NeoGame_irr_core_matrix4_setM00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::CMatrix4<float>",0,&tolua_err) ||
     !tolua_istable(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::CMatrix4<float>* self = (irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  float data[16];
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setM'", NULL);
#endif
  {
#ifndef TOLUA_RELEASE
   if (!tolua_isnumberarray(tolua_S,2,16,0,&tolua_err))
    goto tolua_lerror;
   else
#endif
   {
    int i;
    for(i=0; i<16;i++)
    data[i] = ((float)  tolua_tofieldnumber(tolua_S,2,i+1,0));
   }
  }
  {
   irr::core::CMatrix4<float>& tolua_ret = (irr::core::CMatrix4<float>&)  self->setM(data);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::CMatrix4<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setM'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setDefinitelyIdentityMatrix of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_setDefinitelyIdentityMatrix00
static int tolua_NeoGame_irr_core_matrix4_setDefinitelyIdentityMatrix00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::CMatrix4<float>",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::CMatrix4<float>* self = (irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  bool isDefinitelyIdentityMatrix = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setDefinitelyIdentityMatrix'", NULL);
#endif
  {
   self->setDefinitelyIdentityMatrix(isDefinitelyIdentityMatrix);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setDefinitelyIdentityMatrix'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDefinitelyIdentityMatrix of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_getDefinitelyIdentityMatrix00
static int tolua_NeoGame_irr_core_matrix4_getDefinitelyIdentityMatrix00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::CMatrix4<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::CMatrix4<float>* self = (const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDefinitelyIdentityMatrix'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->getDefinitelyIdentityMatrix();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDefinitelyIdentityMatrix'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: equals of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_equals00
static int tolua_NeoGame_irr_core_matrix4_equals00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::CMatrix4<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::CMatrix4<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::CMatrix4<float>* self = (const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::CMatrix4<float>* other = ((const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'equals'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->equals(*other);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'equals'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: equals of class  irr::core::CMatrix4<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_matrix4_equals01
static int tolua_NeoGame_irr_core_matrix4_equals01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::CMatrix4<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::CMatrix4<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::CMatrix4<float>* self = (const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::CMatrix4<float>* other = ((const irr::core::CMatrix4<float>*)  tolua_tousertype(tolua_S,2,0));
  const float tolerance = ((const float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'equals'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->equals(*other,tolerance);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_matrix4_equals00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* function: irr::video::RGBA16 */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_RGBA1600
static int tolua_NeoGame_irr_video_RGBA1600(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  int r = ((int)  tolua_tonumber(tolua_S,1,0));
  int g = ((int)  tolua_tonumber(tolua_S,2,0));
  int b = ((int)  tolua_tonumber(tolua_S,3,0));
  int a = ((int)  tolua_tonumber(tolua_S,4,0xFF));
  {
   unsigned short tolua_ret = (unsigned short)  irr::video::RGBA16(r,g,b,a);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RGBA16'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: irr::video::RGB16 */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_RGB1600
static int tolua_NeoGame_irr_video_RGB1600(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  int r = ((int)  tolua_tonumber(tolua_S,1,0));
  int g = ((int)  tolua_tonumber(tolua_S,2,0));
  int b = ((int)  tolua_tonumber(tolua_S,3,0));
  {
   unsigned short tolua_ret = (unsigned short)  irr::video::RGB16(r,g,b);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RGB16'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: irr::video::RGB16from16 */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_RGB16from1600
static int tolua_NeoGame_irr_video_RGB16from1600(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  unsigned short r = ((unsigned short)  tolua_tonumber(tolua_S,1,0));
  unsigned short g = ((unsigned short)  tolua_tonumber(tolua_S,2,0));
  unsigned short b = ((unsigned short)  tolua_tonumber(tolua_S,3,0));
  {
   unsigned short tolua_ret = (unsigned short)  irr::video::RGB16from16(r,g,b);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RGB16from16'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: irr::video::X8R8G8B8toA1R5G5B5 */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_X8R8G8B8toA1R5G5B500
static int tolua_NeoGame_irr_video_X8R8G8B8toA1R5G5B500(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  int color = ((int)  tolua_tonumber(tolua_S,1,0));
  {
   unsigned short tolua_ret = (unsigned short)  irr::video::X8R8G8B8toA1R5G5B5(color);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'X8R8G8B8toA1R5G5B5'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: irr::video::A8R8G8B8toA1R5G5B5 */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_A8R8G8B8toA1R5G5B500
static int tolua_NeoGame_irr_video_A8R8G8B8toA1R5G5B500(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  int color = ((int)  tolua_tonumber(tolua_S,1,0));
  {
   unsigned short tolua_ret = (unsigned short)  irr::video::A8R8G8B8toA1R5G5B5(color);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'A8R8G8B8toA1R5G5B5'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: irr::video::A8R8G8B8toR5G6B5 */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_A8R8G8B8toR5G6B500
static int tolua_NeoGame_irr_video_A8R8G8B8toR5G6B500(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  int color = ((int)  tolua_tonumber(tolua_S,1,0));
  {
   unsigned short tolua_ret = (unsigned short)  irr::video::A8R8G8B8toR5G6B5(color);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'A8R8G8B8toR5G6B5'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: irr::video::A1R5G5B5toA8R8G8B8 */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_A1R5G5B5toA8R8G8B800
static int tolua_NeoGame_irr_video_A1R5G5B5toA8R8G8B800(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  unsigned short color = ((unsigned short)  tolua_tonumber(tolua_S,1,0));
  {
   int tolua_ret = (int)  irr::video::A1R5G5B5toA8R8G8B8(color);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'A1R5G5B5toA8R8G8B8'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: irr::video::R5G6B5toA8R8G8B8 */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_R5G6B5toA8R8G8B800
static int tolua_NeoGame_irr_video_R5G6B5toA8R8G8B800(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  unsigned short color = ((unsigned short)  tolua_tonumber(tolua_S,1,0));
  {
   int tolua_ret = (int)  irr::video::R5G6B5toA8R8G8B8(color);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'R5G6B5toA8R8G8B8'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: irr::video::R5G6B5toA1R5G5B5 */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_R5G6B5toA1R5G5B500
static int tolua_NeoGame_irr_video_R5G6B5toA1R5G5B500(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  unsigned short color = ((unsigned short)  tolua_tonumber(tolua_S,1,0));
  {
   unsigned short tolua_ret = (unsigned short)  irr::video::R5G6B5toA1R5G5B5(color);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'R5G6B5toA1R5G5B5'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: irr::video::A1R5G5B5toR5G6B5 */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_A1R5G5B5toR5G6B500
static int tolua_NeoGame_irr_video_A1R5G5B5toR5G6B500(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  unsigned short color = ((unsigned short)  tolua_tonumber(tolua_S,1,0));
  {
   unsigned short tolua_ret = (unsigned short)  irr::video::A1R5G5B5toR5G6B5(color);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'A1R5G5B5toR5G6B5'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: irr::video::getAlpha */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_getAlpha00
static int tolua_NeoGame_irr_video_getAlpha00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  unsigned short color = ((unsigned short)  tolua_tonumber(tolua_S,1,0));
  {
   int tolua_ret = (int)  irr::video::getAlpha(color);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAlpha'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: irr::video::getRed */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_getRed00
static int tolua_NeoGame_irr_video_getRed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  unsigned short color = ((unsigned short)  tolua_tonumber(tolua_S,1,0));
  {
   int tolua_ret = (int)  irr::video::getRed(color);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: irr::video::getGreen */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_getGreen00
static int tolua_NeoGame_irr_video_getGreen00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  unsigned short color = ((unsigned short)  tolua_tonumber(tolua_S,1,0));
  {
   int tolua_ret = (int)  irr::video::getGreen(color);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGreen'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: irr::video::getBlue */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_getBlue00
static int tolua_NeoGame_irr_video_getBlue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  unsigned short color = ((unsigned short)  tolua_tonumber(tolua_S,1,0));
  {
   int tolua_ret = (int)  irr::video::getBlue(color);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getBlue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* function: irr::video::getAverage */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_getAverage00
static int tolua_NeoGame_irr_video_getAverage00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isnumber(tolua_S,1,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  signed short color = ((signed short)  tolua_tonumber(tolua_S,1,0));
  {
   int tolua_ret = (int)  irr::video::getAverage(color);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAverage'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::video::SColor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColor_new00
static int tolua_NeoGame_irr_video_SColor_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::video::SColor",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   irr::video::SColor* tolua_ret = (irr::video::SColor*)  Mtolua_new((irr::video::SColor)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::video::SColor");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::video::SColor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColor_new00_local
static int tolua_NeoGame_irr_video_SColor_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::video::SColor",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   irr::video::SColor* tolua_ret = (irr::video::SColor*)  Mtolua_new((irr::video::SColor)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::video::SColor");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::video::SColor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColor_new01
static int tolua_NeoGame_irr_video_SColor_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::video::SColor",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  int a = ((int)  tolua_tonumber(tolua_S,2,0));
  int r = ((int)  tolua_tonumber(tolua_S,3,0));
  int g = ((int)  tolua_tonumber(tolua_S,4,0));
  int b = ((int)  tolua_tonumber(tolua_S,5,0));
  {
   irr::video::SColor* tolua_ret = (irr::video::SColor*)  Mtolua_new((irr::video::SColor)(a,r,g,b));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::video::SColor");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_video_SColor_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::video::SColor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColor_new01_local
static int tolua_NeoGame_irr_video_SColor_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::video::SColor",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  int a = ((int)  tolua_tonumber(tolua_S,2,0));
  int r = ((int)  tolua_tonumber(tolua_S,3,0));
  int g = ((int)  tolua_tonumber(tolua_S,4,0));
  int b = ((int)  tolua_tonumber(tolua_S,5,0));
  {
   irr::video::SColor* tolua_ret = (irr::video::SColor*)  Mtolua_new((irr::video::SColor)(a,r,g,b));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::video::SColor");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_video_SColor_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::video::SColor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColor_new02
static int tolua_NeoGame_irr_video_SColor_new02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::video::SColor",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  int clr = ((int)  tolua_tonumber(tolua_S,2,0));
  {
   irr::video::SColor* tolua_ret = (irr::video::SColor*)  Mtolua_new((irr::video::SColor)(clr));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::video::SColor");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_video_SColor_new01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::video::SColor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColor_new02_local
static int tolua_NeoGame_irr_video_SColor_new02_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::video::SColor",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  int clr = ((int)  tolua_tonumber(tolua_S,2,0));
  {
   irr::video::SColor* tolua_ret = (irr::video::SColor*)  Mtolua_new((irr::video::SColor)(clr));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::video::SColor");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_video_SColor_new01_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAlpha of class  irr::video::SColor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColor_getAlpha00
static int tolua_NeoGame_irr_video_SColor_getAlpha00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::video::SColor",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::video::SColor* self = (const irr::video::SColor*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAlpha'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getAlpha();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAlpha'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getRed of class  irr::video::SColor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColor_getRed00
static int tolua_NeoGame_irr_video_SColor_getRed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::video::SColor",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::video::SColor* self = (const irr::video::SColor*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getRed'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getRed();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGreen of class  irr::video::SColor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColor_getGreen00
static int tolua_NeoGame_irr_video_SColor_getGreen00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::video::SColor",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::video::SColor* self = (const irr::video::SColor*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGreen'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getGreen();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGreen'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getBlue of class  irr::video::SColor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColor_getBlue00
static int tolua_NeoGame_irr_video_SColor_getBlue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::video::SColor",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::video::SColor* self = (const irr::video::SColor*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getBlue'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getBlue();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getBlue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getLightness of class  irr::video::SColor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColor_getLightness00
static int tolua_NeoGame_irr_video_SColor_getLightness00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::video::SColor",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::video::SColor* self = (const irr::video::SColor*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getLightness'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getLightness();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLightness'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getLuminance of class  irr::video::SColor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColor_getLuminance00
static int tolua_NeoGame_irr_video_SColor_getLuminance00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::video::SColor",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::video::SColor* self = (const irr::video::SColor*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getLuminance'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getLuminance();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLuminance'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAverage of class  irr::video::SColor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColor_getAverage00
static int tolua_NeoGame_irr_video_SColor_getAverage00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::video::SColor",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::video::SColor* self = (const irr::video::SColor*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAverage'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getAverage();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAverage'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAlpha of class  irr::video::SColor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColor_setAlpha00
static int tolua_NeoGame_irr_video_SColor_setAlpha00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::video::SColor",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::video::SColor* self = (irr::video::SColor*)  tolua_tousertype(tolua_S,1,0);
  int a = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAlpha'", NULL);
#endif
  {
   self->setAlpha(a);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAlpha'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setRed of class  irr::video::SColor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColor_setRed00
static int tolua_NeoGame_irr_video_SColor_setRed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::video::SColor",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::video::SColor* self = (irr::video::SColor*)  tolua_tousertype(tolua_S,1,0);
  int r = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setRed'", NULL);
#endif
  {
   self->setRed(r);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setRed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setGreen of class  irr::video::SColor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColor_setGreen00
static int tolua_NeoGame_irr_video_SColor_setGreen00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::video::SColor",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::video::SColor* self = (irr::video::SColor*)  tolua_tousertype(tolua_S,1,0);
  int g = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setGreen'", NULL);
#endif
  {
   self->setGreen(g);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setGreen'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setBlue of class  irr::video::SColor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColor_setBlue00
static int tolua_NeoGame_irr_video_SColor_setBlue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::video::SColor",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::video::SColor* self = (irr::video::SColor*)  tolua_tousertype(tolua_S,1,0);
  int b = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setBlue'", NULL);
#endif
  {
   self->setBlue(b);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setBlue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: toA1R5G5B5 of class  irr::video::SColor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColor_toA1R5G5B500
static int tolua_NeoGame_irr_video_SColor_toA1R5G5B500(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::video::SColor",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::video::SColor* self = (const irr::video::SColor*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'toA1R5G5B5'", NULL);
#endif
  {
   unsigned short tolua_ret = (unsigned short)  self->toA1R5G5B5();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'toA1R5G5B5'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: toOpenGLColor of class  irr::video::SColor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColor_toOpenGLColor00
static int tolua_NeoGame_irr_video_SColor_toOpenGLColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::video::SColor",0,&tolua_err) ||
     !tolua_isstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::video::SColor* self = (const irr::video::SColor*)  tolua_tousertype(tolua_S,1,0);
  unsigned char* dest = ((unsigned char*)  tolua_tostring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'toOpenGLColor'", NULL);
#endif
  {
   self->toOpenGLColor(dest);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'toOpenGLColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  irr::video::SColor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColor_set00
static int tolua_NeoGame_irr_video_SColor_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::video::SColor",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::video::SColor* self = (irr::video::SColor*)  tolua_tousertype(tolua_S,1,0);
  int a = ((int)  tolua_tonumber(tolua_S,2,0));
  int r = ((int)  tolua_tonumber(tolua_S,3,0));
  int g = ((int)  tolua_tonumber(tolua_S,4,0));
  int b = ((int)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'", NULL);
#endif
  {
   self->set(a,r,g,b);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  irr::video::SColor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColor_set01
static int tolua_NeoGame_irr_video_SColor_set01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::video::SColor",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::video::SColor* self = (irr::video::SColor*)  tolua_tousertype(tolua_S,1,0);
  int col = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'", NULL);
#endif
  {
   self->set(col);
  }
 }
 return 0;
tolua_lerror:
 return tolua_NeoGame_irr_video_SColor_set00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator== of class  irr::video::SColor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColor__eq00
static int tolua_NeoGame_irr_video_SColor__eq00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::video::SColor",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::video::SColor* self = (const irr::video::SColor*)  tolua_tousertype(tolua_S,1,0);
  const irr::video::SColor* other = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator=='", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->operator==(*other);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.eq'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator< of class  irr::video::SColor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColor__lt00
static int tolua_NeoGame_irr_video_SColor__lt00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::video::SColor",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::video::SColor* self = (const irr::video::SColor*)  tolua_tousertype(tolua_S,1,0);
  const irr::video::SColor* other = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator<'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->operator<(*other);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.lt'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator+ of class  irr::video::SColor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColor__add00
static int tolua_NeoGame_irr_video_SColor__add00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::video::SColor",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::video::SColor* self = (const irr::video::SColor*)  tolua_tousertype(tolua_S,1,0);
  const irr::video::SColor* other = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator+'", NULL);
#endif
  {
   irr::video::SColor tolua_ret = (irr::video::SColor)  self->operator+(*other);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::video::SColor)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::video::SColor");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::video::SColor));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::video::SColor");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.add'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getInterpolated of class  irr::video::SColor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColor_getInterpolated00
static int tolua_NeoGame_irr_video_SColor_getInterpolated00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::video::SColor",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::video::SColor* self = (const irr::video::SColor*)  tolua_tousertype(tolua_S,1,0);
  const irr::video::SColor* other = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,2,0));
  float d = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getInterpolated'", NULL);
#endif
  {
   irr::video::SColor tolua_ret = (irr::video::SColor)  self->getInterpolated(*other,d);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::video::SColor)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::video::SColor");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::video::SColor));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::video::SColor");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getInterpolated'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getInterpolated_quadratic of class  irr::video::SColor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColor_getInterpolated_quadratic00
static int tolua_NeoGame_irr_video_SColor_getInterpolated_quadratic00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::video::SColor",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::video::SColor",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::video::SColor* self = (const irr::video::SColor*)  tolua_tousertype(tolua_S,1,0);
  const irr::video::SColor* c1 = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,2,0));
  const irr::video::SColor* c2 = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,3,0));
  float d = ((float)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getInterpolated_quadratic'", NULL);
#endif
  {
   irr::video::SColor tolua_ret = (irr::video::SColor)  self->getInterpolated_quadratic(*c1,*c2,d);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::video::SColor)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::video::SColor");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::video::SColor));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::video::SColor");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getInterpolated_quadratic'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setData of class  irr::video::SColor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColor_setData00
static int tolua_NeoGame_irr_video_SColor_setData00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::video::SColor",0,&tolua_err) ||
     !tolua_isuserdata(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::video::SColor* self = (irr::video::SColor*)  tolua_tousertype(tolua_S,1,0);
  const void* data = ((const void*)  tolua_touserdata(tolua_S,2,0));
  irr::video::ECOLOR_FORMAT format = ((irr::video::ECOLOR_FORMAT) (int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setData'", NULL);
#endif
  {
   self->setData(data,format);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setData'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getData of class  irr::video::SColor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColor_getData00
static int tolua_NeoGame_irr_video_SColor_getData00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::video::SColor",0,&tolua_err) ||
     !tolua_isuserdata(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::video::SColor* self = (irr::video::SColor*)  tolua_tousertype(tolua_S,1,0);
  void* data = ((void*)  tolua_touserdata(tolua_S,2,0));
  irr::video::ECOLOR_FORMAT format = ((irr::video::ECOLOR_FORMAT) (int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getData'", NULL);
#endif
  {
   self->getData(data,format);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getData'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: color of class  irr::video::SColor */
#ifndef TOLUA_DISABLE_tolua_get_irr__video__SColor_color
static int tolua_get_irr__video__SColor_color(lua_State* tolua_S)
{
  irr::video::SColor* self = (irr::video::SColor*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'color'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->color);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: color of class  irr::video::SColor */
#ifndef TOLUA_DISABLE_tolua_set_irr__video__SColor_color
static int tolua_set_irr__video__SColor_color(lua_State* tolua_S)
{
  irr::video::SColor* self = (irr::video::SColor*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'color'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->color = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::video::SColorf */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColorf_new00
static int tolua_NeoGame_irr_video_SColorf_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::video::SColorf",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   irr::video::SColorf* tolua_ret = (irr::video::SColorf*)  Mtolua_new((irr::video::SColorf)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::video::SColorf");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::video::SColorf */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColorf_new00_local
static int tolua_NeoGame_irr_video_SColorf_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::video::SColorf",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   irr::video::SColorf* tolua_ret = (irr::video::SColorf*)  Mtolua_new((irr::video::SColorf)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::video::SColorf");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::video::SColorf */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColorf_new01
static int tolua_NeoGame_irr_video_SColorf_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::video::SColorf",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  float r = ((float)  tolua_tonumber(tolua_S,2,0));
  float g = ((float)  tolua_tonumber(tolua_S,3,0));
  float b = ((float)  tolua_tonumber(tolua_S,4,0));
  float a = ((float)  tolua_tonumber(tolua_S,5,1.0f));
  {
   irr::video::SColorf* tolua_ret = (irr::video::SColorf*)  Mtolua_new((irr::video::SColorf)(r,g,b,a));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::video::SColorf");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_video_SColorf_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::video::SColorf */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColorf_new01_local
static int tolua_NeoGame_irr_video_SColorf_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::video::SColorf",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  float r = ((float)  tolua_tonumber(tolua_S,2,0));
  float g = ((float)  tolua_tonumber(tolua_S,3,0));
  float b = ((float)  tolua_tonumber(tolua_S,4,0));
  float a = ((float)  tolua_tonumber(tolua_S,5,1.0f));
  {
   irr::video::SColorf* tolua_ret = (irr::video::SColorf*)  Mtolua_new((irr::video::SColorf)(r,g,b,a));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::video::SColorf");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_video_SColorf_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::video::SColorf */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColorf_new02
static int tolua_NeoGame_irr_video_SColorf_new02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::video::SColorf",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::video::SColor c = *((irr::video::SColor*)  tolua_tousertype(tolua_S,2,0));
  {
   irr::video::SColorf* tolua_ret = (irr::video::SColorf*)  Mtolua_new((irr::video::SColorf)(c));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::video::SColorf");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_video_SColorf_new01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::video::SColorf */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColorf_new02_local
static int tolua_NeoGame_irr_video_SColorf_new02_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::video::SColorf",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::video::SColor c = *((irr::video::SColor*)  tolua_tousertype(tolua_S,2,0));
  {
   irr::video::SColorf* tolua_ret = (irr::video::SColorf*)  Mtolua_new((irr::video::SColorf)(c));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::video::SColorf");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_video_SColorf_new01_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: toSColor of class  irr::video::SColorf */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColorf_toSColor00
static int tolua_NeoGame_irr_video_SColorf_toSColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::video::SColorf",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::video::SColorf* self = (const irr::video::SColorf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'toSColor'", NULL);
#endif
  {
   irr::video::SColor tolua_ret = (irr::video::SColor)  self->toSColor();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::video::SColor)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::video::SColor");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::video::SColor));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::video::SColor");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'toSColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  irr::video::SColorf */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColorf_set00
static int tolua_NeoGame_irr_video_SColorf_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::video::SColorf",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::video::SColorf* self = (irr::video::SColorf*)  tolua_tousertype(tolua_S,1,0);
  float rr = ((float)  tolua_tonumber(tolua_S,2,0));
  float gg = ((float)  tolua_tonumber(tolua_S,3,0));
  float bb = ((float)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'", NULL);
#endif
  {
   self->set(rr,gg,bb);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  irr::video::SColorf */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColorf_set01
static int tolua_NeoGame_irr_video_SColorf_set01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::video::SColorf",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::video::SColorf* self = (irr::video::SColorf*)  tolua_tousertype(tolua_S,1,0);
  float aa = ((float)  tolua_tonumber(tolua_S,2,0));
  float rr = ((float)  tolua_tonumber(tolua_S,3,0));
  float gg = ((float)  tolua_tonumber(tolua_S,4,0));
  float bb = ((float)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'", NULL);
#endif
  {
   self->set(aa,rr,gg,bb);
  }
 }
 return 0;
tolua_lerror:
 return tolua_NeoGame_irr_video_SColorf_set00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getInterpolated of class  irr::video::SColorf */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColorf_getInterpolated00
static int tolua_NeoGame_irr_video_SColorf_getInterpolated00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::video::SColorf",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::video::SColorf",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::video::SColorf* self = (const irr::video::SColorf*)  tolua_tousertype(tolua_S,1,0);
  const irr::video::SColorf* other = ((const irr::video::SColorf*)  tolua_tousertype(tolua_S,2,0));
  float d = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getInterpolated'", NULL);
#endif
  {
   irr::video::SColorf tolua_ret = (irr::video::SColorf)  self->getInterpolated(*other,d);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::video::SColorf)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::video::SColorf");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::video::SColorf));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::video::SColorf");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getInterpolated'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getInterpolated_quadratic of class  irr::video::SColorf */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColorf_getInterpolated_quadratic00
static int tolua_NeoGame_irr_video_SColorf_getInterpolated_quadratic00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::video::SColorf",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::video::SColorf",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::video::SColorf",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::video::SColorf* self = (const irr::video::SColorf*)  tolua_tousertype(tolua_S,1,0);
  const irr::video::SColorf* c1 = ((const irr::video::SColorf*)  tolua_tousertype(tolua_S,2,0));
  const irr::video::SColorf* c2 = ((const irr::video::SColorf*)  tolua_tousertype(tolua_S,3,0));
  float d = ((float)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getInterpolated_quadratic'", NULL);
#endif
  {
   irr::video::SColorf tolua_ret = (irr::video::SColorf)  self->getInterpolated_quadratic(*c1,*c2,d);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::video::SColorf)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::video::SColorf");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::video::SColorf));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::video::SColorf");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getInterpolated_quadratic'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setColorComponentValue of class  irr::video::SColorf */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColorf_setColorComponentValue00
static int tolua_NeoGame_irr_video_SColorf_setColorComponentValue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::video::SColorf",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::video::SColorf* self = (irr::video::SColorf*)  tolua_tousertype(tolua_S,1,0);
  int index = ((int)  tolua_tonumber(tolua_S,2,0));
  float value = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setColorComponentValue'", NULL);
#endif
  {
   self->setColorComponentValue(index,value);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setColorComponentValue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAlpha of class  irr::video::SColorf */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColorf_getAlpha00
static int tolua_NeoGame_irr_video_SColorf_getAlpha00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::video::SColorf",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::video::SColorf* self = (const irr::video::SColorf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAlpha'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getAlpha();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAlpha'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getRed of class  irr::video::SColorf */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColorf_getRed00
static int tolua_NeoGame_irr_video_SColorf_getRed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::video::SColorf",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::video::SColorf* self = (const irr::video::SColorf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getRed'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getRed();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGreen of class  irr::video::SColorf */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColorf_getGreen00
static int tolua_NeoGame_irr_video_SColorf_getGreen00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::video::SColorf",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::video::SColorf* self = (const irr::video::SColorf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGreen'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getGreen();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGreen'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getBlue of class  irr::video::SColorf */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColorf_getBlue00
static int tolua_NeoGame_irr_video_SColorf_getBlue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::video::SColorf",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::video::SColorf* self = (const irr::video::SColorf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getBlue'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getBlue();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getBlue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: r of class  irr::video::SColorf */
#ifndef TOLUA_DISABLE_tolua_get_irr__video__SColorf_r
static int tolua_get_irr__video__SColorf_r(lua_State* tolua_S)
{
  irr::video::SColorf* self = (irr::video::SColorf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'r'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->r);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: r of class  irr::video::SColorf */
#ifndef TOLUA_DISABLE_tolua_set_irr__video__SColorf_r
static int tolua_set_irr__video__SColorf_r(lua_State* tolua_S)
{
  irr::video::SColorf* self = (irr::video::SColorf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'r'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->r = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: g of class  irr::video::SColorf */
#ifndef TOLUA_DISABLE_tolua_get_irr__video__SColorf_g
static int tolua_get_irr__video__SColorf_g(lua_State* tolua_S)
{
  irr::video::SColorf* self = (irr::video::SColorf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'g'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->g);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: g of class  irr::video::SColorf */
#ifndef TOLUA_DISABLE_tolua_set_irr__video__SColorf_g
static int tolua_set_irr__video__SColorf_g(lua_State* tolua_S)
{
  irr::video::SColorf* self = (irr::video::SColorf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'g'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->g = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: b of class  irr::video::SColorf */
#ifndef TOLUA_DISABLE_tolua_get_irr__video__SColorf_b
static int tolua_get_irr__video__SColorf_b(lua_State* tolua_S)
{
  irr::video::SColorf* self = (irr::video::SColorf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'b'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->b);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: b of class  irr::video::SColorf */
#ifndef TOLUA_DISABLE_tolua_set_irr__video__SColorf_b
static int tolua_set_irr__video__SColorf_b(lua_State* tolua_S)
{
  irr::video::SColorf* self = (irr::video::SColorf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'b'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->b = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: a of class  irr::video::SColorf */
#ifndef TOLUA_DISABLE_tolua_get_irr__video__SColorf_a
static int tolua_get_irr__video__SColorf_a(lua_State* tolua_S)
{
  irr::video::SColorf* self = (irr::video::SColorf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'a'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->a);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: a of class  irr::video::SColorf */
#ifndef TOLUA_DISABLE_tolua_set_irr__video__SColorf_a
static int tolua_set_irr__video__SColorf_a(lua_State* tolua_S)
{
  irr::video::SColorf* self = (irr::video::SColorf*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'a'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->a = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::video::SColorHSL */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColorHSL_new00
static int tolua_NeoGame_irr_video_SColorHSL_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::video::SColorHSL",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  float h = ((float)  tolua_tonumber(tolua_S,2,0.f));
  float s = ((float)  tolua_tonumber(tolua_S,3,0.f));
  float l = ((float)  tolua_tonumber(tolua_S,4,0.f));
  {
   irr::video::SColorHSL* tolua_ret = (irr::video::SColorHSL*)  Mtolua_new((irr::video::SColorHSL)(h,s,l));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::video::SColorHSL");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::video::SColorHSL */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColorHSL_new00_local
static int tolua_NeoGame_irr_video_SColorHSL_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::video::SColorHSL",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  float h = ((float)  tolua_tonumber(tolua_S,2,0.f));
  float s = ((float)  tolua_tonumber(tolua_S,3,0.f));
  float l = ((float)  tolua_tonumber(tolua_S,4,0.f));
  {
   irr::video::SColorHSL* tolua_ret = (irr::video::SColorHSL*)  Mtolua_new((irr::video::SColorHSL)(h,s,l));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::video::SColorHSL");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: fromRGB of class  irr::video::SColorHSL */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColorHSL_fromRGB00
static int tolua_NeoGame_irr_video_SColorHSL_fromRGB00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::video::SColorHSL",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::video::SColorf",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::video::SColorHSL* self = (irr::video::SColorHSL*)  tolua_tousertype(tolua_S,1,0);
  const irr::video::SColorf* color = ((const irr::video::SColorf*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'fromRGB'", NULL);
#endif
  {
   self->fromRGB(*color);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'fromRGB'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: toRGB of class  irr::video::SColorHSL */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_SColorHSL_toRGB00
static int tolua_NeoGame_irr_video_SColorHSL_toRGB00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::video::SColorHSL",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::video::SColorf",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::video::SColorHSL* self = (const irr::video::SColorHSL*)  tolua_tousertype(tolua_S,1,0);
  irr::video::SColorf* color = ((irr::video::SColorf*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'toRGB'", NULL);
#endif
  {
   self->toRGB(*color);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'toRGB'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Hue of class  irr::video::SColorHSL */
#ifndef TOLUA_DISABLE_tolua_get_irr__video__SColorHSL_Hue
static int tolua_get_irr__video__SColorHSL_Hue(lua_State* tolua_S)
{
  irr::video::SColorHSL* self = (irr::video::SColorHSL*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Hue'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Hue);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Hue of class  irr::video::SColorHSL */
#ifndef TOLUA_DISABLE_tolua_set_irr__video__SColorHSL_Hue
static int tolua_set_irr__video__SColorHSL_Hue(lua_State* tolua_S)
{
  irr::video::SColorHSL* self = (irr::video::SColorHSL*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Hue'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Hue = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Saturation of class  irr::video::SColorHSL */
#ifndef TOLUA_DISABLE_tolua_get_irr__video__SColorHSL_Saturation
static int tolua_get_irr__video__SColorHSL_Saturation(lua_State* tolua_S)
{
  irr::video::SColorHSL* self = (irr::video::SColorHSL*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Saturation'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Saturation);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Saturation of class  irr::video::SColorHSL */
#ifndef TOLUA_DISABLE_tolua_set_irr__video__SColorHSL_Saturation
static int tolua_set_irr__video__SColorHSL_Saturation(lua_State* tolua_S)
{
  irr::video::SColorHSL* self = (irr::video::SColorHSL*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Saturation'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Saturation = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Luminance of class  irr::video::SColorHSL */
#ifndef TOLUA_DISABLE_tolua_get_irr__video__SColorHSL_Luminance
static int tolua_get_irr__video__SColorHSL_Luminance(lua_State* tolua_S)
{
  irr::video::SColorHSL* self = (irr::video::SColorHSL*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Luminance'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Luminance);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Luminance of class  irr::video::SColorHSL */
#ifndef TOLUA_DISABLE_tolua_set_irr__video__SColorHSL_Luminance
static int tolua_set_irr__video__SColorHSL_Luminance(lua_State* tolua_S)
{
  irr::video::SColorHSL* self = (irr::video::SColorHSL*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Luminance'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Luminance = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::SKeyMap */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_SKeyMap_new00
static int tolua_NeoGame_irr_SKeyMap_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::SKeyMap",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   irr::SKeyMap* tolua_ret = (irr::SKeyMap*)  Mtolua_new((irr::SKeyMap)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::SKeyMap");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::SKeyMap */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_SKeyMap_new00_local
static int tolua_NeoGame_irr_SKeyMap_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::SKeyMap",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   irr::SKeyMap* tolua_ret = (irr::SKeyMap*)  Mtolua_new((irr::SKeyMap)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::SKeyMap");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::SKeyMap */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_SKeyMap_new01
static int tolua_NeoGame_irr_SKeyMap_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::SKeyMap",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::EKEY_ACTION action = ((irr::EKEY_ACTION) (int)  tolua_tonumber(tolua_S,2,0));
  irr::EKEY_CODE keyCode = ((irr::EKEY_CODE) (int)  tolua_tonumber(tolua_S,3,0));
  {
   irr::SKeyMap* tolua_ret = (irr::SKeyMap*)  Mtolua_new((irr::SKeyMap)(action,keyCode));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::SKeyMap");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_SKeyMap_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::SKeyMap */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_SKeyMap_new01_local
static int tolua_NeoGame_irr_SKeyMap_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::SKeyMap",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::EKEY_ACTION action = ((irr::EKEY_ACTION) (int)  tolua_tonumber(tolua_S,2,0));
  irr::EKEY_CODE keyCode = ((irr::EKEY_CODE) (int)  tolua_tonumber(tolua_S,3,0));
  {
   irr::SKeyMap* tolua_ret = (irr::SKeyMap*)  Mtolua_new((irr::SKeyMap)(action,keyCode));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::SKeyMap");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_SKeyMap_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Action of class  irr::SKeyMap */
#ifndef TOLUA_DISABLE_tolua_get_irr__SKeyMap_Action
static int tolua_get_irr__SKeyMap_Action(lua_State* tolua_S)
{
  irr::SKeyMap* self = (irr::SKeyMap*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Action'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Action);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Action of class  irr::SKeyMap */
#ifndef TOLUA_DISABLE_tolua_set_irr__SKeyMap_Action
static int tolua_set_irr__SKeyMap_Action(lua_State* tolua_S)
{
  irr::SKeyMap* self = (irr::SKeyMap*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Action'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Action = ((irr::EKEY_ACTION) (int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: KeyCode of class  irr::SKeyMap */
#ifndef TOLUA_DISABLE_tolua_get_irr__SKeyMap_KeyCode
static int tolua_get_irr__SKeyMap_KeyCode(lua_State* tolua_S)
{
  irr::SKeyMap* self = (irr::SKeyMap*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'KeyCode'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->KeyCode);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: KeyCode of class  irr::SKeyMap */
#ifndef TOLUA_DISABLE_tolua_set_irr__SKeyMap_KeyCode
static int tolua_set_irr__SKeyMap_KeyCode(lua_State* tolua_S)
{
  irr::SKeyMap* self = (irr::SKeyMap*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'KeyCode'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->KeyCode = ((irr::EKEY_CODE) (int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: getOriginalSize of class  irr::video::ITexture */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_ITexture_getOriginalSize00
static int tolua_NeoGame_irr_video_ITexture_getOriginalSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::video::ITexture",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::video::ITexture* self = (const irr::video::ITexture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getOriginalSize'", NULL);
#endif
  {
   const irr::core::dimension2d<unsigned int>& tolua_ret = (const irr::core::dimension2d<unsigned int>&)  self->getOriginalSize();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const irr::core::dimension2d<unsigned int>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getOriginalSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSize of class  irr::video::ITexture */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_ITexture_getSize00
static int tolua_NeoGame_irr_video_ITexture_getSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::video::ITexture",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::video::ITexture* self = (const irr::video::ITexture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSize'", NULL);
#endif
  {
   const irr::core::dimension2d<unsigned int>& tolua_ret = (const irr::core::dimension2d<unsigned int>&)  self->getSize();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const irr::core::dimension2d<unsigned int>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getColorFormat of class  irr::video::ITexture */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_ITexture_getColorFormat00
static int tolua_NeoGame_irr_video_ITexture_getColorFormat00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::video::ITexture",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::video::ITexture* self = (const irr::video::ITexture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getColorFormat'", NULL);
#endif
  {
   irr::video::ECOLOR_FORMAT tolua_ret = (irr::video::ECOLOR_FORMAT)  self->getColorFormat();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getColorFormat'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getPitch of class  irr::video::ITexture */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_ITexture_getPitch00
static int tolua_NeoGame_irr_video_ITexture_getPitch00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::video::ITexture",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::video::ITexture* self = (const irr::video::ITexture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getPitch'", NULL);
#endif
  {
   unsigned int tolua_ret = (unsigned int)  self->getPitch();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getPitch'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: hasMipMaps of class  irr::video::ITexture */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_ITexture_hasMipMaps00
static int tolua_NeoGame_irr_video_ITexture_hasMipMaps00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::video::ITexture",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::video::ITexture* self = (const irr::video::ITexture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'hasMipMaps'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->hasMipMaps();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'hasMipMaps'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: hasAlpha of class  irr::video::ITexture */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_ITexture_hasAlpha00
static int tolua_NeoGame_irr_video_ITexture_hasAlpha00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::video::ITexture",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::video::ITexture* self = (const irr::video::ITexture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'hasAlpha'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->hasAlpha();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'hasAlpha'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isRenderTarget of class  irr::video::ITexture */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_video_ITexture_isRenderTarget00
static int tolua_NeoGame_irr_video_ITexture_isRenderTarget00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::video::ITexture",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::video::ITexture* self = (const irr::video::ITexture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isRenderTarget'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isRenderTarget();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isRenderTarget'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_quaternion_new00
static int tolua_NeoGame_irr_core_quaternion_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::quaternion",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   irr::core::quaternion* tolua_ret = (irr::core::quaternion*)  Mtolua_new((irr::core::quaternion)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::quaternion");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_quaternion_new00_local
static int tolua_NeoGame_irr_core_quaternion_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::quaternion",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   irr::core::quaternion* tolua_ret = (irr::core::quaternion*)  Mtolua_new((irr::core::quaternion)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::quaternion");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_quaternion_new01
static int tolua_NeoGame_irr_core_quaternion_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::quaternion",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  float x = ((float)  tolua_tonumber(tolua_S,2,0));
  float y = ((float)  tolua_tonumber(tolua_S,3,0));
  float z = ((float)  tolua_tonumber(tolua_S,4,0));
  float w = ((float)  tolua_tonumber(tolua_S,5,0));
  {
   irr::core::quaternion* tolua_ret = (irr::core::quaternion*)  Mtolua_new((irr::core::quaternion)(x,y,z,w));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::quaternion");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_quaternion_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_quaternion_new01_local
static int tolua_NeoGame_irr_core_quaternion_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::quaternion",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  float x = ((float)  tolua_tonumber(tolua_S,2,0));
  float y = ((float)  tolua_tonumber(tolua_S,3,0));
  float z = ((float)  tolua_tonumber(tolua_S,4,0));
  float w = ((float)  tolua_tonumber(tolua_S,5,0));
  {
   irr::core::quaternion* tolua_ret = (irr::core::quaternion*)  Mtolua_new((irr::core::quaternion)(x,y,z,w));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::quaternion");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_quaternion_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_quaternion_new02
static int tolua_NeoGame_irr_core_quaternion_new02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::quaternion",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  float x = ((float)  tolua_tonumber(tolua_S,2,0));
  float y = ((float)  tolua_tonumber(tolua_S,3,0));
  float z = ((float)  tolua_tonumber(tolua_S,4,0));
  {
   irr::core::quaternion* tolua_ret = (irr::core::quaternion*)  Mtolua_new((irr::core::quaternion)(x,y,z));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::quaternion");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_quaternion_new01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_quaternion_new02_local
static int tolua_NeoGame_irr_core_quaternion_new02_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::quaternion",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  float x = ((float)  tolua_tonumber(tolua_S,2,0));
  float y = ((float)  tolua_tonumber(tolua_S,3,0));
  float z = ((float)  tolua_tonumber(tolua_S,4,0));
  {
   irr::core::quaternion* tolua_ret = (irr::core::quaternion*)  Mtolua_new((irr::core::quaternion)(x,y,z));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::quaternion");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_quaternion_new01_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_quaternion_new03
static int tolua_NeoGame_irr_core_quaternion_new03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::quaternion",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector3d<float>* vec = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  {
   irr::core::quaternion* tolua_ret = (irr::core::quaternion*)  Mtolua_new((irr::core::quaternion)(*vec));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::quaternion");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_quaternion_new02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_quaternion_new03_local
static int tolua_NeoGame_irr_core_quaternion_new03_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::quaternion",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector3d<float>* vec = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  {
   irr::core::quaternion* tolua_ret = (irr::core::quaternion*)  Mtolua_new((irr::core::quaternion)(*vec));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::quaternion");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_quaternion_new02_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator== of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_quaternion__eq00
static int tolua_NeoGame_irr_core_quaternion__eq00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::quaternion",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::quaternion",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::quaternion* self = (const irr::core::quaternion*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::quaternion* other = ((const irr::core::quaternion*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator=='", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->operator==(*other);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.eq'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator+ of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_quaternion__add00
static int tolua_NeoGame_irr_core_quaternion__add00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::quaternion",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::quaternion",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::quaternion* self = (const irr::core::quaternion*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::quaternion* other = ((const irr::core::quaternion*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator+'", NULL);
#endif
  {
   irr::core::quaternion tolua_ret = (irr::core::quaternion)  self->operator+(*other);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::quaternion)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::quaternion");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::quaternion));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::quaternion");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.add'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator* of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_quaternion__mul00
static int tolua_NeoGame_irr_core_quaternion__mul00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::quaternion",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::quaternion",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::quaternion* self = (const irr::core::quaternion*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::quaternion* other = ((const irr::core::quaternion*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator*'", NULL);
#endif
  {
   irr::core::quaternion tolua_ret = (irr::core::quaternion)  self->operator*(*other);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::quaternion)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::quaternion");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::quaternion));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::quaternion");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.mul'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator* of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_quaternion__mul01
static int tolua_NeoGame_irr_core_quaternion__mul01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::quaternion",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::quaternion* self = (const irr::core::quaternion*)  tolua_tousertype(tolua_S,1,0);
  float s = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator*'", NULL);
#endif
  {
   irr::core::quaternion tolua_ret = (irr::core::quaternion)  self->operator*(s);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::quaternion)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::quaternion");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::quaternion));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::quaternion");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_quaternion__mul00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator* of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_quaternion__mul02
static int tolua_NeoGame_irr_core_quaternion__mul02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::quaternion",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::quaternion* self = (const irr::core::quaternion*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* v = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator*'", NULL);
#endif
  {
   irr::core::vector3d<float> tolua_ret = (irr::core::vector3d<float>)  self->operator*(*v);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_quaternion__mul01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: dotProduct of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_quaternion_dotProduct00
static int tolua_NeoGame_irr_core_quaternion_dotProduct00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::quaternion",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::quaternion",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::quaternion* self = (const irr::core::quaternion*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::quaternion* other = ((const irr::core::quaternion*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'dotProduct'", NULL);
#endif
  {
   float tolua_ret = (float)  self->dotProduct(*other);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'dotProduct'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_quaternion_set00
static int tolua_NeoGame_irr_core_quaternion_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::quaternion",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::quaternion* self = (irr::core::quaternion*)  tolua_tousertype(tolua_S,1,0);
  float x = ((float)  tolua_tonumber(tolua_S,2,0));
  float y = ((float)  tolua_tonumber(tolua_S,3,0));
  float z = ((float)  tolua_tonumber(tolua_S,4,0));
  float w = ((float)  tolua_tonumber(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'", NULL);
#endif
  {
   irr::core::quaternion& tolua_ret = (irr::core::quaternion&)  self->set(x,y,z,w);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::quaternion");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_quaternion_set01
static int tolua_NeoGame_irr_core_quaternion_set01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::quaternion",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::core::quaternion* self = (irr::core::quaternion*)  tolua_tousertype(tolua_S,1,0);
  float x = ((float)  tolua_tonumber(tolua_S,2,0));
  float y = ((float)  tolua_tonumber(tolua_S,3,0));
  float z = ((float)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'", NULL);
#endif
  {
   irr::core::quaternion& tolua_ret = (irr::core::quaternion&)  self->set(x,y,z);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::quaternion");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_quaternion_set00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_quaternion_set02
static int tolua_NeoGame_irr_core_quaternion_set02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::quaternion",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::core::quaternion* self = (irr::core::quaternion*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* vec = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'", NULL);
#endif
  {
   irr::core::quaternion& tolua_ret = (irr::core::quaternion&)  self->set(*vec);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::quaternion");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_quaternion_set01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_quaternion_set03
static int tolua_NeoGame_irr_core_quaternion_set03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::quaternion",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::quaternion",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::core::quaternion* self = (irr::core::quaternion*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::quaternion* quat = ((const irr::core::quaternion*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'", NULL);
#endif
  {
   irr::core::quaternion& tolua_ret = (irr::core::quaternion&)  self->set(*quat);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::quaternion");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_quaternion_set02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: equals of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_quaternion_equals00
static int tolua_NeoGame_irr_core_quaternion_equals00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::quaternion",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::quaternion",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::quaternion* self = (const irr::core::quaternion*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::quaternion* other = ((const irr::core::quaternion*)  tolua_tousertype(tolua_S,2,0));
  const float tolerance = ((const float)  tolua_tonumber(tolua_S,3,ROUNDING_ERROR_f32));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'equals'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->equals(*other,tolerance);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'equals'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: normalize of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_quaternion_normalize00
static int tolua_NeoGame_irr_core_quaternion_normalize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::quaternion",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::quaternion* self = (irr::core::quaternion*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'normalize'", NULL);
#endif
  {
   irr::core::quaternion& tolua_ret = (irr::core::quaternion&)  self->normalize();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::quaternion");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'normalize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMatrix of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_quaternion_getMatrix00
static int tolua_NeoGame_irr_core_quaternion_getMatrix00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::quaternion",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::matrix4",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::quaternion* self = (const irr::core::quaternion*)  tolua_tousertype(tolua_S,1,0);
  irr::core::matrix4* dest = ((irr::core::matrix4*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMatrix'", NULL);
#endif
  {
   self->getMatrix(*dest);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMatrix'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMatrix of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_quaternion_getMatrix01
static int tolua_NeoGame_irr_core_quaternion_getMatrix01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::quaternion",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::matrix4",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::quaternion* self = (const irr::core::quaternion*)  tolua_tousertype(tolua_S,1,0);
  irr::core::matrix4* dest = ((irr::core::matrix4*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::vector3d<float>* translation = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMatrix'", NULL);
#endif
  {
   self->getMatrix(*dest,*translation);
  }
 }
 return 0;
tolua_lerror:
 return tolua_NeoGame_irr_core_quaternion_getMatrix00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMatrixCenter of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_quaternion_getMatrixCenter00
static int tolua_NeoGame_irr_core_quaternion_getMatrixCenter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::quaternion",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::matrix4",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::quaternion* self = (const irr::core::quaternion*)  tolua_tousertype(tolua_S,1,0);
  irr::core::matrix4* dest = ((irr::core::matrix4*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::vector3d<float>* center = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,3,0));
  const irr::core::vector3d<float>* translation = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMatrixCenter'", NULL);
#endif
  {
   self->getMatrixCenter(*dest,*center,*translation);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMatrixCenter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMatrix_transposed of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_quaternion_getMatrix_transposed00
static int tolua_NeoGame_irr_core_quaternion_getMatrix_transposed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::quaternion",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::matrix4",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::quaternion* self = (const irr::core::quaternion*)  tolua_tousertype(tolua_S,1,0);
  irr::core::matrix4* dest = ((irr::core::matrix4*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMatrix_transposed'", NULL);
#endif
  {
   self->getMatrix_transposed(*dest);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMatrix_transposed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: makeInverse of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_quaternion_makeInverse00
static int tolua_NeoGame_irr_core_quaternion_makeInverse00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::quaternion",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::quaternion* self = (irr::core::quaternion*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'makeInverse'", NULL);
#endif
  {
   irr::core::quaternion& tolua_ret = (irr::core::quaternion&)  self->makeInverse();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::quaternion");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'makeInverse'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: lerp of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_quaternion_lerp00
static int tolua_NeoGame_irr_core_quaternion_lerp00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::quaternion",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::quaternion",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"irr::core::quaternion",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::quaternion* self = (irr::core::quaternion*)  tolua_tousertype(tolua_S,1,0);
  irr::core::quaternion q1 = *((irr::core::quaternion*)  tolua_tousertype(tolua_S,2,0));
  irr::core::quaternion q2 = *((irr::core::quaternion*)  tolua_tousertype(tolua_S,3,0));
  float time = ((float)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'lerp'", NULL);
#endif
  {
   irr::core::quaternion& tolua_ret = (irr::core::quaternion&)  self->lerp(q1,q2,time);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::quaternion");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'lerp'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: slerp of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_quaternion_slerp00
static int tolua_NeoGame_irr_core_quaternion_slerp00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::quaternion",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::quaternion",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"irr::core::quaternion",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::quaternion* self = (irr::core::quaternion*)  tolua_tousertype(tolua_S,1,0);
  irr::core::quaternion q1 = *((irr::core::quaternion*)  tolua_tousertype(tolua_S,2,0));
  irr::core::quaternion q2 = *((irr::core::quaternion*)  tolua_tousertype(tolua_S,3,0));
  float time = ((float)  tolua_tonumber(tolua_S,4,0));
  float threshold = ((float)  tolua_tonumber(tolua_S,5,.05f));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'slerp'", NULL);
#endif
  {
   irr::core::quaternion& tolua_ret = (irr::core::quaternion&)  self->slerp(q1,q2,time,threshold);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::quaternion");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'slerp'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: fromAngleAxis of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_quaternion_fromAngleAxis00
static int tolua_NeoGame_irr_core_quaternion_fromAngleAxis00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::quaternion",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::quaternion* self = (irr::core::quaternion*)  tolua_tousertype(tolua_S,1,0);
  float angle = ((float)  tolua_tonumber(tolua_S,2,0));
  const irr::core::vector3d<float>* axis = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'fromAngleAxis'", NULL);
#endif
  {
   irr::core::quaternion& tolua_ret = (irr::core::quaternion&)  self->fromAngleAxis(angle,*axis);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::quaternion");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'fromAngleAxis'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: toAngleAxis of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_quaternion_toAngleAxis00
static int tolua_NeoGame_irr_core_quaternion_toAngleAxis00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::quaternion",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::quaternion* self = (const irr::core::quaternion*)  tolua_tousertype(tolua_S,1,0);
  float angle = ((float)  tolua_tonumber(tolua_S,2,0));
  irr::core::vector3d<float>* axis = ((irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'toAngleAxis'", NULL);
#endif
  {
   self->toAngleAxis(angle,*axis);
   tolua_pushnumber(tolua_S,(lua_Number)angle);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'toAngleAxis'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: toEuler of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_quaternion_toEuler00
static int tolua_NeoGame_irr_core_quaternion_toEuler00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::quaternion",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::quaternion* self = (const irr::core::quaternion*)  tolua_tousertype(tolua_S,1,0);
  irr::core::vector3d<float>* euler = ((irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'toEuler'", NULL);
#endif
  {
   self->toEuler(*euler);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'toEuler'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: makeIdentity of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_quaternion_makeIdentity00
static int tolua_NeoGame_irr_core_quaternion_makeIdentity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::quaternion",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::quaternion* self = (irr::core::quaternion*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'makeIdentity'", NULL);
#endif
  {
   irr::core::quaternion& tolua_ret = (irr::core::quaternion&)  self->makeIdentity();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::quaternion");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'makeIdentity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: rotationFromTo of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_quaternion_rotationFromTo00
static int tolua_NeoGame_irr_core_quaternion_rotationFromTo00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::quaternion",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::quaternion* self = (irr::core::quaternion*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* from = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::vector3d<float>* to = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'rotationFromTo'", NULL);
#endif
  {
   irr::core::quaternion& tolua_ret = (irr::core::quaternion&)  self->rotationFromTo(*from,*to);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::quaternion");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'rotationFromTo'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: X of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_get_irr__core__quaternion_X
static int tolua_get_irr__core__quaternion_X(lua_State* tolua_S)
{
  irr::core::quaternion* self = (irr::core::quaternion*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'X'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->X);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: X of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_set_irr__core__quaternion_X
static int tolua_set_irr__core__quaternion_X(lua_State* tolua_S)
{
  irr::core::quaternion* self = (irr::core::quaternion*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'X'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->X = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Y of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_get_irr__core__quaternion_Y
static int tolua_get_irr__core__quaternion_Y(lua_State* tolua_S)
{
  irr::core::quaternion* self = (irr::core::quaternion*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Y'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Y);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Y of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_set_irr__core__quaternion_Y
static int tolua_set_irr__core__quaternion_Y(lua_State* tolua_S)
{
  irr::core::quaternion* self = (irr::core::quaternion*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Y'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Y = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Z of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_get_irr__core__quaternion_Z
static int tolua_get_irr__core__quaternion_Z(lua_State* tolua_S)
{
  irr::core::quaternion* self = (irr::core::quaternion*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Z'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Z);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Z of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_set_irr__core__quaternion_Z
static int tolua_set_irr__core__quaternion_Z(lua_State* tolua_S)
{
  irr::core::quaternion* self = (irr::core::quaternion*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Z'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Z = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: W of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_get_irr__core__quaternion_W
static int tolua_get_irr__core__quaternion_W(lua_State* tolua_S)
{
  irr::core::quaternion* self = (irr::core::quaternion*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'W'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->W);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: W of class  irr::core::quaternion */
#ifndef TOLUA_DISABLE_tolua_set_irr__core__quaternion_W
static int tolua_set_irr__core__quaternion_W(lua_State* tolua_S)
{
  irr::core::quaternion* self = (irr::core::quaternion*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'W'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->W = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di_new00
static int tolua_NeoGame_irr_core_vector3di_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::vector3d<int>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   irr::core::vector3d<int>* tolua_ret = (irr::core::vector3d<int>*)  Mtolua_new((irr::core::vector3d<int>)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::vector3d<int>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di_new00_local
static int tolua_NeoGame_irr_core_vector3di_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::vector3d<int>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   irr::core::vector3d<int>* tolua_ret = (irr::core::vector3d<int>*)  Mtolua_new((irr::core::vector3d<int>)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di_new01
static int tolua_NeoGame_irr_core_vector3di_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::vector3d<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  int nx = ((int)  tolua_tonumber(tolua_S,2,0));
  int ny = ((int)  tolua_tonumber(tolua_S,3,0));
  int nz = ((int)  tolua_tonumber(tolua_S,4,0));
  {
   irr::core::vector3d<int>* tolua_ret = (irr::core::vector3d<int>*)  Mtolua_new((irr::core::vector3d<int>)(nx,ny,nz));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::vector3d<int>");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector3di_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di_new01_local
static int tolua_NeoGame_irr_core_vector3di_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::vector3d<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  int nx = ((int)  tolua_tonumber(tolua_S,2,0));
  int ny = ((int)  tolua_tonumber(tolua_S,3,0));
  int nz = ((int)  tolua_tonumber(tolua_S,4,0));
  {
   irr::core::vector3d<int>* tolua_ret = (irr::core::vector3d<int>*)  Mtolua_new((irr::core::vector3d<int>)(nx,ny,nz));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector3di_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di_new02
static int tolua_NeoGame_irr_core_vector3di_new02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::vector3d<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  int n = ((int)  tolua_tonumber(tolua_S,2,0));
  {
   irr::core::vector3d<int>* tolua_ret = (irr::core::vector3d<int>*)  Mtolua_new((irr::core::vector3d<int>)(n));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::vector3d<int>");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector3di_new01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di_new02_local
static int tolua_NeoGame_irr_core_vector3di_new02_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::vector3d<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  int n = ((int)  tolua_tonumber(tolua_S,2,0));
  {
   irr::core::vector3d<int>* tolua_ret = (irr::core::vector3d<int>*)  Mtolua_new((irr::core::vector3d<int>)(n));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector3di_new01_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di_new03
static int tolua_NeoGame_irr_core_vector3di_new03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::vector3d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector3d<int>* other = ((const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,2,0));
  {
   irr::core::vector3d<int>* tolua_ret = (irr::core::vector3d<int>*)  Mtolua_new((irr::core::vector3d<int>)(*other));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::vector3d<int>");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector3di_new02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di_new03_local
static int tolua_NeoGame_irr_core_vector3di_new03_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::vector3d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector3d<int>* other = ((const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,2,0));
  {
   irr::core::vector3d<int>* tolua_ret = (irr::core::vector3d<int>*)  Mtolua_new((irr::core::vector3d<int>)(*other));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector3di_new02_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator- of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di__sub00
static int tolua_NeoGame_irr_core_vector3di__sub00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<int>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<int>* self = (const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator-'", NULL);
#endif
  {
   irr::core::vector3d<int> tolua_ret = (irr::core::vector3d<int>)  self->operator-();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<int>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<int>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.sub'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator+ of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di__add00
static int tolua_NeoGame_irr_core_vector3di__add00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<int>* self = (const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<int>* other = ((const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator+'", NULL);
#endif
  {
   irr::core::vector3d<int> tolua_ret = (irr::core::vector3d<int>)  self->operator+(*other);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<int>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<int>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.add'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator+ of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di__add01
static int tolua_NeoGame_irr_core_vector3di__add01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector3d<int>* self = (const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
  const int val = ((const int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator+'", NULL);
#endif
  {
   irr::core::vector3d<int> tolua_ret = (irr::core::vector3d<int>)  self->operator+(val);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<int>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<int>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector3di__add00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator- of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di__sub01
static int tolua_NeoGame_irr_core_vector3di__sub01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector3d<int>* self = (const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<int>* other = ((const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator-'", NULL);
#endif
  {
   irr::core::vector3d<int> tolua_ret = (irr::core::vector3d<int>)  self->operator-(*other);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<int>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<int>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector3di__sub00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator- of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di__sub02
static int tolua_NeoGame_irr_core_vector3di__sub02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector3d<int>* self = (const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
  const int val = ((const int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator-'", NULL);
#endif
  {
   irr::core::vector3d<int> tolua_ret = (irr::core::vector3d<int>)  self->operator-(val);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<int>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<int>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector3di__sub01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator* of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di__mul00
static int tolua_NeoGame_irr_core_vector3di__mul00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<int>* self = (const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<int>* other = ((const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator*'", NULL);
#endif
  {
   irr::core::vector3d<int> tolua_ret = (irr::core::vector3d<int>)  self->operator*(*other);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<int>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<int>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.mul'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator* of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di__mul01
static int tolua_NeoGame_irr_core_vector3di__mul01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector3d<int>* self = (const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
  const int v = ((const int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator*'", NULL);
#endif
  {
   irr::core::vector3d<int> tolua_ret = (irr::core::vector3d<int>)  self->operator*(v);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<int>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<int>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector3di__mul00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator/ of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di__div00
static int tolua_NeoGame_irr_core_vector3di__div00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<int>* self = (const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<int>* other = ((const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator/'", NULL);
#endif
  {
   irr::core::vector3d<int> tolua_ret = (irr::core::vector3d<int>)  self->operator/(*other);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<int>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<int>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.div'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator/ of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di__div01
static int tolua_NeoGame_irr_core_vector3di__div01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector3d<int>* self = (const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
  const int v = ((const int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator/'", NULL);
#endif
  {
   irr::core::vector3d<int> tolua_ret = (irr::core::vector3d<int>)  self->operator/(v);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<int>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<int>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector3di__div00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator<= of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di__le00
static int tolua_NeoGame_irr_core_vector3di__le00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<int>* self = (const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<int>* other = ((const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator<='", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->operator<=(*other);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.le'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator< of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di__lt00
static int tolua_NeoGame_irr_core_vector3di__lt00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<int>* self = (const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<int>* other = ((const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator<'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->operator<(*other);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.lt'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator== of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di__eq00
static int tolua_NeoGame_irr_core_vector3di__eq00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<int>* self = (const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<int>* other = ((const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator=='", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->operator==(*other);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.eq'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: equals of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di_equals00
static int tolua_NeoGame_irr_core_vector3di_equals00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<int>* self = (const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<int>* other = ((const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'equals'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->equals(*other);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'equals'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: equals of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di_equals01
static int tolua_NeoGame_irr_core_vector3di_equals01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<int>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector3d<int>* self = (const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<int>* other = ((const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,2,0));
  const int tolerance = ((const int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'equals'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->equals(*other,tolerance);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector3di_equals00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di_set00
static int tolua_NeoGame_irr_core_vector3di_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::vector3d<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::vector3d<int>* self = (irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
  const int nx = ((const int)  tolua_tonumber(tolua_S,2,0));
  const int ny = ((const int)  tolua_tonumber(tolua_S,3,0));
  const int nz = ((const int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'", NULL);
#endif
  {
   irr::core::vector3d<int>& tolua_ret = (irr::core::vector3d<int>&)  self->set(nx,ny,nz);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::vector3d<int>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di_set01
static int tolua_NeoGame_irr_core_vector3di_set01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::vector3d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::core::vector3d<int>* self = (irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<int>* p = ((const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'", NULL);
#endif
  {
   irr::core::vector3d<int>& tolua_ret = (irr::core::vector3d<int>&)  self->set(*p);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::vector3d<int>");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector3di_set00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getLength of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di_getLength00
static int tolua_NeoGame_irr_core_vector3di_getLength00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<int>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<int>* self = (const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getLength'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getLength();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLength'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getLengthSQ of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di_getLengthSQ00
static int tolua_NeoGame_irr_core_vector3di_getLengthSQ00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<int>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<int>* self = (const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getLengthSQ'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getLengthSQ();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLengthSQ'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: dotProduct of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di_dotProduct00
static int tolua_NeoGame_irr_core_vector3di_dotProduct00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<int>* self = (const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<int>* other = ((const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'dotProduct'", NULL);
#endif
  {
   int tolua_ret = (int)  self->dotProduct(*other);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'dotProduct'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDistanceFrom of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di_getDistanceFrom00
static int tolua_NeoGame_irr_core_vector3di_getDistanceFrom00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<int>* self = (const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<int>* other = ((const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDistanceFrom'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getDistanceFrom(*other);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDistanceFrom'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDistanceFromSQ of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di_getDistanceFromSQ00
static int tolua_NeoGame_irr_core_vector3di_getDistanceFromSQ00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<int>* self = (const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<int>* other = ((const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDistanceFromSQ'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getDistanceFromSQ(*other);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDistanceFromSQ'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: crossProduct of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di_crossProduct00
static int tolua_NeoGame_irr_core_vector3di_crossProduct00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<int>* self = (const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<int>* p = ((const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'crossProduct'", NULL);
#endif
  {
   irr::core::vector3d<int> tolua_ret = (irr::core::vector3d<int>)  self->crossProduct(*p);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<int>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<int>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'crossProduct'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isBetweenPoints of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di_isBetweenPoints00
static int tolua_NeoGame_irr_core_vector3di_isBetweenPoints00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<int>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector3d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<int>* self = (const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<int>* begin = ((const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::vector3d<int>* end = ((const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isBetweenPoints'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isBetweenPoints(*begin,*end);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isBetweenPoints'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: normalize of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di_normalize00
static int tolua_NeoGame_irr_core_vector3di_normalize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::vector3d<int>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::vector3d<int>* self = (irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'normalize'", NULL);
#endif
  {
   irr::core::vector3d<int>& tolua_ret = (irr::core::vector3d<int>&)  self->normalize();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::vector3d<int>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'normalize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setLength of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di_setLength00
static int tolua_NeoGame_irr_core_vector3di_setLength00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::vector3d<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::vector3d<int>* self = (irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
  int newlength = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setLength'", NULL);
#endif
  {
   irr::core::vector3d<int>& tolua_ret = (irr::core::vector3d<int>&)  self->setLength(newlength);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::vector3d<int>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setLength'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: invert of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di_invert00
static int tolua_NeoGame_irr_core_vector3di_invert00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::vector3d<int>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::vector3d<int>* self = (irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'invert'", NULL);
#endif
  {
   irr::core::vector3d<int>& tolua_ret = (irr::core::vector3d<int>&)  self->invert();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::vector3d<int>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'invert'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: rotateXZBy of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di_rotateXZBy00
static int tolua_NeoGame_irr_core_vector3di_rotateXZBy00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::vector3d<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::vector3d<int>* self = (irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
  double degrees = ((double)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'rotateXZBy'", NULL);
#endif
  {
   self->rotateXZBy(degrees);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'rotateXZBy'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: rotateXZBy of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di_rotateXZBy01
static int tolua_NeoGame_irr_core_vector3di_rotateXZBy01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::vector3d<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector3d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::core::vector3d<int>* self = (irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
  double degrees = ((double)  tolua_tonumber(tolua_S,2,0));
  const irr::core::vector3d<int>* center = ((const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'rotateXZBy'", NULL);
#endif
  {
   self->rotateXZBy(degrees,*center);
  }
 }
 return 0;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector3di_rotateXZBy00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: rotateXYBy of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di_rotateXYBy00
static int tolua_NeoGame_irr_core_vector3di_rotateXYBy00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::vector3d<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::vector3d<int>* self = (irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
  double degrees = ((double)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'rotateXYBy'", NULL);
#endif
  {
   self->rotateXYBy(degrees);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'rotateXYBy'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: rotateXYBy of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di_rotateXYBy01
static int tolua_NeoGame_irr_core_vector3di_rotateXYBy01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::vector3d<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector3d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::core::vector3d<int>* self = (irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
  double degrees = ((double)  tolua_tonumber(tolua_S,2,0));
  const irr::core::vector3d<int>* center = ((const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'rotateXYBy'", NULL);
#endif
  {
   self->rotateXYBy(degrees,*center);
  }
 }
 return 0;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector3di_rotateXYBy00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: rotateYZBy of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di_rotateYZBy00
static int tolua_NeoGame_irr_core_vector3di_rotateYZBy00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::vector3d<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::vector3d<int>* self = (irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
  double degrees = ((double)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'rotateYZBy'", NULL);
#endif
  {
   self->rotateYZBy(degrees);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'rotateYZBy'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: rotateYZBy of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di_rotateYZBy01
static int tolua_NeoGame_irr_core_vector3di_rotateYZBy01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::vector3d<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector3d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::core::vector3d<int>* self = (irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
  double degrees = ((double)  tolua_tonumber(tolua_S,2,0));
  const irr::core::vector3d<int>* center = ((const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'rotateYZBy'", NULL);
#endif
  {
   self->rotateYZBy(degrees,*center);
  }
 }
 return 0;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector3di_rotateYZBy00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getInterpolated of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di_getInterpolated00
static int tolua_NeoGame_irr_core_vector3di_getInterpolated00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<int>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<int>* self = (const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<int>* other = ((const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,2,0));
  double d = ((double)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getInterpolated'", NULL);
#endif
  {
   irr::core::vector3d<int> tolua_ret = (irr::core::vector3d<int>)  self->getInterpolated(*other,d);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<int>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<int>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getInterpolated'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getInterpolated_quadratic of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di_getInterpolated_quadratic00
static int tolua_NeoGame_irr_core_vector3di_getInterpolated_quadratic00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<int>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector3d<int>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<int>* self = (const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<int>* v2 = ((const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::vector3d<int>* v3 = ((const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,3,0));
  double d = ((double)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getInterpolated_quadratic'", NULL);
#endif
  {
   irr::core::vector3d<int> tolua_ret = (irr::core::vector3d<int>)  self->getInterpolated_quadratic(*v2,*v3,d);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<int>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<int>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getInterpolated_quadratic'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: interpolate of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di_interpolate00
static int tolua_NeoGame_irr_core_vector3di_interpolate00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::vector3d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<int>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector3d<int>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::vector3d<int>* self = (irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<int>* a = ((const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::vector3d<int>* b = ((const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,3,0));
  double d = ((double)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'interpolate'", NULL);
#endif
  {
   irr::core::vector3d<int>& tolua_ret = (irr::core::vector3d<int>&)  self->interpolate(*a,*b,d);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::vector3d<int>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'interpolate'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getHorizontalAngle of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di_getHorizontalAngle00
static int tolua_NeoGame_irr_core_vector3di_getHorizontalAngle00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<int>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<int>* self = (const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getHorizontalAngle'", NULL);
#endif
  {
   irr::core::vector3d<int> tolua_ret = (irr::core::vector3d<int>)  self->getHorizontalAngle();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<int>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<int>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getHorizontalAngle'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSphericalCoordinateAngles of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di_getSphericalCoordinateAngles00
static int tolua_NeoGame_irr_core_vector3di_getSphericalCoordinateAngles00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<int>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<int>* self = (const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSphericalCoordinateAngles'", NULL);
#endif
  {
   irr::core::vector3d<int> tolua_ret = (irr::core::vector3d<int>)  self->getSphericalCoordinateAngles();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<int>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<int>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSphericalCoordinateAngles'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: rotationToDirection of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di_rotationToDirection00
static int tolua_NeoGame_irr_core_vector3di_rotationToDirection00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<int>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<int>* self = (const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'rotationToDirection'", NULL);
#endif
  {
   irr::core::vector3d<int> tolua_ret = (irr::core::vector3d<int>)  self->rotationToDirection();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<int>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<int>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'rotationToDirection'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: rotationToDirection of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3di_rotationToDirection01
static int tolua_NeoGame_irr_core_vector3di_rotationToDirection01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector3d<int>* self = (const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<int>* forwards = ((const irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'rotationToDirection'", NULL);
#endif
  {
   irr::core::vector3d<int> tolua_ret = (irr::core::vector3d<int>)  self->rotationToDirection(*forwards);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<int>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<int>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector3di_rotationToDirection00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* get function: X of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_get_irr__core__vector3d_int__X
static int tolua_get_irr__core__vector3d_int__X(lua_State* tolua_S)
{
  irr::core::vector3d<int>* self = (irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'X'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->X);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: X of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_set_irr__core__vector3d_int__X
static int tolua_set_irr__core__vector3d_int__X(lua_State* tolua_S)
{
  irr::core::vector3d<int>* self = (irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'X'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->X = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Y of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_get_irr__core__vector3d_int__Y
static int tolua_get_irr__core__vector3d_int__Y(lua_State* tolua_S)
{
  irr::core::vector3d<int>* self = (irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Y'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Y);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Y of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_set_irr__core__vector3d_int__Y
static int tolua_set_irr__core__vector3d_int__Y(lua_State* tolua_S)
{
  irr::core::vector3d<int>* self = (irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Y'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Y = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Z of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_get_irr__core__vector3d_int__Z
static int tolua_get_irr__core__vector3d_int__Z(lua_State* tolua_S)
{
  irr::core::vector3d<int>* self = (irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Z'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Z);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Z of class  irr::core::vector3d<int> */
#ifndef TOLUA_DISABLE_tolua_set_irr__core__vector3d_int__Z
static int tolua_set_irr__core__vector3d_int__Z(lua_State* tolua_S)
{
  irr::core::vector3d<int>* self = (irr::core::vector3d<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Z'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Z = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df_new00
static int tolua_NeoGame_irr_core_vector3df_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::vector3d<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   irr::core::vector3d<float>* tolua_ret = (irr::core::vector3d<float>*)  Mtolua_new((irr::core::vector3d<float>)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::vector3d<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df_new00_local
static int tolua_NeoGame_irr_core_vector3df_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::vector3d<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   irr::core::vector3d<float>* tolua_ret = (irr::core::vector3d<float>*)  Mtolua_new((irr::core::vector3d<float>)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df_new01
static int tolua_NeoGame_irr_core_vector3df_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::vector3d<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  float nx = ((float)  tolua_tonumber(tolua_S,2,0));
  float ny = ((float)  tolua_tonumber(tolua_S,3,0));
  float nz = ((float)  tolua_tonumber(tolua_S,4,0));
  {
   irr::core::vector3d<float>* tolua_ret = (irr::core::vector3d<float>*)  Mtolua_new((irr::core::vector3d<float>)(nx,ny,nz));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::vector3d<float>");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector3df_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df_new01_local
static int tolua_NeoGame_irr_core_vector3df_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::vector3d<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  float nx = ((float)  tolua_tonumber(tolua_S,2,0));
  float ny = ((float)  tolua_tonumber(tolua_S,3,0));
  float nz = ((float)  tolua_tonumber(tolua_S,4,0));
  {
   irr::core::vector3d<float>* tolua_ret = (irr::core::vector3d<float>*)  Mtolua_new((irr::core::vector3d<float>)(nx,ny,nz));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector3df_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df_new02
static int tolua_NeoGame_irr_core_vector3df_new02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::vector3d<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  float n = ((float)  tolua_tonumber(tolua_S,2,0));
  {
   irr::core::vector3d<float>* tolua_ret = (irr::core::vector3d<float>*)  Mtolua_new((irr::core::vector3d<float>)(n));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::vector3d<float>");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector3df_new01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df_new02_local
static int tolua_NeoGame_irr_core_vector3df_new02_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::vector3d<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  float n = ((float)  tolua_tonumber(tolua_S,2,0));
  {
   irr::core::vector3d<float>* tolua_ret = (irr::core::vector3d<float>*)  Mtolua_new((irr::core::vector3d<float>)(n));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector3df_new01_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df_new03
static int tolua_NeoGame_irr_core_vector3df_new03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::vector3d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector3d<float>* other = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  {
   irr::core::vector3d<float>* tolua_ret = (irr::core::vector3d<float>*)  Mtolua_new((irr::core::vector3d<float>)(*other));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::vector3d<float>");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector3df_new02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df_new03_local
static int tolua_NeoGame_irr_core_vector3df_new03_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::vector3d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector3d<float>* other = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  {
   irr::core::vector3d<float>* tolua_ret = (irr::core::vector3d<float>*)  Mtolua_new((irr::core::vector3d<float>)(*other));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector3df_new02_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator- of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df__sub00
static int tolua_NeoGame_irr_core_vector3df__sub00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<float>* self = (const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator-'", NULL);
#endif
  {
   irr::core::vector3d<float> tolua_ret = (irr::core::vector3d<float>)  self->operator-();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.sub'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator+ of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df__add00
static int tolua_NeoGame_irr_core_vector3df__add00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<float>* self = (const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* other = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator+'", NULL);
#endif
  {
   irr::core::vector3d<float> tolua_ret = (irr::core::vector3d<float>)  self->operator+(*other);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.add'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator+ of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df__add01
static int tolua_NeoGame_irr_core_vector3df__add01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector3d<float>* self = (const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
  const float val = ((const float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator+'", NULL);
#endif
  {
   irr::core::vector3d<float> tolua_ret = (irr::core::vector3d<float>)  self->operator+(val);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector3df__add00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator- of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df__sub01
static int tolua_NeoGame_irr_core_vector3df__sub01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector3d<float>* self = (const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* other = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator-'", NULL);
#endif
  {
   irr::core::vector3d<float> tolua_ret = (irr::core::vector3d<float>)  self->operator-(*other);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector3df__sub00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator- of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df__sub02
static int tolua_NeoGame_irr_core_vector3df__sub02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector3d<float>* self = (const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
  const float val = ((const float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator-'", NULL);
#endif
  {
   irr::core::vector3d<float> tolua_ret = (irr::core::vector3d<float>)  self->operator-(val);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector3df__sub01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator* of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df__mul00
static int tolua_NeoGame_irr_core_vector3df__mul00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<float>* self = (const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* other = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator*'", NULL);
#endif
  {
   irr::core::vector3d<float> tolua_ret = (irr::core::vector3d<float>)  self->operator*(*other);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.mul'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator* of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df__mul01
static int tolua_NeoGame_irr_core_vector3df__mul01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector3d<float>* self = (const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
  const float v = ((const float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator*'", NULL);
#endif
  {
   irr::core::vector3d<float> tolua_ret = (irr::core::vector3d<float>)  self->operator*(v);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector3df__mul00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator/ of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df__div00
static int tolua_NeoGame_irr_core_vector3df__div00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<float>* self = (const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* other = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator/'", NULL);
#endif
  {
   irr::core::vector3d<float> tolua_ret = (irr::core::vector3d<float>)  self->operator/(*other);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.div'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator/ of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df__div01
static int tolua_NeoGame_irr_core_vector3df__div01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector3d<float>* self = (const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
  const float v = ((const float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator/'", NULL);
#endif
  {
   irr::core::vector3d<float> tolua_ret = (irr::core::vector3d<float>)  self->operator/(v);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector3df__div00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator<= of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df__le00
static int tolua_NeoGame_irr_core_vector3df__le00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<float>* self = (const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* other = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator<='", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->operator<=(*other);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.le'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator< of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df__lt00
static int tolua_NeoGame_irr_core_vector3df__lt00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<float>* self = (const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* other = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator<'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->operator<(*other);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.lt'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator== of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df__eq00
static int tolua_NeoGame_irr_core_vector3df__eq00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<float>* self = (const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* other = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator=='", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->operator==(*other);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.eq'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: equals of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df_equals00
static int tolua_NeoGame_irr_core_vector3df_equals00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<float>* self = (const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* other = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'equals'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->equals(*other);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'equals'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: equals of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df_equals01
static int tolua_NeoGame_irr_core_vector3df_equals01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector3d<float>* self = (const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* other = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  const float tolerance = ((const float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'equals'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->equals(*other,tolerance);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector3df_equals00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df_set00
static int tolua_NeoGame_irr_core_vector3df_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::vector3d<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::vector3d<float>* self = (irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
  const float nx = ((const float)  tolua_tonumber(tolua_S,2,0));
  const float ny = ((const float)  tolua_tonumber(tolua_S,3,0));
  const float nz = ((const float)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'", NULL);
#endif
  {
   irr::core::vector3d<float>& tolua_ret = (irr::core::vector3d<float>&)  self->set(nx,ny,nz);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::vector3d<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df_set01
static int tolua_NeoGame_irr_core_vector3df_set01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::vector3d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::core::vector3d<float>* self = (irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* p = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'", NULL);
#endif
  {
   irr::core::vector3d<float>& tolua_ret = (irr::core::vector3d<float>&)  self->set(*p);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::vector3d<float>");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector3df_set00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getLength of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df_getLength00
static int tolua_NeoGame_irr_core_vector3df_getLength00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<float>* self = (const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getLength'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getLength();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLength'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getLengthSQ of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df_getLengthSQ00
static int tolua_NeoGame_irr_core_vector3df_getLengthSQ00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<float>* self = (const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getLengthSQ'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getLengthSQ();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLengthSQ'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: dotProduct of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df_dotProduct00
static int tolua_NeoGame_irr_core_vector3df_dotProduct00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<float>* self = (const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* other = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'dotProduct'", NULL);
#endif
  {
   float tolua_ret = (float)  self->dotProduct(*other);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'dotProduct'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDistanceFrom of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df_getDistanceFrom00
static int tolua_NeoGame_irr_core_vector3df_getDistanceFrom00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<float>* self = (const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* other = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDistanceFrom'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getDistanceFrom(*other);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDistanceFrom'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDistanceFromSQ of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df_getDistanceFromSQ00
static int tolua_NeoGame_irr_core_vector3df_getDistanceFromSQ00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<float>* self = (const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* other = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDistanceFromSQ'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getDistanceFromSQ(*other);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDistanceFromSQ'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: crossProduct of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df_crossProduct00
static int tolua_NeoGame_irr_core_vector3df_crossProduct00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<float>* self = (const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* p = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'crossProduct'", NULL);
#endif
  {
   irr::core::vector3d<float> tolua_ret = (irr::core::vector3d<float>)  self->crossProduct(*p);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'crossProduct'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isBetweenPoints of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df_isBetweenPoints00
static int tolua_NeoGame_irr_core_vector3df_isBetweenPoints00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<float>* self = (const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* begin = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::vector3d<float>* end = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isBetweenPoints'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isBetweenPoints(*begin,*end);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isBetweenPoints'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: normalize of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df_normalize00
static int tolua_NeoGame_irr_core_vector3df_normalize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::vector3d<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::vector3d<float>* self = (irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'normalize'", NULL);
#endif
  {
   irr::core::vector3d<float>& tolua_ret = (irr::core::vector3d<float>&)  self->normalize();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::vector3d<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'normalize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setLength of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df_setLength00
static int tolua_NeoGame_irr_core_vector3df_setLength00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::vector3d<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::vector3d<float>* self = (irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
  float newlength = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setLength'", NULL);
#endif
  {
   irr::core::vector3d<float>& tolua_ret = (irr::core::vector3d<float>&)  self->setLength(newlength);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::vector3d<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setLength'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: invert of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df_invert00
static int tolua_NeoGame_irr_core_vector3df_invert00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::vector3d<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::vector3d<float>* self = (irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'invert'", NULL);
#endif
  {
   irr::core::vector3d<float>& tolua_ret = (irr::core::vector3d<float>&)  self->invert();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::vector3d<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'invert'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: rotateXZBy of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df_rotateXZBy00
static int tolua_NeoGame_irr_core_vector3df_rotateXZBy00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::vector3d<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::vector3d<float>* self = (irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
  double degrees = ((double)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'rotateXZBy'", NULL);
#endif
  {
   self->rotateXZBy(degrees);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'rotateXZBy'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: rotateXZBy of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df_rotateXZBy01
static int tolua_NeoGame_irr_core_vector3df_rotateXZBy01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::vector3d<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::core::vector3d<float>* self = (irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
  double degrees = ((double)  tolua_tonumber(tolua_S,2,0));
  const irr::core::vector3d<float>* center = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'rotateXZBy'", NULL);
#endif
  {
   self->rotateXZBy(degrees,*center);
  }
 }
 return 0;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector3df_rotateXZBy00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: rotateXYBy of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df_rotateXYBy00
static int tolua_NeoGame_irr_core_vector3df_rotateXYBy00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::vector3d<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::vector3d<float>* self = (irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
  double degrees = ((double)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'rotateXYBy'", NULL);
#endif
  {
   self->rotateXYBy(degrees);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'rotateXYBy'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: rotateXYBy of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df_rotateXYBy01
static int tolua_NeoGame_irr_core_vector3df_rotateXYBy01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::vector3d<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::core::vector3d<float>* self = (irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
  double degrees = ((double)  tolua_tonumber(tolua_S,2,0));
  const irr::core::vector3d<float>* center = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'rotateXYBy'", NULL);
#endif
  {
   self->rotateXYBy(degrees,*center);
  }
 }
 return 0;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector3df_rotateXYBy00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: rotateYZBy of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df_rotateYZBy00
static int tolua_NeoGame_irr_core_vector3df_rotateYZBy00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::vector3d<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::vector3d<float>* self = (irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
  double degrees = ((double)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'rotateYZBy'", NULL);
#endif
  {
   self->rotateYZBy(degrees);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'rotateYZBy'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: rotateYZBy of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df_rotateYZBy01
static int tolua_NeoGame_irr_core_vector3df_rotateYZBy01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::vector3d<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::core::vector3d<float>* self = (irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
  double degrees = ((double)  tolua_tonumber(tolua_S,2,0));
  const irr::core::vector3d<float>* center = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'rotateYZBy'", NULL);
#endif
  {
   self->rotateYZBy(degrees,*center);
  }
 }
 return 0;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector3df_rotateYZBy00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getInterpolated of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df_getInterpolated00
static int tolua_NeoGame_irr_core_vector3df_getInterpolated00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<float>* self = (const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* other = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  double d = ((double)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getInterpolated'", NULL);
#endif
  {
   irr::core::vector3d<float> tolua_ret = (irr::core::vector3d<float>)  self->getInterpolated(*other,d);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getInterpolated'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getInterpolated_quadratic of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df_getInterpolated_quadratic00
static int tolua_NeoGame_irr_core_vector3df_getInterpolated_quadratic00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<float>* self = (const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* v2 = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::vector3d<float>* v3 = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,3,0));
  double d = ((double)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getInterpolated_quadratic'", NULL);
#endif
  {
   irr::core::vector3d<float> tolua_ret = (irr::core::vector3d<float>)  self->getInterpolated_quadratic(*v2,*v3,d);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getInterpolated_quadratic'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: interpolate of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df_interpolate00
static int tolua_NeoGame_irr_core_vector3df_interpolate00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::vector3d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::vector3d<float>* self = (irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* a = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::vector3d<float>* b = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,3,0));
  double d = ((double)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'interpolate'", NULL);
#endif
  {
   irr::core::vector3d<float>& tolua_ret = (irr::core::vector3d<float>&)  self->interpolate(*a,*b,d);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::vector3d<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'interpolate'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getHorizontalAngle of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df_getHorizontalAngle00
static int tolua_NeoGame_irr_core_vector3df_getHorizontalAngle00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<float>* self = (const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getHorizontalAngle'", NULL);
#endif
  {
   irr::core::vector3d<float> tolua_ret = (irr::core::vector3d<float>)  self->getHorizontalAngle();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getHorizontalAngle'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSphericalCoordinateAngles of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df_getSphericalCoordinateAngles00
static int tolua_NeoGame_irr_core_vector3df_getSphericalCoordinateAngles00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<float>* self = (const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSphericalCoordinateAngles'", NULL);
#endif
  {
   irr::core::vector3d<float> tolua_ret = (irr::core::vector3d<float>)  self->getSphericalCoordinateAngles();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSphericalCoordinateAngles'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: rotationToDirection of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df_rotationToDirection00
static int tolua_NeoGame_irr_core_vector3df_rotationToDirection00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector3d<float>* self = (const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'rotationToDirection'", NULL);
#endif
  {
   irr::core::vector3d<float> tolua_ret = (irr::core::vector3d<float>)  self->rotationToDirection();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'rotationToDirection'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: rotationToDirection of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector3df_rotationToDirection01
static int tolua_NeoGame_irr_core_vector3df_rotationToDirection01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector3d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector3d<float>* self = (const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* forwards = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'rotationToDirection'", NULL);
#endif
  {
   irr::core::vector3d<float> tolua_ret = (irr::core::vector3d<float>)  self->rotationToDirection(*forwards);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector3df_rotationToDirection00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* get function: X of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_get_irr__core__vector3d_float__X
static int tolua_get_irr__core__vector3d_float__X(lua_State* tolua_S)
{
  irr::core::vector3d<float>* self = (irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'X'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->X);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: X of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_set_irr__core__vector3d_float__X
static int tolua_set_irr__core__vector3d_float__X(lua_State* tolua_S)
{
  irr::core::vector3d<float>* self = (irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'X'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->X = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Y of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_get_irr__core__vector3d_float__Y
static int tolua_get_irr__core__vector3d_float__Y(lua_State* tolua_S)
{
  irr::core::vector3d<float>* self = (irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Y'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Y);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Y of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_set_irr__core__vector3d_float__Y
static int tolua_set_irr__core__vector3d_float__Y(lua_State* tolua_S)
{
  irr::core::vector3d<float>* self = (irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Y'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Y = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Z of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_get_irr__core__vector3d_float__Z
static int tolua_get_irr__core__vector3d_float__Z(lua_State* tolua_S)
{
  irr::core::vector3d<float>* self = (irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Z'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Z);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Z of class  irr::core::vector3d<float> */
#ifndef TOLUA_DISABLE_tolua_set_irr__core__vector3d_float__Z
static int tolua_set_irr__core__vector3d_float__Z(lua_State* tolua_S)
{
  irr::core::vector3d<float>* self = (irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Z'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Z = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di_new00
static int tolua_NeoGame_irr_core_vector2di_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::vector2d<int>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   irr::core::vector2d<int>* tolua_ret = (irr::core::vector2d<int>*)  Mtolua_new((irr::core::vector2d<int>)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::vector2d<int>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di_new00_local
static int tolua_NeoGame_irr_core_vector2di_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::vector2d<int>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   irr::core::vector2d<int>* tolua_ret = (irr::core::vector2d<int>*)  Mtolua_new((irr::core::vector2d<int>)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::vector2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di_new01
static int tolua_NeoGame_irr_core_vector2di_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::vector2d<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  int nx = ((int)  tolua_tonumber(tolua_S,2,0));
  int ny = ((int)  tolua_tonumber(tolua_S,3,0));
  {
   irr::core::vector2d<int>* tolua_ret = (irr::core::vector2d<int>*)  Mtolua_new((irr::core::vector2d<int>)(nx,ny));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::vector2d<int>");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector2di_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di_new01_local
static int tolua_NeoGame_irr_core_vector2di_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::vector2d<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  int nx = ((int)  tolua_tonumber(tolua_S,2,0));
  int ny = ((int)  tolua_tonumber(tolua_S,3,0));
  {
   irr::core::vector2d<int>* tolua_ret = (irr::core::vector2d<int>*)  Mtolua_new((irr::core::vector2d<int>)(nx,ny));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::vector2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector2di_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di_new02
static int tolua_NeoGame_irr_core_vector2di_new02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::vector2d<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  int n = ((int)  tolua_tonumber(tolua_S,2,0));
  {
   irr::core::vector2d<int>* tolua_ret = (irr::core::vector2d<int>*)  Mtolua_new((irr::core::vector2d<int>)(n));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::vector2d<int>");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector2di_new01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di_new02_local
static int tolua_NeoGame_irr_core_vector2di_new02_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::vector2d<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  int n = ((int)  tolua_tonumber(tolua_S,2,0));
  {
   irr::core::vector2d<int>* tolua_ret = (irr::core::vector2d<int>*)  Mtolua_new((irr::core::vector2d<int>)(n));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::vector2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector2di_new01_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di_new03
static int tolua_NeoGame_irr_core_vector2di_new03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::vector2d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector2d<int>* other = ((const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,2,0));
  {
   irr::core::vector2d<int>* tolua_ret = (irr::core::vector2d<int>*)  Mtolua_new((irr::core::vector2d<int>)(*other));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::vector2d<int>");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector2di_new02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di_new03_local
static int tolua_NeoGame_irr_core_vector2di_new03_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::vector2d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector2d<int>* other = ((const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,2,0));
  {
   irr::core::vector2d<int>* tolua_ret = (irr::core::vector2d<int>*)  Mtolua_new((irr::core::vector2d<int>)(*other));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::vector2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector2di_new02_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di_new04
static int tolua_NeoGame_irr_core_vector2di_new04(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::vector2d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::dimension2d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::dimension2d<int>* other = ((const irr::core::dimension2d<int>*)  tolua_tousertype(tolua_S,2,0));
  {
   irr::core::vector2d<int>* tolua_ret = (irr::core::vector2d<int>*)  Mtolua_new((irr::core::vector2d<int>)(*other));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::vector2d<int>");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector2di_new03(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di_new04_local
static int tolua_NeoGame_irr_core_vector2di_new04_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::vector2d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::dimension2d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::dimension2d<int>* other = ((const irr::core::dimension2d<int>*)  tolua_tousertype(tolua_S,2,0));
  {
   irr::core::vector2d<int>* tolua_ret = (irr::core::vector2d<int>*)  Mtolua_new((irr::core::vector2d<int>)(*other));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::vector2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector2di_new03_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator- of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di__sub00
static int tolua_NeoGame_irr_core_vector2di__sub00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::vector2d<int>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::vector2d<int>* self = (irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator-'", NULL);
#endif
  {
   irr::core::vector2d<int> tolua_ret = (irr::core::vector2d<int>)  self->operator-();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector2d<int>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector2d<int>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.sub'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator+ of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di__add00
static int tolua_NeoGame_irr_core_vector2di__add00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector2d<int>* self = (const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector2d<int>* other = ((const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator+'", NULL);
#endif
  {
   irr::core::vector2d<int> tolua_ret = (irr::core::vector2d<int>)  self->operator+(*other);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector2d<int>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector2d<int>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.add'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator+ of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di__add01
static int tolua_NeoGame_irr_core_vector2di__add01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::dimension2d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector2d<int>* self = (const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::dimension2d<int>* other = ((const irr::core::dimension2d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator+'", NULL);
#endif
  {
   irr::core::vector2d<int> tolua_ret = (irr::core::vector2d<int>)  self->operator+(*other);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector2d<int>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector2d<int>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector2di__add00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator+ of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di__add02
static int tolua_NeoGame_irr_core_vector2di__add02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector2d<int>* self = (const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,1,0);
  const int v = ((const int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator+'", NULL);
#endif
  {
   irr::core::vector2d<int> tolua_ret = (irr::core::vector2d<int>)  self->operator+(v);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector2d<int>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector2d<int>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector2di__add01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator- of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di__sub01
static int tolua_NeoGame_irr_core_vector2di__sub01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector2d<int>* self = (const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector2d<int>* other = ((const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator-'", NULL);
#endif
  {
   irr::core::vector2d<int> tolua_ret = (irr::core::vector2d<int>)  self->operator-(*other);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector2d<int>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector2d<int>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector2di__sub00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator- of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di__sub02
static int tolua_NeoGame_irr_core_vector2di__sub02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::dimension2d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector2d<int>* self = (const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::dimension2d<int>* other = ((const irr::core::dimension2d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator-'", NULL);
#endif
  {
   irr::core::vector2d<int> tolua_ret = (irr::core::vector2d<int>)  self->operator-(*other);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector2d<int>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector2d<int>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector2di__sub01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator- of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di__sub03
static int tolua_NeoGame_irr_core_vector2di__sub03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector2d<int>* self = (const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,1,0);
  const int v = ((const int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator-'", NULL);
#endif
  {
   irr::core::vector2d<int> tolua_ret = (irr::core::vector2d<int>)  self->operator-(v);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector2d<int>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector2d<int>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector2di__sub02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator* of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di__mul00
static int tolua_NeoGame_irr_core_vector2di__mul00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector2d<int>* self = (const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector2d<int>* other = ((const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator*'", NULL);
#endif
  {
   irr::core::vector2d<int> tolua_ret = (irr::core::vector2d<int>)  self->operator*(*other);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector2d<int>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector2d<int>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.mul'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator* of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di__mul01
static int tolua_NeoGame_irr_core_vector2di__mul01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector2d<int>* self = (const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,1,0);
  const int v = ((const int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator*'", NULL);
#endif
  {
   irr::core::vector2d<int> tolua_ret = (irr::core::vector2d<int>)  self->operator*(v);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector2d<int>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector2d<int>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector2di__mul00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator/ of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di__div00
static int tolua_NeoGame_irr_core_vector2di__div00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector2d<int>* self = (const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector2d<int>* other = ((const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator/'", NULL);
#endif
  {
   irr::core::vector2d<int> tolua_ret = (irr::core::vector2d<int>)  self->operator/(*other);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector2d<int>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector2d<int>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.div'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator/ of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di__div01
static int tolua_NeoGame_irr_core_vector2di__div01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector2d<int>* self = (const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,1,0);
  const int v = ((const int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator/'", NULL);
#endif
  {
   irr::core::vector2d<int> tolua_ret = (irr::core::vector2d<int>)  self->operator/(v);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector2d<int>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector2d<int>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector2di__div00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator<= of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di__le00
static int tolua_NeoGame_irr_core_vector2di__le00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector2d<int>* self = (const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector2d<int>* other = ((const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator<='", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->operator<=(*other);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.le'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator< of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di__lt00
static int tolua_NeoGame_irr_core_vector2di__lt00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector2d<int>* self = (const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector2d<int>* other = ((const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator<'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->operator<(*other);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.lt'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator== of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di__eq00
static int tolua_NeoGame_irr_core_vector2di__eq00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector2d<int>* self = (const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector2d<int>* other = ((const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator=='", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->operator==(*other);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.eq'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: equals of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di_equals00
static int tolua_NeoGame_irr_core_vector2di_equals00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector2d<int>* self = (const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector2d<int>* other = ((const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'equals'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->equals(*other);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'equals'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di_set00
static int tolua_NeoGame_irr_core_vector2di_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::vector2d<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::vector2d<int>* self = (irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,1,0);
  int nx = ((int)  tolua_tonumber(tolua_S,2,0));
  int ny = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'", NULL);
#endif
  {
   irr::core::vector2d<int>& tolua_ret = (irr::core::vector2d<int>&)  self->set(nx,ny);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::vector2d<int>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di_set01
static int tolua_NeoGame_irr_core_vector2di_set01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::vector2d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::core::vector2d<int>* self = (irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector2d<int>* p = ((const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'", NULL);
#endif
  {
   irr::core::vector2d<int>& tolua_ret = (irr::core::vector2d<int>&)  self->set(*p);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::vector2d<int>");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector2di_set00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getLength of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di_getLength00
static int tolua_NeoGame_irr_core_vector2di_getLength00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<int>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector2d<int>* self = (const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getLength'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getLength();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLength'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getLengthSQ of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di_getLengthSQ00
static int tolua_NeoGame_irr_core_vector2di_getLengthSQ00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<int>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector2d<int>* self = (const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getLengthSQ'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getLengthSQ();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLengthSQ'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: dotProduct of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di_dotProduct00
static int tolua_NeoGame_irr_core_vector2di_dotProduct00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector2d<int>* self = (const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector2d<int>* other = ((const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'dotProduct'", NULL);
#endif
  {
   int tolua_ret = (int)  self->dotProduct(*other);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'dotProduct'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDistanceFrom of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di_getDistanceFrom00
static int tolua_NeoGame_irr_core_vector2di_getDistanceFrom00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector2d<int>* self = (const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector2d<int>* other = ((const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDistanceFrom'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getDistanceFrom(*other);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDistanceFrom'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDistanceFromSQ of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di_getDistanceFromSQ00
static int tolua_NeoGame_irr_core_vector2di_getDistanceFromSQ00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector2d<int>* self = (const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector2d<int>* other = ((const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDistanceFromSQ'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getDistanceFromSQ(*other);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDistanceFromSQ'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: rotateBy of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di_rotateBy00
static int tolua_NeoGame_irr_core_vector2di_rotateBy00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::vector2d<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::vector2d<int>* self = (irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,1,0);
  double degrees = ((double)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'rotateBy'", NULL);
#endif
  {
   irr::core::vector2d<int>& tolua_ret = (irr::core::vector2d<int>&)  self->rotateBy(degrees);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::vector2d<int>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'rotateBy'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: rotateBy of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di_rotateBy01
static int tolua_NeoGame_irr_core_vector2di_rotateBy01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::vector2d<int>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector2d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::core::vector2d<int>* self = (irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,1,0);
  double degrees = ((double)  tolua_tonumber(tolua_S,2,0));
  const irr::core::vector2d<int>* center = ((const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'rotateBy'", NULL);
#endif
  {
   irr::core::vector2d<int>& tolua_ret = (irr::core::vector2d<int>&)  self->rotateBy(degrees,*center);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::vector2d<int>");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector2di_rotateBy00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: normalize of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di_normalize00
static int tolua_NeoGame_irr_core_vector2di_normalize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::vector2d<int>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::vector2d<int>* self = (irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'normalize'", NULL);
#endif
  {
   irr::core::vector2d<int>& tolua_ret = (irr::core::vector2d<int>&)  self->normalize();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::vector2d<int>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'normalize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAngleTrig of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di_getAngleTrig00
static int tolua_NeoGame_irr_core_vector2di_getAngleTrig00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<int>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector2d<int>* self = (const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAngleTrig'", NULL);
#endif
  {
   double tolua_ret = (double)  self->getAngleTrig();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAngleTrig'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAngle of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di_getAngle00
static int tolua_NeoGame_irr_core_vector2di_getAngle00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<int>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector2d<int>* self = (const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAngle'", NULL);
#endif
  {
   double tolua_ret = (double)  self->getAngle();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAngle'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAngleWith of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di_getAngleWith00
static int tolua_NeoGame_irr_core_vector2di_getAngleWith00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector2d<int>* self = (const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector2d<int>* b = ((const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAngleWith'", NULL);
#endif
  {
   double tolua_ret = (double)  self->getAngleWith(*b);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAngleWith'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isBetweenPoints of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di_isBetweenPoints00
static int tolua_NeoGame_irr_core_vector2di_isBetweenPoints00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<int>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector2d<int>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector2d<int>* self = (const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector2d<int>* begin = ((const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::vector2d<int>* end = ((const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isBetweenPoints'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isBetweenPoints(*begin,*end);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isBetweenPoints'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getInterpolated of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di_getInterpolated00
static int tolua_NeoGame_irr_core_vector2di_getInterpolated00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<int>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector2d<int>* self = (const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector2d<int>* other = ((const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,2,0));
  double d = ((double)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getInterpolated'", NULL);
#endif
  {
   irr::core::vector2d<int> tolua_ret = (irr::core::vector2d<int>)  self->getInterpolated(*other,d);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector2d<int>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector2d<int>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getInterpolated'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getInterpolated_quadratic of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di_getInterpolated_quadratic00
static int tolua_NeoGame_irr_core_vector2di_getInterpolated_quadratic00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<int>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector2d<int>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector2d<int>* self = (const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector2d<int>* v2 = ((const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::vector2d<int>* v3 = ((const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,3,0));
  double d = ((double)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getInterpolated_quadratic'", NULL);
#endif
  {
   irr::core::vector2d<int> tolua_ret = (irr::core::vector2d<int>)  self->getInterpolated_quadratic(*v2,*v3,d);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector2d<int>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector2d<int>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<int>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getInterpolated_quadratic'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: interpolate of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2di_interpolate00
static int tolua_NeoGame_irr_core_vector2di_interpolate00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::vector2d<int>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<int>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector2d<int>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::vector2d<int>* self = (irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector2d<int>* a = ((const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::vector2d<int>* b = ((const irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,3,0));
  double d = ((double)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'interpolate'", NULL);
#endif
  {
   irr::core::vector2d<int>& tolua_ret = (irr::core::vector2d<int>&)  self->interpolate(*a,*b,d);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::vector2d<int>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'interpolate'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: X of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_get_irr__core__vector2d_int__X
static int tolua_get_irr__core__vector2d_int__X(lua_State* tolua_S)
{
  irr::core::vector2d<int>* self = (irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'X'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->X);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: X of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_set_irr__core__vector2d_int__X
static int tolua_set_irr__core__vector2d_int__X(lua_State* tolua_S)
{
  irr::core::vector2d<int>* self = (irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'X'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->X = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Y of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_get_irr__core__vector2d_int__Y
static int tolua_get_irr__core__vector2d_int__Y(lua_State* tolua_S)
{
  irr::core::vector2d<int>* self = (irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Y'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Y);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Y of class  irr::core::vector2d<int> */
#ifndef TOLUA_DISABLE_tolua_set_irr__core__vector2d_int__Y
static int tolua_set_irr__core__vector2d_int__Y(lua_State* tolua_S)
{
  irr::core::vector2d<int>* self = (irr::core::vector2d<int>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Y'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Y = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df_new00
static int tolua_NeoGame_irr_core_vector2df_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::vector2d<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   irr::core::vector2d<float>* tolua_ret = (irr::core::vector2d<float>*)  Mtolua_new((irr::core::vector2d<float>)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::vector2d<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df_new00_local
static int tolua_NeoGame_irr_core_vector2df_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::vector2d<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   irr::core::vector2d<float>* tolua_ret = (irr::core::vector2d<float>*)  Mtolua_new((irr::core::vector2d<float>)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::vector2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df_new01
static int tolua_NeoGame_irr_core_vector2df_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::vector2d<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  float nx = ((float)  tolua_tonumber(tolua_S,2,0));
  float ny = ((float)  tolua_tonumber(tolua_S,3,0));
  {
   irr::core::vector2d<float>* tolua_ret = (irr::core::vector2d<float>*)  Mtolua_new((irr::core::vector2d<float>)(nx,ny));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::vector2d<float>");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector2df_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df_new01_local
static int tolua_NeoGame_irr_core_vector2df_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::vector2d<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  float nx = ((float)  tolua_tonumber(tolua_S,2,0));
  float ny = ((float)  tolua_tonumber(tolua_S,3,0));
  {
   irr::core::vector2d<float>* tolua_ret = (irr::core::vector2d<float>*)  Mtolua_new((irr::core::vector2d<float>)(nx,ny));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::vector2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector2df_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df_new02
static int tolua_NeoGame_irr_core_vector2df_new02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::vector2d<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  float n = ((float)  tolua_tonumber(tolua_S,2,0));
  {
   irr::core::vector2d<float>* tolua_ret = (irr::core::vector2d<float>*)  Mtolua_new((irr::core::vector2d<float>)(n));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::vector2d<float>");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector2df_new01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df_new02_local
static int tolua_NeoGame_irr_core_vector2df_new02_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::vector2d<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  float n = ((float)  tolua_tonumber(tolua_S,2,0));
  {
   irr::core::vector2d<float>* tolua_ret = (irr::core::vector2d<float>*)  Mtolua_new((irr::core::vector2d<float>)(n));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::vector2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector2df_new01_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df_new03
static int tolua_NeoGame_irr_core_vector2df_new03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::vector2d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector2d<float>* other = ((const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,2,0));
  {
   irr::core::vector2d<float>* tolua_ret = (irr::core::vector2d<float>*)  Mtolua_new((irr::core::vector2d<float>)(*other));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::vector2d<float>");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector2df_new02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df_new03_local
static int tolua_NeoGame_irr_core_vector2df_new03_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::vector2d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector2d<float>* other = ((const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,2,0));
  {
   irr::core::vector2d<float>* tolua_ret = (irr::core::vector2d<float>*)  Mtolua_new((irr::core::vector2d<float>)(*other));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::vector2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector2df_new02_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df_new04
static int tolua_NeoGame_irr_core_vector2df_new04(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::vector2d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::dimension2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::dimension2d<float>* other = ((const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,2,0));
  {
   irr::core::vector2d<float>* tolua_ret = (irr::core::vector2d<float>*)  Mtolua_new((irr::core::vector2d<float>)(*other));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::vector2d<float>");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector2df_new03(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df_new04_local
static int tolua_NeoGame_irr_core_vector2df_new04_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"irr::core::vector2d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::dimension2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::dimension2d<float>* other = ((const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,2,0));
  {
   irr::core::vector2d<float>* tolua_ret = (irr::core::vector2d<float>*)  Mtolua_new((irr::core::vector2d<float>)(*other));
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::core::vector2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector2df_new03_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator- of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df__sub00
static int tolua_NeoGame_irr_core_vector2df__sub00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::vector2d<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::vector2d<float>* self = (irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator-'", NULL);
#endif
  {
   irr::core::vector2d<float> tolua_ret = (irr::core::vector2d<float>)  self->operator-();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector2d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector2d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.sub'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator+ of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df__add00
static int tolua_NeoGame_irr_core_vector2df__add00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector2d<float>* self = (const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector2d<float>* other = ((const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator+'", NULL);
#endif
  {
   irr::core::vector2d<float> tolua_ret = (irr::core::vector2d<float>)  self->operator+(*other);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector2d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector2d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.add'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator+ of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df__add01
static int tolua_NeoGame_irr_core_vector2df__add01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::dimension2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector2d<float>* self = (const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::dimension2d<float>* other = ((const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator+'", NULL);
#endif
  {
   irr::core::vector2d<float> tolua_ret = (irr::core::vector2d<float>)  self->operator+(*other);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector2d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector2d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector2df__add00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator+ of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df__add02
static int tolua_NeoGame_irr_core_vector2df__add02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector2d<float>* self = (const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,1,0);
  const float v = ((const float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator+'", NULL);
#endif
  {
   irr::core::vector2d<float> tolua_ret = (irr::core::vector2d<float>)  self->operator+(v);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector2d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector2d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector2df__add01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator- of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df__sub01
static int tolua_NeoGame_irr_core_vector2df__sub01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector2d<float>* self = (const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector2d<float>* other = ((const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator-'", NULL);
#endif
  {
   irr::core::vector2d<float> tolua_ret = (irr::core::vector2d<float>)  self->operator-(*other);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector2d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector2d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector2df__sub00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator- of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df__sub02
static int tolua_NeoGame_irr_core_vector2df__sub02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::dimension2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector2d<float>* self = (const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::dimension2d<float>* other = ((const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator-'", NULL);
#endif
  {
   irr::core::vector2d<float> tolua_ret = (irr::core::vector2d<float>)  self->operator-(*other);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector2d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector2d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector2df__sub01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator- of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df__sub03
static int tolua_NeoGame_irr_core_vector2df__sub03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector2d<float>* self = (const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,1,0);
  const float v = ((const float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator-'", NULL);
#endif
  {
   irr::core::vector2d<float> tolua_ret = (irr::core::vector2d<float>)  self->operator-(v);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector2d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector2d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector2df__sub02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator* of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df__mul00
static int tolua_NeoGame_irr_core_vector2df__mul00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector2d<float>* self = (const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector2d<float>* other = ((const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator*'", NULL);
#endif
  {
   irr::core::vector2d<float> tolua_ret = (irr::core::vector2d<float>)  self->operator*(*other);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector2d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector2d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.mul'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator* of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df__mul01
static int tolua_NeoGame_irr_core_vector2df__mul01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector2d<float>* self = (const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,1,0);
  const float v = ((const float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator*'", NULL);
#endif
  {
   irr::core::vector2d<float> tolua_ret = (irr::core::vector2d<float>)  self->operator*(v);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector2d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector2d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector2df__mul00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator/ of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df__div00
static int tolua_NeoGame_irr_core_vector2df__div00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector2d<float>* self = (const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector2d<float>* other = ((const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator/'", NULL);
#endif
  {
   irr::core::vector2d<float> tolua_ret = (irr::core::vector2d<float>)  self->operator/(*other);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector2d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector2d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.div'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator/ of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df__div01
static int tolua_NeoGame_irr_core_vector2df__div01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  const irr::core::vector2d<float>* self = (const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,1,0);
  const float v = ((const float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator/'", NULL);
#endif
  {
   irr::core::vector2d<float> tolua_ret = (irr::core::vector2d<float>)  self->operator/(v);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector2d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector2d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector2df__div00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator<= of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df__le00
static int tolua_NeoGame_irr_core_vector2df__le00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector2d<float>* self = (const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector2d<float>* other = ((const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator<='", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->operator<=(*other);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.le'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator< of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df__lt00
static int tolua_NeoGame_irr_core_vector2df__lt00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector2d<float>* self = (const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector2d<float>* other = ((const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator<'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->operator<(*other);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.lt'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: operator== of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df__eq00
static int tolua_NeoGame_irr_core_vector2df__eq00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector2d<float>* self = (const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector2d<float>* other = ((const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'operator=='", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->operator==(*other);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function '.eq'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: equals of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df_equals00
static int tolua_NeoGame_irr_core_vector2df_equals00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector2d<float>* self = (const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector2d<float>* other = ((const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'equals'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->equals(*other);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'equals'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df_set00
static int tolua_NeoGame_irr_core_vector2df_set00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::vector2d<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::vector2d<float>* self = (irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,1,0);
  float nx = ((float)  tolua_tonumber(tolua_S,2,0));
  float ny = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'", NULL);
#endif
  {
   irr::core::vector2d<float>& tolua_ret = (irr::core::vector2d<float>&)  self->set(nx,ny);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::vector2d<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'set'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: set of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df_set01
static int tolua_NeoGame_irr_core_vector2df_set01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::vector2d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::core::vector2d<float>* self = (irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector2d<float>* p = ((const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'set'", NULL);
#endif
  {
   irr::core::vector2d<float>& tolua_ret = (irr::core::vector2d<float>&)  self->set(*p);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::vector2d<float>");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector2df_set00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getLength of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df_getLength00
static int tolua_NeoGame_irr_core_vector2df_getLength00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector2d<float>* self = (const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getLength'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getLength();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLength'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getLengthSQ of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df_getLengthSQ00
static int tolua_NeoGame_irr_core_vector2df_getLengthSQ00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector2d<float>* self = (const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getLengthSQ'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getLengthSQ();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLengthSQ'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: dotProduct of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df_dotProduct00
static int tolua_NeoGame_irr_core_vector2df_dotProduct00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector2d<float>* self = (const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector2d<float>* other = ((const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'dotProduct'", NULL);
#endif
  {
   float tolua_ret = (float)  self->dotProduct(*other);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'dotProduct'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDistanceFrom of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df_getDistanceFrom00
static int tolua_NeoGame_irr_core_vector2df_getDistanceFrom00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector2d<float>* self = (const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector2d<float>* other = ((const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDistanceFrom'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getDistanceFrom(*other);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDistanceFrom'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getDistanceFromSQ of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df_getDistanceFromSQ00
static int tolua_NeoGame_irr_core_vector2df_getDistanceFromSQ00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector2d<float>* self = (const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector2d<float>* other = ((const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getDistanceFromSQ'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getDistanceFromSQ(*other);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getDistanceFromSQ'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: rotateBy of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df_rotateBy00
static int tolua_NeoGame_irr_core_vector2df_rotateBy00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::vector2d<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::vector2d<float>* self = (irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,1,0);
  double degrees = ((double)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'rotateBy'", NULL);
#endif
  {
   irr::core::vector2d<float>& tolua_ret = (irr::core::vector2d<float>&)  self->rotateBy(degrees);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::vector2d<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'rotateBy'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: rotateBy of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df_rotateBy01
static int tolua_NeoGame_irr_core_vector2df_rotateBy01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::vector2d<float>",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  irr::core::vector2d<float>* self = (irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,1,0);
  double degrees = ((double)  tolua_tonumber(tolua_S,2,0));
  const irr::core::vector2d<float>* center = ((const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'rotateBy'", NULL);
#endif
  {
   irr::core::vector2d<float>& tolua_ret = (irr::core::vector2d<float>&)  self->rotateBy(degrees,*center);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::vector2d<float>");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_irr_core_vector2df_rotateBy00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: normalize of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df_normalize00
static int tolua_NeoGame_irr_core_vector2df_normalize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::vector2d<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::vector2d<float>* self = (irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'normalize'", NULL);
#endif
  {
   irr::core::vector2d<float>& tolua_ret = (irr::core::vector2d<float>&)  self->normalize();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::vector2d<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'normalize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAngleTrig of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df_getAngleTrig00
static int tolua_NeoGame_irr_core_vector2df_getAngleTrig00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector2d<float>* self = (const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAngleTrig'", NULL);
#endif
  {
   double tolua_ret = (double)  self->getAngleTrig();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAngleTrig'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAngle of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df_getAngle00
static int tolua_NeoGame_irr_core_vector2df_getAngle00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<float>",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector2d<float>* self = (const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAngle'", NULL);
#endif
  {
   double tolua_ret = (double)  self->getAngle();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAngle'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAngleWith of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df_getAngleWith00
static int tolua_NeoGame_irr_core_vector2df_getAngleWith00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector2d<float>* self = (const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector2d<float>* b = ((const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAngleWith'", NULL);
#endif
  {
   double tolua_ret = (double)  self->getAngleWith(*b);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAngleWith'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isBetweenPoints of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df_isBetweenPoints00
static int tolua_NeoGame_irr_core_vector2df_isBetweenPoints00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector2d<float>* self = (const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector2d<float>* begin = ((const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::vector2d<float>* end = ((const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isBetweenPoints'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isBetweenPoints(*begin,*end);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isBetweenPoints'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getInterpolated of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df_getInterpolated00
static int tolua_NeoGame_irr_core_vector2df_getInterpolated00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector2d<float>* self = (const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector2d<float>* other = ((const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,2,0));
  double d = ((double)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getInterpolated'", NULL);
#endif
  {
   irr::core::vector2d<float> tolua_ret = (irr::core::vector2d<float>)  self->getInterpolated(*other,d);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector2d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector2d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getInterpolated'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getInterpolated_quadratic of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df_getInterpolated_quadratic00
static int tolua_NeoGame_irr_core_vector2df_getInterpolated_quadratic00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const irr::core::vector2d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector2d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const irr::core::vector2d<float>* self = (const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector2d<float>* v2 = ((const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::vector2d<float>* v3 = ((const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,3,0));
  double d = ((double)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getInterpolated_quadratic'", NULL);
#endif
  {
   irr::core::vector2d<float> tolua_ret = (irr::core::vector2d<float>)  self->getInterpolated_quadratic(*v2,*v3,d);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector2d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector2d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector2d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getInterpolated_quadratic'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: interpolate of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_NeoGame_irr_core_vector2df_interpolate00
static int tolua_NeoGame_irr_core_vector2df_interpolate00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"irr::core::vector2d<float>",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector2d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector2d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  irr::core::vector2d<float>* self = (irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector2d<float>* a = ((const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::vector2d<float>* b = ((const irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,3,0));
  double d = ((double)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'interpolate'", NULL);
#endif
  {
   irr::core::vector2d<float>& tolua_ret = (irr::core::vector2d<float>&)  self->interpolate(*a,*b,d);
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"irr::core::vector2d<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'interpolate'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: X of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_get_irr__core__vector2d_float__X
static int tolua_get_irr__core__vector2d_float__X(lua_State* tolua_S)
{
  irr::core::vector2d<float>* self = (irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'X'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->X);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: X of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_set_irr__core__vector2d_float__X
static int tolua_set_irr__core__vector2d_float__X(lua_State* tolua_S)
{
  irr::core::vector2d<float>* self = (irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'X'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->X = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: Y of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_get_irr__core__vector2d_float__Y
static int tolua_get_irr__core__vector2d_float__Y(lua_State* tolua_S)
{
  irr::core::vector2d<float>* self = (irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Y'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->Y);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: Y of class  irr::core::vector2d<float> */
#ifndef TOLUA_DISABLE_tolua_set_irr__core__vector2d_float__Y
static int tolua_set_irr__core__vector2d_float__Y(lua_State* tolua_S)
{
  irr::core::vector2d<float>* self = (irr::core::vector2d<float>*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'Y'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->Y = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: applyGravity of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_applyGravity00
static int tolua_NeoGame_RigidBody_applyGravity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RigidBody",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RigidBody* self = (RigidBody*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'applyGravity'", NULL);
#endif
  {
   self->applyGravity();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'applyGravity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setGravity of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_setGravity00
static int tolua_NeoGame_RigidBody_setGravity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RigidBody",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::vector3df",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RigidBody* self = (RigidBody*)  tolua_tousertype(tolua_S,1,0);
  irr::core::vector3df* acceleration = ((irr::core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setGravity'", NULL);
#endif
  {
   self->setGravity(*acceleration);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setGravity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getGravity of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_getGravity00
static int tolua_NeoGame_RigidBody_getGravity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const RigidBody",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const RigidBody* self = (const RigidBody*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getGravity'", NULL);
#endif
  {
   irr::core::vector3df tolua_ret = (irr::core::vector3df)  self->getGravity();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3df)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3df");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3df));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3df");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getGravity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setDamping of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_setDamping00
static int tolua_NeoGame_RigidBody_setDamping00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RigidBody",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RigidBody* self = (RigidBody*)  tolua_tousertype(tolua_S,1,0);
  float lin_damping = ((float)  tolua_tonumber(tolua_S,2,0));
  float ang_damping = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setDamping'", NULL);
#endif
  {
   self->setDamping(lin_damping,ang_damping);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setDamping'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getLinearDamping of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_getLinearDamping00
static int tolua_NeoGame_RigidBody_getLinearDamping00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const RigidBody",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const RigidBody* self = (const RigidBody*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getLinearDamping'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getLinearDamping();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLinearDamping'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAngularDamping of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_getAngularDamping00
static int tolua_NeoGame_RigidBody_getAngularDamping00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const RigidBody",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const RigidBody* self = (const RigidBody*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAngularDamping'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getAngularDamping();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAngularDamping'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getLinearSleepingThreshold of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_getLinearSleepingThreshold00
static int tolua_NeoGame_RigidBody_getLinearSleepingThreshold00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const RigidBody",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const RigidBody* self = (const RigidBody*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getLinearSleepingThreshold'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getLinearSleepingThreshold();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLinearSleepingThreshold'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAngularSleepingThreshold of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_getAngularSleepingThreshold00
static int tolua_NeoGame_RigidBody_getAngularSleepingThreshold00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const RigidBody",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const RigidBody* self = (const RigidBody*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAngularSleepingThreshold'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getAngularSleepingThreshold();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAngularSleepingThreshold'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: applyDamping of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_applyDamping00
static int tolua_NeoGame_RigidBody_applyDamping00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RigidBody",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RigidBody* self = (RigidBody*)  tolua_tousertype(tolua_S,1,0);
  float timeStep = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'applyDamping'", NULL);
#endif
  {
   self->applyDamping(timeStep);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'applyDamping'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMassProps of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_setMassProps00
static int tolua_NeoGame_RigidBody_setMassProps00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RigidBody",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"irr::core::vector3df",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RigidBody* self = (RigidBody*)  tolua_tousertype(tolua_S,1,0);
  float mass = ((float)  tolua_tonumber(tolua_S,2,0));
  irr::core::vector3df* inertia = ((irr::core::vector3df*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMassProps'", NULL);
#endif
  {
   self->setMassProps(mass,*inertia);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMassProps'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getLinearFactor of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_getLinearFactor00
static int tolua_NeoGame_RigidBody_getLinearFactor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const RigidBody",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const RigidBody* self = (const RigidBody*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getLinearFactor'", NULL);
#endif
  {
   const irr::core::vector3df tolua_ret = (const irr::core::vector3df)  self->getLinearFactor();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3df)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"const irr::core::vector3df");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(const irr::core::vector3df));
     tolua_pushusertype(tolua_S,tolua_obj,"const irr::core::vector3df");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLinearFactor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setLinearFactor of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_setLinearFactor00
static int tolua_NeoGame_RigidBody_setLinearFactor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RigidBody",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::vector3df",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RigidBody* self = (RigidBody*)  tolua_tousertype(tolua_S,1,0);
  irr::core::vector3df* linearFactor = ((irr::core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setLinearFactor'", NULL);
#endif
  {
   self->setLinearFactor(*linearFactor);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setLinearFactor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getInvMass of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_getInvMass00
static int tolua_NeoGame_RigidBody_getInvMass00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const RigidBody",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const RigidBody* self = (const RigidBody*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getInvMass'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getInvMass();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getInvMass'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: integrateVelocities of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_integrateVelocities00
static int tolua_NeoGame_RigidBody_integrateVelocities00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RigidBody",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RigidBody* self = (RigidBody*)  tolua_tousertype(tolua_S,1,0);
  float step = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'integrateVelocities'", NULL);
#endif
  {
   self->integrateVelocities(step);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'integrateVelocities'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setCenterOfMassTransform of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_setCenterOfMassTransform00
static int tolua_NeoGame_RigidBody_setCenterOfMassTransform00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RigidBody",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::matrix4",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RigidBody* self = (RigidBody*)  tolua_tousertype(tolua_S,1,0);
  irr::core::matrix4* xform = ((irr::core::matrix4*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setCenterOfMassTransform'", NULL);
#endif
  {
   self->setCenterOfMassTransform(*xform);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setCenterOfMassTransform'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: applyCentralForce of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_applyCentralForce00
static int tolua_NeoGame_RigidBody_applyCentralForce00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RigidBody",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::vector3df",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RigidBody* self = (RigidBody*)  tolua_tousertype(tolua_S,1,0);
  irr::core::vector3df* force = ((irr::core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'applyCentralForce'", NULL);
#endif
  {
   self->applyCentralForce(*force);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'applyCentralForce'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTotalForce of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_getTotalForce00
static int tolua_NeoGame_RigidBody_getTotalForce00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const RigidBody",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const RigidBody* self = (const RigidBody*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTotalForce'", NULL);
#endif
  {
   const irr::core::vector3df tolua_ret = (const irr::core::vector3df)  self->getTotalForce();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3df)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"const irr::core::vector3df");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(const irr::core::vector3df));
     tolua_pushusertype(tolua_S,tolua_obj,"const irr::core::vector3df");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTotalForce'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTotalTorque of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_getTotalTorque00
static int tolua_NeoGame_RigidBody_getTotalTorque00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const RigidBody",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const RigidBody* self = (const RigidBody*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTotalTorque'", NULL);
#endif
  {
   const irr::core::vector3df tolua_ret = (const irr::core::vector3df)  self->getTotalTorque();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3df)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"const irr::core::vector3df");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(const irr::core::vector3df));
     tolua_pushusertype(tolua_S,tolua_obj,"const irr::core::vector3df");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTotalTorque'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getInvInertiaDiagLocal of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_getInvInertiaDiagLocal00
static int tolua_NeoGame_RigidBody_getInvInertiaDiagLocal00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const RigidBody",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const RigidBody* self = (const RigidBody*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getInvInertiaDiagLocal'", NULL);
#endif
  {
   const irr::core::vector3df tolua_ret = (const irr::core::vector3df)  self->getInvInertiaDiagLocal();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3df)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"const irr::core::vector3df");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(const irr::core::vector3df));
     tolua_pushusertype(tolua_S,tolua_obj,"const irr::core::vector3df");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getInvInertiaDiagLocal'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setInvInertiaDiagLocal of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_setInvInertiaDiagLocal00
static int tolua_NeoGame_RigidBody_setInvInertiaDiagLocal00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RigidBody",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::vector3df",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RigidBody* self = (RigidBody*)  tolua_tousertype(tolua_S,1,0);
  irr::core::vector3df* diagInvInertia = ((irr::core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setInvInertiaDiagLocal'", NULL);
#endif
  {
   self->setInvInertiaDiagLocal(*diagInvInertia);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setInvInertiaDiagLocal'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setSleepingThresholds of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_setSleepingThresholds00
static int tolua_NeoGame_RigidBody_setSleepingThresholds00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RigidBody",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RigidBody* self = (RigidBody*)  tolua_tousertype(tolua_S,1,0);
  float linear = ((float)  tolua_tonumber(tolua_S,2,0));
  float angular = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setSleepingThresholds'", NULL);
#endif
  {
   self->setSleepingThresholds(linear,angular);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setSleepingThresholds'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: applyTorque of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_applyTorque00
static int tolua_NeoGame_RigidBody_applyTorque00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RigidBody",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::vector3df",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RigidBody* self = (RigidBody*)  tolua_tousertype(tolua_S,1,0);
  irr::core::vector3df* torque = ((irr::core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'applyTorque'", NULL);
#endif
  {
   self->applyTorque(*torque);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'applyTorque'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: applyForce of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_applyForce00
static int tolua_NeoGame_RigidBody_applyForce00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RigidBody",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::vector3df",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"irr::core::vector3df",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RigidBody* self = (RigidBody*)  tolua_tousertype(tolua_S,1,0);
  irr::core::vector3df* force = ((irr::core::vector3df*)  tolua_tousertype(tolua_S,2,0));
  irr::core::vector3df* rel_pos = ((irr::core::vector3df*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'applyForce'", NULL);
#endif
  {
   self->applyForce(*force,*rel_pos);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'applyForce'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: applyCentralImpulse of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_applyCentralImpulse00
static int tolua_NeoGame_RigidBody_applyCentralImpulse00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RigidBody",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::vector3df",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RigidBody* self = (RigidBody*)  tolua_tousertype(tolua_S,1,0);
  irr::core::vector3df* impulse = ((irr::core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'applyCentralImpulse'", NULL);
#endif
  {
   self->applyCentralImpulse(*impulse);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'applyCentralImpulse'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: applyTorqueImpulse of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_applyTorqueImpulse00
static int tolua_NeoGame_RigidBody_applyTorqueImpulse00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RigidBody",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::vector3df",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RigidBody* self = (RigidBody*)  tolua_tousertype(tolua_S,1,0);
  irr::core::vector3df* torque = ((irr::core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'applyTorqueImpulse'", NULL);
#endif
  {
   self->applyTorqueImpulse(*torque);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'applyTorqueImpulse'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: applyImpulse of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_applyImpulse00
static int tolua_NeoGame_RigidBody_applyImpulse00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RigidBody",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::vector3df",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"irr::core::vector3df",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RigidBody* self = (RigidBody*)  tolua_tousertype(tolua_S,1,0);
  irr::core::vector3df* impulse = ((irr::core::vector3df*)  tolua_tousertype(tolua_S,2,0));
  irr::core::vector3df* rel_pos = ((irr::core::vector3df*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'applyImpulse'", NULL);
#endif
  {
   self->applyImpulse(*impulse,*rel_pos);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'applyImpulse'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: clearForces of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_clearForces00
static int tolua_NeoGame_RigidBody_clearForces00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RigidBody",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RigidBody* self = (RigidBody*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'clearForces'", NULL);
#endif
  {
   self->clearForces();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'clearForces'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: updateInertiaTensor of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_updateInertiaTensor00
static int tolua_NeoGame_RigidBody_updateInertiaTensor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RigidBody",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RigidBody* self = (RigidBody*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'updateInertiaTensor'", NULL);
#endif
  {
   self->updateInertiaTensor();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'updateInertiaTensor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCenterOfMassPosition of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_getCenterOfMassPosition00
static int tolua_NeoGame_RigidBody_getCenterOfMassPosition00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const RigidBody",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const RigidBody* self = (const RigidBody*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCenterOfMassPosition'", NULL);
#endif
  {
   const irr::core::vector3df tolua_ret = (const irr::core::vector3df)  self->getCenterOfMassPosition();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3df)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"const irr::core::vector3df");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(const irr::core::vector3df));
     tolua_pushusertype(tolua_S,tolua_obj,"const irr::core::vector3df");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCenterOfMassPosition'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getOrientation of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_getOrientation00
static int tolua_NeoGame_RigidBody_getOrientation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const RigidBody",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const RigidBody* self = (const RigidBody*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getOrientation'", NULL);
#endif
  {
   irr::core::quaternion tolua_ret = (irr::core::quaternion)  self->getOrientation();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::quaternion)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::quaternion");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::quaternion));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::quaternion");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getOrientation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getCenterOfMassTransform of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_getCenterOfMassTransform00
static int tolua_NeoGame_RigidBody_getCenterOfMassTransform00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const RigidBody",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const RigidBody* self = (const RigidBody*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getCenterOfMassTransform'", NULL);
#endif
  {
   irr::core::matrix4 tolua_ret = (irr::core::matrix4)  self->getCenterOfMassTransform();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::matrix4)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::matrix4");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::matrix4));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::matrix4");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getCenterOfMassTransform'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getLinearVelocity of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_getLinearVelocity00
static int tolua_NeoGame_RigidBody_getLinearVelocity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const RigidBody",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const RigidBody* self = (const RigidBody*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getLinearVelocity'", NULL);
#endif
  {
   irr::core::vector3df tolua_ret = (irr::core::vector3df)  self->getLinearVelocity();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3df)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3df");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3df));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3df");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLinearVelocity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAngularVelocity of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_getAngularVelocity00
static int tolua_NeoGame_RigidBody_getAngularVelocity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const RigidBody",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const RigidBody* self = (const RigidBody*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAngularVelocity'", NULL);
#endif
  {
   irr::core::vector3df tolua_ret = (irr::core::vector3df)  self->getAngularVelocity();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3df)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3df");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3df));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3df");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAngularVelocity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setLinearVelocity of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_setLinearVelocity00
static int tolua_NeoGame_RigidBody_setLinearVelocity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RigidBody",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::vector3df",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RigidBody* self = (RigidBody*)  tolua_tousertype(tolua_S,1,0);
  irr::core::vector3df* lin_vel = ((irr::core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setLinearVelocity'", NULL);
#endif
  {
   self->setLinearVelocity(*lin_vel);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setLinearVelocity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAngularVelocity of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_setAngularVelocity00
static int tolua_NeoGame_RigidBody_setAngularVelocity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RigidBody",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::vector3df",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RigidBody* self = (RigidBody*)  tolua_tousertype(tolua_S,1,0);
  irr::core::vector3df* ang_vel = ((irr::core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAngularVelocity'", NULL);
#endif
  {
   self->setAngularVelocity(*ang_vel);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAngularVelocity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getVelocityInLocalPoint of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_getVelocityInLocalPoint00
static int tolua_NeoGame_RigidBody_getVelocityInLocalPoint00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const RigidBody",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::vector3df",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const RigidBody* self = (const RigidBody*)  tolua_tousertype(tolua_S,1,0);
  irr::core::vector3df* rel_pos = ((irr::core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getVelocityInLocalPoint'", NULL);
#endif
  {
   irr::core::vector3df tolua_ret = (irr::core::vector3df)  self->getVelocityInLocalPoint(*rel_pos);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3df)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3df");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3df));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3df");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getVelocityInLocalPoint'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: translate of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_translate00
static int tolua_NeoGame_RigidBody_translate00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RigidBody",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::vector3df",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RigidBody* self = (RigidBody*)  tolua_tousertype(tolua_S,1,0);
  irr::core::vector3df* v = ((irr::core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'translate'", NULL);
#endif
  {
   self->translate(*v);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'translate'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAabb of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_getAabb00
static int tolua_NeoGame_RigidBody_getAabb00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const RigidBody",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::vector3df",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"irr::core::vector3df",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const RigidBody* self = (const RigidBody*)  tolua_tousertype(tolua_S,1,0);
  irr::core::vector3df* aabbMin = ((irr::core::vector3df*)  tolua_tousertype(tolua_S,2,0));
  irr::core::vector3df* aabbMax = ((irr::core::vector3df*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAabb'", NULL);
#endif
  {
   self->getAabb(*aabbMin,*aabbMax);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAabb'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: computeImpulseDenominator of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_computeImpulseDenominator00
static int tolua_NeoGame_RigidBody_computeImpulseDenominator00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const RigidBody",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::vector3df",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"irr::core::vector3df",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const RigidBody* self = (const RigidBody*)  tolua_tousertype(tolua_S,1,0);
  irr::core::vector3df* pos = ((irr::core::vector3df*)  tolua_tousertype(tolua_S,2,0));
  irr::core::vector3df* normal = ((irr::core::vector3df*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'computeImpulseDenominator'", NULL);
#endif
  {
   float tolua_ret = (float)  self->computeImpulseDenominator(*pos,*normal);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'computeImpulseDenominator'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: computeAngularImpulseDenominator of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_computeAngularImpulseDenominator00
static int tolua_NeoGame_RigidBody_computeAngularImpulseDenominator00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const RigidBody",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::vector3df",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const RigidBody* self = (const RigidBody*)  tolua_tousertype(tolua_S,1,0);
  irr::core::vector3df* axis = ((irr::core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'computeAngularImpulseDenominator'", NULL);
#endif
  {
   float tolua_ret = (float)  self->computeAngularImpulseDenominator(*axis);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'computeAngularImpulseDenominator'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: updateDeactivation of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_updateDeactivation00
static int tolua_NeoGame_RigidBody_updateDeactivation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RigidBody",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RigidBody* self = (RigidBody*)  tolua_tousertype(tolua_S,1,0);
  float timeStep = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'updateDeactivation'", NULL);
#endif
  {
   self->updateDeactivation(timeStep);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'updateDeactivation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAngularFactor of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_setAngularFactor00
static int tolua_NeoGame_RigidBody_setAngularFactor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RigidBody",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::vector3df",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RigidBody* self = (RigidBody*)  tolua_tousertype(tolua_S,1,0);
  irr::core::vector3df* angFac = ((irr::core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAngularFactor'", NULL);
#endif
  {
   self->setAngularFactor(*angFac);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAngularFactor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAngularFactor of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_setAngularFactor01
static int tolua_NeoGame_RigidBody_setAngularFactor01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RigidBody",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  RigidBody* self = (RigidBody*)  tolua_tousertype(tolua_S,1,0);
  float angFac = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAngularFactor'", NULL);
#endif
  {
   self->setAngularFactor(angFac);
  }
 }
 return 0;
tolua_lerror:
 return tolua_NeoGame_RigidBody_setAngularFactor00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAngularFactor of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_getAngularFactor00
static int tolua_NeoGame_RigidBody_getAngularFactor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const RigidBody",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const RigidBody* self = (const RigidBody*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAngularFactor'", NULL);
#endif
  {
   irr::core::vector3df tolua_ret = (irr::core::vector3df)  self->getAngularFactor();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3df)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3df");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3df));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3df");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAngularFactor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setPosition of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_setPosition00
static int tolua_NeoGame_RigidBody_setPosition00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RigidBody",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::vector3df",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RigidBody* self = (RigidBody*)  tolua_tousertype(tolua_S,1,0);
  irr::core::vector3df position = *((irr::core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setPosition'", NULL);
#endif
  {
   self->setPosition(position);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setPosition'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setRotation of class  RigidBody */
#ifndef TOLUA_DISABLE_tolua_NeoGame_RigidBody_setRotation00
static int tolua_NeoGame_RigidBody_setRotation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"RigidBody",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::vector3df",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  RigidBody* self = (RigidBody*)  tolua_tousertype(tolua_S,1,0);
  irr::core::vector3df rotation = *((irr::core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setRotation'", NULL);
#endif
  {
   self->setRotation(rotation);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setRotation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getRbodyA of class  HingeJoint */
#ifndef TOLUA_DISABLE_tolua_NeoGame_HingeJoint_getRbodyA00
static int tolua_NeoGame_HingeJoint_getRbodyA00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const HingeJoint",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const HingeJoint* self = (const HingeJoint*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getRbodyA'", NULL);
#endif
  {
   const RigidBody* tolua_ret = (const RigidBody*)  self->getRbodyA();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"const RigidBody");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRbodyA'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getRbodyB of class  HingeJoint */
#ifndef TOLUA_DISABLE_tolua_NeoGame_HingeJoint_getRbodyB00
static int tolua_NeoGame_HingeJoint_getRbodyB00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const HingeJoint",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const HingeJoint* self = (const HingeJoint*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getRbodyB'", NULL);
#endif
  {
   const RigidBody* tolua_ret = (const RigidBody*)  self->getRbodyB();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"const RigidBody");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRbodyB'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAngularOnly of class  HingeJoint */
#ifndef TOLUA_DISABLE_tolua_NeoGame_HingeJoint_setAngularOnly00
static int tolua_NeoGame_HingeJoint_setAngularOnly00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"HingeJoint",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  HingeJoint* self = (HingeJoint*)  tolua_tousertype(tolua_S,1,0);
  bool angularOnly = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAngularOnly'", NULL);
#endif
  {
   self->setAngularOnly(angularOnly);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAngularOnly'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: enableAngularMotor of class  HingeJoint */
#ifndef TOLUA_DISABLE_tolua_NeoGame_HingeJoint_enableAngularMotor00
static int tolua_NeoGame_HingeJoint_enableAngularMotor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"HingeJoint",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  HingeJoint* self = (HingeJoint*)  tolua_tousertype(tolua_S,1,0);
  bool enableMotor = ((bool)  tolua_toboolean(tolua_S,2,0));
  float targetVelocity = ((float)  tolua_tonumber(tolua_S,3,0));
  float maxMotorImpulse = ((float)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'enableAngularMotor'", NULL);
#endif
  {
   self->enableAngularMotor(enableMotor,targetVelocity,maxMotorImpulse);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'enableAngularMotor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: enableMotor of class  HingeJoint */
#ifndef TOLUA_DISABLE_tolua_NeoGame_HingeJoint_enableMotor00
static int tolua_NeoGame_HingeJoint_enableMotor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"HingeJoint",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  HingeJoint* self = (HingeJoint*)  tolua_tousertype(tolua_S,1,0);
  bool enableMotor = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'enableMotor'", NULL);
#endif
  {
   self->enableMotor(enableMotor);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'enableMotor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMaxMotorImpulse of class  HingeJoint */
#ifndef TOLUA_DISABLE_tolua_NeoGame_HingeJoint_setMaxMotorImpulse00
static int tolua_NeoGame_HingeJoint_setMaxMotorImpulse00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"HingeJoint",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  HingeJoint* self = (HingeJoint*)  tolua_tousertype(tolua_S,1,0);
  float maxMotorImpulse = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMaxMotorImpulse'", NULL);
#endif
  {
   self->setMaxMotorImpulse(maxMotorImpulse);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMaxMotorImpulse'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMotorTarget of class  HingeJoint */
#ifndef TOLUA_DISABLE_tolua_NeoGame_HingeJoint_setMotorTarget00
static int tolua_NeoGame_HingeJoint_setMotorTarget00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"HingeJoint",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  HingeJoint* self = (HingeJoint*)  tolua_tousertype(tolua_S,1,0);
  float targetAngle = ((float)  tolua_tonumber(tolua_S,2,0));
  float dt = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMotorTarget'", NULL);
#endif
  {
   self->setMotorTarget(targetAngle,dt);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMotorTarget'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setLimit of class  HingeJoint */
#ifndef TOLUA_DISABLE_tolua_NeoGame_HingeJoint_setLimit00
static int tolua_NeoGame_HingeJoint_setLimit00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"HingeJoint",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,6,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  HingeJoint* self = (HingeJoint*)  tolua_tousertype(tolua_S,1,0);
  float low = ((float)  tolua_tonumber(tolua_S,2,0));
  float high = ((float)  tolua_tonumber(tolua_S,3,0));
  float _softness = ((float)  tolua_tonumber(tolua_S,4,0.9f));
  float _biasFactor = ((float)  tolua_tonumber(tolua_S,5,0.3f));
  float _relaxationFactor = ((float)  tolua_tonumber(tolua_S,6,1.0f));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setLimit'", NULL);
#endif
  {
   self->setLimit(low,high,_softness,_biasFactor,_relaxationFactor);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setLimit'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAxis of class  HingeJoint */
#ifndef TOLUA_DISABLE_tolua_NeoGame_HingeJoint_setAxis00
static int tolua_NeoGame_HingeJoint_setAxis00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"HingeJoint",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3df",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  HingeJoint* self = (HingeJoint*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3df* axisInA = ((const irr::core::vector3df*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAxis'", NULL);
#endif
  {
   self->setAxis(*axisInA);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAxis'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: hasLimit of class  HingeJoint */
#ifndef TOLUA_DISABLE_tolua_NeoGame_HingeJoint_hasLimit00
static int tolua_NeoGame_HingeJoint_hasLimit00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"HingeJoint",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  HingeJoint* self = (HingeJoint*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'hasLimit'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->hasLimit();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'hasLimit'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getHingeAngle of class  HingeJoint */
#ifndef TOLUA_DISABLE_tolua_NeoGame_HingeJoint_getHingeAngle00
static int tolua_NeoGame_HingeJoint_getHingeAngle00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"HingeJoint",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  HingeJoint* self = (HingeJoint*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getHingeAngle'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getHingeAngle();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getHingeAngle'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAngularOnly of class  HingeJoint */
#ifndef TOLUA_DISABLE_tolua_NeoGame_HingeJoint_getAngularOnly00
static int tolua_NeoGame_HingeJoint_getAngularOnly00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"HingeJoint",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  HingeJoint* self = (HingeJoint*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAngularOnly'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->getAngularOnly();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAngularOnly'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getEnableAngularMotor of class  HingeJoint */
#ifndef TOLUA_DISABLE_tolua_NeoGame_HingeJoint_getEnableAngularMotor00
static int tolua_NeoGame_HingeJoint_getEnableAngularMotor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"HingeJoint",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  HingeJoint* self = (HingeJoint*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getEnableAngularMotor'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->getEnableAngularMotor();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getEnableAngularMotor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMotorTargetVelosity of class  HingeJoint */
#ifndef TOLUA_DISABLE_tolua_NeoGame_HingeJoint_getMotorTargetVelosity00
static int tolua_NeoGame_HingeJoint_getMotorTargetVelosity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"HingeJoint",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  HingeJoint* self = (HingeJoint*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMotorTargetVelosity'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getMotorTargetVelosity();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMotorTargetVelosity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMaxMotorImpulse of class  HingeJoint */
#ifndef TOLUA_DISABLE_tolua_NeoGame_HingeJoint_getMaxMotorImpulse00
static int tolua_NeoGame_HingeJoint_getMaxMotorImpulse00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"HingeJoint",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  HingeJoint* self = (HingeJoint*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMaxMotorImpulse'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getMaxMotorImpulse();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMaxMotorImpulse'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isEnabled of class  Component */
#ifndef TOLUA_DISABLE_tolua_NeoGame_Component_isEnabled00
static int tolua_NeoGame_Component_isEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const Component",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const Component* self = (const Component*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isEnabled'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isEnabled();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setEnabled of class  Component */
#ifndef TOLUA_DISABLE_tolua_NeoGame_Component_setEnabled00
static int tolua_NeoGame_Component_setEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"Component",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  Component* self = (Component*)  tolua_tousertype(tolua_S,1,0);
  bool enabled = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setEnabled'", NULL);
#endif
  {
   self->setEnabled(enabled);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: create of class  NeoTrigger */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoTrigger_create00
static int tolua_NeoGame_NeoTrigger_create00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"NeoTrigger",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  bool alive = ((bool)  tolua_toboolean(tolua_S,2,true));
  {
   NeoTrigger* tolua_ret = (NeoTrigger*)  NeoTrigger::create(alive);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"NeoTrigger");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'create'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: drop of class  NeoTrigger */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoTrigger_drop00
static int tolua_NeoGame_NeoTrigger_drop00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoTrigger",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoTrigger* self = (NeoTrigger*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'drop'", NULL);
#endif
  {
   self->drop();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'drop'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isAlive of class  NeoTrigger */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoTrigger_isAlive00
static int tolua_NeoGame_NeoTrigger_isAlive00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const NeoTrigger",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const NeoTrigger* self = (const NeoTrigger*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isAlive'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isAlive();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isAlive'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAlive of class  NeoTrigger */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoTrigger_setAlive00
static int tolua_NeoGame_NeoTrigger_setAlive00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoTrigger",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoTrigger* self = (NeoTrigger*)  tolua_tousertype(tolua_S,1,0);
  bool alive = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAlive'", NULL);
#endif
  {
   self->setAlive(alive);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAlive'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setDisabled of class  NeoTrigger */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoTrigger_setDisabled00
static int tolua_NeoGame_NeoTrigger_setDisabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoTrigger",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoTrigger* self = (NeoTrigger*)  tolua_tousertype(tolua_S,1,0);
  bool dis = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setDisabled'", NULL);
#endif
  {
   self->setDisabled(dis);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setDisabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isDisabled of class  NeoTrigger */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoTrigger_isDisabled00
static int tolua_NeoGame_NeoTrigger_isDisabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const NeoTrigger",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const NeoTrigger* self = (const NeoTrigger*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isDisabled'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isDisabled();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isDisabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Reset of class  NeoTrigger */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoTrigger_Reset00
static int tolua_NeoGame_NeoTrigger_Reset00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoTrigger",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoTrigger* self = (NeoTrigger*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Reset'", NULL);
#endif
  {
   self->Reset();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Reset'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setTriggerFunction of class  NeoTrigger */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoTrigger_setTriggerFunction00
static int tolua_NeoGame_NeoTrigger_setTriggerFunction00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoTrigger",0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoTrigger* self = (NeoTrigger*)  tolua_tousertype(tolua_S,1,0);
  std::string funcName = ((std::string)  tolua_tocppstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setTriggerFunction'", NULL);
#endif
  {
   self->setTriggerFunction(funcName);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setTriggerFunction'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: addTriggerCondition of class  NeoTrigger */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoTrigger_addTriggerCondition00
static int tolua_NeoGame_NeoTrigger_addTriggerCondition00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoTrigger",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoTrigger* self = (NeoTrigger*)  tolua_tousertype(tolua_S,1,0);
  int cid = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'addTriggerCondition'", NULL);
#endif
  {
   self->addTriggerCondition(cid);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'addTriggerCondition'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetInstance of class  NeoGameLogic */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGameLogic_GetInstance00
static int tolua_NeoGame_NeoGameLogic_GetInstance00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"NeoGameLogic",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   NeoGameLogic* tolua_ret = (NeoGameLogic*)  NeoGameLogic::GetInstance();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"NeoGameLogic");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetInstance'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Destroy of class  NeoGameLogic */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGameLogic_Destroy00
static int tolua_NeoGame_NeoGameLogic_Destroy00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"NeoGameLogic",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   NeoGameLogic::Destroy();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Destroy'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Update of class  NeoGameLogic */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGameLogic_Update00
static int tolua_NeoGame_NeoGameLogic_Update00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGameLogic",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGameLogic* self = (NeoGameLogic*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Update'", NULL);
#endif
  {
   self->Update();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Update'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: RegisterTrigger of class  NeoGameLogic */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGameLogic_RegisterTrigger00
static int tolua_NeoGame_NeoGameLogic_RegisterTrigger00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGameLogic",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"NeoTrigger",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGameLogic* self = (NeoGameLogic*)  tolua_tousertype(tolua_S,1,0);
  NeoTrigger* newTrigger = ((NeoTrigger*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RegisterTrigger'", NULL);
#endif
  {
   self->RegisterTrigger(newTrigger);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RegisterTrigger'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: RemoveTrigger of class  NeoGameLogic */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGameLogic_RemoveTrigger00
static int tolua_NeoGame_NeoGameLogic_RemoveTrigger00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGameLogic",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"NeoTrigger",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGameLogic* self = (NeoGameLogic*)  tolua_tousertype(tolua_S,1,0);
  NeoTrigger* trigger = ((NeoTrigger*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RemoveTrigger'", NULL);
#endif
  {
   self->RemoveTrigger(trigger);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RemoveTrigger'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ResetAllTriggers of class  NeoGameLogic */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGameLogic_ResetAllTriggers00
static int tolua_NeoGame_NeoGameLogic_ResetAllTriggers00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGameLogic",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGameLogic* self = (NeoGameLogic*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ResetAllTriggers'", NULL);
#endif
  {
   self->ResetAllTriggers();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ResetAllTriggers'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getData of class  NeoEvent */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoEvent_getData00
static int tolua_NeoGame_NeoEvent_getData00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const NeoEvent",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const NeoEvent* self = (const NeoEvent*)  tolua_tousertype(tolua_S,1,0);
  int position = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getData'", NULL);
#endif
  {
   std::string tolua_ret = (std::string)  self->getData(position);
   tolua_pushcppstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getData'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTriggerId of class  NeoEvent */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoEvent_getTriggerId00
static int tolua_NeoGame_NeoEvent_getTriggerId00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const NeoEvent",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const NeoEvent* self = (const NeoEvent*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTriggerId'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getTriggerId();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTriggerId'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getComponent of class  GameObject */
#ifndef TOLUA_DISABLE_tolua_NeoGame_GameObject_getComponent00
static int tolua_NeoGame_GameObject_getComponent00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"GameObject",0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  GameObject* self = (GameObject*)  tolua_tousertype(tolua_S,1,0);
  std::string key = ((std::string)  tolua_tocppstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getComponent'", NULL);
#endif
  {
   Component* tolua_ret = (Component*)  self->getComponent(key);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"Component");
   tolua_pushcppstring(tolua_S,(const char*)key);
  }
 }
 return 2;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getComponent'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddComponent of class  GameObject */
#ifndef TOLUA_DISABLE_tolua_NeoGame_GameObject_AddComponent00
static int tolua_NeoGame_GameObject_AddComponent00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"GameObject",0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"Component",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  GameObject* self = (GameObject*)  tolua_tousertype(tolua_S,1,0);
  std::string key = ((std::string)  tolua_tocppstring(tolua_S,2,0));
  Component* comp = ((Component*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddComponent'", NULL);
#endif
  {
   self->AddComponent(key,comp);
   tolua_pushcppstring(tolua_S,(const char*)key);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddComponent'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: RemoveComponent of class  GameObject */
#ifndef TOLUA_DISABLE_tolua_NeoGame_GameObject_RemoveComponent00
static int tolua_NeoGame_GameObject_RemoveComponent00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"GameObject",0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  GameObject* self = (GameObject*)  tolua_tousertype(tolua_S,1,0);
  std::string key = ((std::string)  tolua_tocppstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RemoveComponent'", NULL);
#endif
  {
   self->RemoveComponent(key);
   tolua_pushcppstring(tolua_S,(const char*)key);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RemoveComponent'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetSceneNode of class  GameObject */
#ifndef TOLUA_DISABLE_tolua_NeoGame_GameObject_GetSceneNode00
static int tolua_NeoGame_GameObject_GetSceneNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"GameObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  GameObject* self = (GameObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetSceneNode'", NULL);
#endif
  {
   irr::scene::ISceneNode* tolua_ret = (irr::scene::ISceneNode*)  self->GetSceneNode();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::ISceneNode");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetSceneNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: BindSceneNode of class  GameObject */
#ifndef TOLUA_DISABLE_tolua_NeoGame_GameObject_BindSceneNode00
static int tolua_NeoGame_GameObject_BindSceneNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"GameObject",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  GameObject* self = (GameObject*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::ISceneNode* node = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'BindSceneNode'", NULL);
#endif
  {
   self->BindSceneNode(node);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'BindSceneNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetParent of class  GameObject */
#ifndef TOLUA_DISABLE_tolua_NeoGame_GameObject_SetParent00
static int tolua_NeoGame_GameObject_SetParent00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"GameObject",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"GameObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  GameObject* self = (GameObject*)  tolua_tousertype(tolua_S,1,0);
  GameObject* tolua_var_1 = ((GameObject*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetParent'", NULL);
#endif
  {
   self->SetParent(tolua_var_1);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetParent'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetParent of class  GameObject */
#ifndef TOLUA_DISABLE_tolua_NeoGame_GameObject_GetParent00
static int tolua_NeoGame_GameObject_GetParent00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const GameObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const GameObject* self = (const GameObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetParent'", NULL);
#endif
  {
   GameObject* tolua_ret = (GameObject*)  self->GetParent();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"GameObject");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetParent'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddChild of class  GameObject */
#ifndef TOLUA_DISABLE_tolua_NeoGame_GameObject_AddChild00
static int tolua_NeoGame_GameObject_AddChild00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"GameObject",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"GameObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  GameObject* self = (GameObject*)  tolua_tousertype(tolua_S,1,0);
  GameObject* tolua_var_2 = ((GameObject*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddChild'", NULL);
#endif
  {
   self->AddChild(tolua_var_2);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddChild'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: RemoveChild of class  GameObject */
#ifndef TOLUA_DISABLE_tolua_NeoGame_GameObject_RemoveChild00
static int tolua_NeoGame_GameObject_RemoveChild00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"GameObject",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"GameObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  GameObject* self = (GameObject*)  tolua_tousertype(tolua_S,1,0);
  GameObject* child = ((GameObject*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RemoveChild'", NULL);
#endif
  {
   self->RemoveChild(child);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RemoveChild'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: RemoveChildren of class  GameObject */
#ifndef TOLUA_DISABLE_tolua_NeoGame_GameObject_RemoveChildren00
static int tolua_NeoGame_GameObject_RemoveChildren00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"GameObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  GameObject* self = (GameObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RemoveChildren'", NULL);
#endif
  {
   self->RemoveChildren();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RemoveChildren'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: DestoryChild of class  GameObject */
#ifndef TOLUA_DISABLE_tolua_NeoGame_GameObject_DestoryChild00
static int tolua_NeoGame_GameObject_DestoryChild00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"GameObject",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"GameObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  GameObject* self = (GameObject*)  tolua_tousertype(tolua_S,1,0);
  GameObject* child = ((GameObject*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'DestoryChild'", NULL);
#endif
  {
   self->DestoryChild(child);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'DestoryChild'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: DestroyChidren of class  GameObject */
#ifndef TOLUA_DISABLE_tolua_NeoGame_GameObject_DestroyChidren00
static int tolua_NeoGame_GameObject_DestroyChidren00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"GameObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  GameObject* self = (GameObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'DestroyChidren'", NULL);
#endif
  {
   self->DestroyChidren();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'DestroyChidren'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetPostion of class  GameObject */
#ifndef TOLUA_DISABLE_tolua_NeoGame_GameObject_SetPostion00
static int tolua_NeoGame_GameObject_SetPostion00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"GameObject",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  GameObject* self = (GameObject*)  tolua_tousertype(tolua_S,1,0);
  irr::core::vector3d<float>* pos = ((irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetPostion'", NULL);
#endif
  {
   self->SetPostion(*pos);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetPostion'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetRotation of class  GameObject */
#ifndef TOLUA_DISABLE_tolua_NeoGame_GameObject_SetRotation00
static int tolua_NeoGame_GameObject_SetRotation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"GameObject",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  GameObject* self = (GameObject*)  tolua_tousertype(tolua_S,1,0);
  irr::core::vector3d<float>* rot = ((irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetRotation'", NULL);
#endif
  {
   self->SetRotation(*rot);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetRotation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetPostion of class  GameObject */
#ifndef TOLUA_DISABLE_tolua_NeoGame_GameObject_GetPostion00
static int tolua_NeoGame_GameObject_GetPostion00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const GameObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const GameObject* self = (const GameObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetPostion'", NULL);
#endif
  {
   irr::core::vector3d<float> tolua_ret = (irr::core::vector3d<float>)  self->GetPostion();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetPostion'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetRotation of class  GameObject */
#ifndef TOLUA_DISABLE_tolua_NeoGame_GameObject_GetRotation00
static int tolua_NeoGame_GameObject_GetRotation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const GameObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const GameObject* self = (const GameObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetRotation'", NULL);
#endif
  {
   irr::core::vector3d<float> tolua_ret = (irr::core::vector3d<float>)  self->GetRotation();
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((irr::core::vector3d<float>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(irr::core::vector3d<float>));
     tolua_pushusertype(tolua_S,tolua_obj,"irr::core::vector3d<float>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetRotation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getId of class  GameObject */
#ifndef TOLUA_DISABLE_tolua_NeoGame_GameObject_getId00
static int tolua_NeoGame_GameObject_getId00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const GameObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const GameObject* self = (const GameObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getId'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getId();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getId'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setId of class  GameObject */
#ifndef TOLUA_DISABLE_tolua_NeoGame_GameObject_setId00
static int tolua_NeoGame_GameObject_setId00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"GameObject",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  GameObject* self = (GameObject*)  tolua_tousertype(tolua_S,1,0);
  int id = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setId'", NULL);
#endif
  {
   self->setId(id);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setId'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isActive of class  GameObject */
#ifndef TOLUA_DISABLE_tolua_NeoGame_GameObject_isActive00
static int tolua_NeoGame_GameObject_isActive00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const GameObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const GameObject* self = (const GameObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isActive'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isActive();
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isActive'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setActive of class  GameObject */
#ifndef TOLUA_DISABLE_tolua_NeoGame_GameObject_setActive00
static int tolua_NeoGame_GameObject_setActive00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"GameObject",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  GameObject* self = (GameObject*)  tolua_tousertype(tolua_S,1,0);
  bool active = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setActive'", NULL);
#endif
  {
   self->setActive(active);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setActive'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getRigidBody of class  GameObject */
#ifndef TOLUA_DISABLE_tolua_NeoGame_GameObject_getRigidBody00
static int tolua_NeoGame_GameObject_getRigidBody00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const GameObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const GameObject* self = (const GameObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getRigidBody'", NULL);
#endif
  {
   const RigidBody* tolua_ret = (const RigidBody*)  self->getRigidBody();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"const RigidBody");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRigidBody'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddRigidBody of class  GameObject */
#ifndef TOLUA_DISABLE_tolua_NeoGame_GameObject_AddRigidBody00
static int tolua_NeoGame_GameObject_AddRigidBody00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"GameObject",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  GameObject* self = (GameObject*)  tolua_tousertype(tolua_S,1,0);
  int collisionShape = ((int)  tolua_tonumber(tolua_S,2,0));
  float mass = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddRigidBody'", NULL);
#endif
  {
   RigidBody* tolua_ret = (RigidBody*)  self->AddRigidBody(collisionShape,mass);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"RigidBody");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddRigidBody'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddRigidBody of class  GameObject */
#ifndef TOLUA_DISABLE_tolua_NeoGame_GameObject_AddRigidBody01
static int tolua_NeoGame_GameObject_AddRigidBody01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"GameObject",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const irr::core::vector3df",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"const irr::core::vector3df",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  GameObject* self = (GameObject*)  tolua_tousertype(tolua_S,1,0);
  int collisionShape = ((int)  tolua_tonumber(tolua_S,2,0));
  float mass = ((float)  tolua_tonumber(tolua_S,3,0));
  const irr::core::vector3df* position = ((const irr::core::vector3df*)  tolua_tousertype(tolua_S,4,0));
  const irr::core::vector3df* rotation = ((const irr::core::vector3df*)  tolua_tousertype(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddRigidBody'", NULL);
#endif
  {
   RigidBody* tolua_ret = (RigidBody*)  self->AddRigidBody(collisionShape,mass,*position,*rotation);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"RigidBody");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_GameObject_AddRigidBody00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: getLuaIndentifier of class  GameObject */
#ifndef TOLUA_DISABLE_tolua_NeoGame_GameObject_getLuaIndentifier00
static int tolua_NeoGame_GameObject_getLuaIndentifier00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"const GameObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  const GameObject* self = (const GameObject*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getLuaIndentifier'", NULL);
#endif
  {
   std::string tolua_ret = (std::string)  self->getLuaIndentifier();
   tolua_pushcppstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getLuaIndentifier'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setLuaIndentifier of class  GameObject */
#ifndef TOLUA_DISABLE_tolua_NeoGame_GameObject_setLuaIndentifier00
static int tolua_NeoGame_GameObject_setLuaIndentifier00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"GameObject",0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  GameObject* self = (GameObject*)  tolua_tousertype(tolua_S,1,0);
  const std::string luaIndentifier = ((const std::string)  tolua_tocppstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setLuaIndentifier'", NULL);
#endif
  {
   self->setLuaIndentifier(luaIndentifier);
   tolua_pushcppstring(tolua_S,(const char*)luaIndentifier);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setLuaIndentifier'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Update of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_Update00
static int tolua_NeoGame_NeoGraphics_Update00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Update'", NULL);
#endif
  {
   self->Update();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Update'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getInstance of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_getInstance00
static int tolua_NeoGame_NeoGraphics_getInstance00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   NeoGraphics* tolua_ret = (NeoGraphics*)  NeoGraphics::getInstance();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"NeoGraphics");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getInstance'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSfxManager of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_getSfxManager00
static int tolua_NeoGame_NeoGraphics_getSfxManager00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSfxManager'", NULL);
#endif
  {
   SfxManager* tolua_ret = (SfxManager*)  self->getSfxManager();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"SfxManager");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSfxManager'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetAvailableResolution of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_GetAvailableResolution00
static int tolua_NeoGame_NeoGraphics_GetAvailableResolution00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetAvailableResolution'", NULL);
#endif
  {
   std::string tolua_ret = (std::string)  self->GetAvailableResolution();
   tolua_pushcppstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetAvailableResolution'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setWindowCaption of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_setWindowCaption00
static int tolua_NeoGame_NeoGraphics_setWindowCaption00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  const std::string title = ((const std::string)  tolua_tocppstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setWindowCaption'", NULL);
#endif
  {
   self->setWindowCaption(title);
   tolua_pushcppstring(tolua_S,(const char*)title);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setWindowCaption'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: RenderUI of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_RenderUI00
static int tolua_NeoGame_NeoGraphics_RenderUI00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RenderUI'", NULL);
#endif
  {
   self->RenderUI();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RenderUI'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMesh of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_getMesh00
static int tolua_NeoGame_NeoGraphics_getMesh00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  std::string file = ((std::string)  tolua_tocppstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMesh'", NULL);
#endif
  {
   irr::scene::IAnimatedMesh* tolua_ret = (irr::scene::IAnimatedMesh*)  self->getMesh(file);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IAnimatedMesh");
   tolua_pushcppstring(tolua_S,(const char*)file);
  }
 }
 return 2;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMesh'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddAnimatedMeshSceneNode of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_AddAnimatedMeshSceneNode00
static int tolua_NeoGame_NeoGraphics_AddAnimatedMeshSceneNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::IAnimatedMesh",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"irr::scene::ISceneNode",1,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::IAnimatedMesh* mesh = ((irr::scene::IAnimatedMesh*)  tolua_tousertype(tolua_S,2,0));
  irr::scene::ISceneNode* parent = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,3,0));
  int id = ((int)  tolua_tonumber(tolua_S,4,-1));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddAnimatedMeshSceneNode'", NULL);
#endif
  {
   irr::scene::IAnimatedMeshSceneNode* tolua_ret = (irr::scene::IAnimatedMeshSceneNode*)  self->AddAnimatedMeshSceneNode(mesh,parent,id);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IAnimatedMeshSceneNode");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddAnimatedMeshSceneNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddAnimatedMeshSceneNode of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_AddAnimatedMeshSceneNode01
static int tolua_NeoGame_NeoGraphics_AddAnimatedMeshSceneNode01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::IAnimatedMesh",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::IAnimatedMesh* mesh = ((irr::scene::IAnimatedMesh*)  tolua_tousertype(tolua_S,2,0));
  irr::scene::ISceneNode* parent = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,3,0));
  int id = ((int)  tolua_tonumber(tolua_S,4,0));
  const irr::core::vector3d<float>* position = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddAnimatedMeshSceneNode'", NULL);
#endif
  {
   irr::scene::IAnimatedMeshSceneNode* tolua_ret = (irr::scene::IAnimatedMeshSceneNode*)  self->AddAnimatedMeshSceneNode(mesh,parent,id,*position);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IAnimatedMeshSceneNode");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_NeoGraphics_AddAnimatedMeshSceneNode00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddAnimatedMeshSceneNode of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_AddAnimatedMeshSceneNode02
static int tolua_NeoGame_NeoGraphics_AddAnimatedMeshSceneNode02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::IAnimatedMesh",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,6,&tolua_err) || !tolua_isusertype(tolua_S,6,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::IAnimatedMesh* mesh = ((irr::scene::IAnimatedMesh*)  tolua_tousertype(tolua_S,2,0));
  irr::scene::ISceneNode* parent = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,3,0));
  int id = ((int)  tolua_tonumber(tolua_S,4,0));
  const irr::core::vector3d<float>* position = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,5,0));
  const irr::core::vector3d<float>* rotation = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,6,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddAnimatedMeshSceneNode'", NULL);
#endif
  {
   irr::scene::IAnimatedMeshSceneNode* tolua_ret = (irr::scene::IAnimatedMeshSceneNode*)  self->AddAnimatedMeshSceneNode(mesh,parent,id,*position,*rotation);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IAnimatedMeshSceneNode");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_NeoGraphics_AddAnimatedMeshSceneNode01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddAnimatedMeshSceneNode of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_AddAnimatedMeshSceneNode03
static int tolua_NeoGame_NeoGraphics_AddAnimatedMeshSceneNode03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::IAnimatedMesh",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,6,&tolua_err) || !tolua_isusertype(tolua_S,6,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,7,&tolua_err) || !tolua_isusertype(tolua_S,7,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isboolean(tolua_S,8,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,9,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::IAnimatedMesh* mesh = ((irr::scene::IAnimatedMesh*)  tolua_tousertype(tolua_S,2,0));
  irr::scene::ISceneNode* parent = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,3,0));
  int id = ((int)  tolua_tonumber(tolua_S,4,0));
  const irr::core::vector3d<float>* position = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,5,0));
  const irr::core::vector3d<float>* rotation = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,6,0));
  const irr::core::vector3d<float>* scale = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,7,0));
  bool alsoAddIfMeshPointerZero = ((bool)  tolua_toboolean(tolua_S,8,false));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddAnimatedMeshSceneNode'", NULL);
#endif
  {
   irr::scene::IAnimatedMeshSceneNode* tolua_ret = (irr::scene::IAnimatedMeshSceneNode*)  self->AddAnimatedMeshSceneNode(mesh,parent,id,*position,*rotation,*scale,alsoAddIfMeshPointerZero);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IAnimatedMeshSceneNode");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_NeoGraphics_AddAnimatedMeshSceneNode02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddMeshSceneNode of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_AddMeshSceneNode00
static int tolua_NeoGame_NeoGraphics_AddMeshSceneNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::IMesh",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"irr::scene::ISceneNode",1,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::IMesh* mesh = ((irr::scene::IMesh*)  tolua_tousertype(tolua_S,2,0));
  irr::scene::ISceneNode* parent = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,3,0));
  int id = ((int)  tolua_tonumber(tolua_S,4,-1));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddMeshSceneNode'", NULL);
#endif
  {
   irr::scene::IMeshSceneNode* tolua_ret = (irr::scene::IMeshSceneNode*)  self->AddMeshSceneNode(mesh,parent,id);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IMeshSceneNode");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddMeshSceneNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddMeshSceneNode of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_AddMeshSceneNode01
static int tolua_NeoGame_NeoGraphics_AddMeshSceneNode01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::IMesh",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::IMesh* mesh = ((irr::scene::IMesh*)  tolua_tousertype(tolua_S,2,0));
  irr::scene::ISceneNode* parent = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,3,0));
  int id = ((int)  tolua_tonumber(tolua_S,4,0));
  const irr::core::vector3d<float>* position = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddMeshSceneNode'", NULL);
#endif
  {
   irr::scene::IMeshSceneNode* tolua_ret = (irr::scene::IMeshSceneNode*)  self->AddMeshSceneNode(mesh,parent,id,*position);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IMeshSceneNode");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_NeoGraphics_AddMeshSceneNode00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddMeshSceneNode of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_AddMeshSceneNode02
static int tolua_NeoGame_NeoGraphics_AddMeshSceneNode02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::IMesh",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,6,&tolua_err) || !tolua_isusertype(tolua_S,6,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::IMesh* mesh = ((irr::scene::IMesh*)  tolua_tousertype(tolua_S,2,0));
  irr::scene::ISceneNode* parent = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,3,0));
  int id = ((int)  tolua_tonumber(tolua_S,4,0));
  const irr::core::vector3d<float>* position = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,5,0));
  const irr::core::vector3d<float>* rotation = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,6,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddMeshSceneNode'", NULL);
#endif
  {
   irr::scene::IMeshSceneNode* tolua_ret = (irr::scene::IMeshSceneNode*)  self->AddMeshSceneNode(mesh,parent,id,*position,*rotation);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IMeshSceneNode");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_NeoGraphics_AddMeshSceneNode01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddMeshSceneNode of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_AddMeshSceneNode03
static int tolua_NeoGame_NeoGraphics_AddMeshSceneNode03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::IMesh",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,6,&tolua_err) || !tolua_isusertype(tolua_S,6,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,7,&tolua_err) || !tolua_isusertype(tolua_S,7,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isboolean(tolua_S,8,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,9,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::IMesh* mesh = ((irr::scene::IMesh*)  tolua_tousertype(tolua_S,2,0));
  irr::scene::ISceneNode* parent = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,3,0));
  int id = ((int)  tolua_tonumber(tolua_S,4,0));
  const irr::core::vector3d<float>* position = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,5,0));
  const irr::core::vector3d<float>* rotation = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,6,0));
  const irr::core::vector3d<float>* scale = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,7,0));
  bool alsoAddIfMeshPointerZero = ((bool)  tolua_toboolean(tolua_S,8,false));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddMeshSceneNode'", NULL);
#endif
  {
   irr::scene::IMeshSceneNode* tolua_ret = (irr::scene::IMeshSceneNode*)  self->AddMeshSceneNode(mesh,parent,id,*position,*rotation,*scale,alsoAddIfMeshPointerZero);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IMeshSceneNode");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_NeoGraphics_AddMeshSceneNode02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddCameraSceneNode of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_AddCameraSceneNode00
static int tolua_NeoGame_NeoGraphics_AddCameraSceneNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::ISceneNode",1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::ISceneNode* parent = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddCameraSceneNode'", NULL);
#endif
  {
   irr::scene::ICameraSceneNode* tolua_ret = (irr::scene::ICameraSceneNode*)  self->AddCameraSceneNode(parent);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::ICameraSceneNode");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddCameraSceneNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddCameraSceneNode of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_AddCameraSceneNode01
static int tolua_NeoGame_NeoGraphics_AddCameraSceneNode01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::ISceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::ISceneNode* parent = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::vector3d<float>* position = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddCameraSceneNode'", NULL);
#endif
  {
   irr::scene::ICameraSceneNode* tolua_ret = (irr::scene::ICameraSceneNode*)  self->AddCameraSceneNode(parent,*position);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::ICameraSceneNode");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_NeoGraphics_AddCameraSceneNode00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddCameraSceneNode of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_AddCameraSceneNode02
static int tolua_NeoGame_NeoGraphics_AddCameraSceneNode02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::ISceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,5,1,&tolua_err) ||
     !tolua_isboolean(tolua_S,6,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::ISceneNode* parent = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::vector3d<float>* position = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,3,0));
  const irr::core::vector3d<float>* lookat = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,4,0));
  int id = ((int)  tolua_tonumber(tolua_S,5,-1));
  bool makeActive = ((bool)  tolua_toboolean(tolua_S,6,true));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddCameraSceneNode'", NULL);
#endif
  {
   irr::scene::ICameraSceneNode* tolua_ret = (irr::scene::ICameraSceneNode*)  self->AddCameraSceneNode(parent,*position,*lookat,id,makeActive);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::ICameraSceneNode");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_NeoGraphics_AddCameraSceneNode01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddCameraSceneNodeMaya of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_AddCameraSceneNodeMaya00
static int tolua_NeoGame_NeoGraphics_AddCameraSceneNodeMaya00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::ISceneNode",1,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,6,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,7,1,&tolua_err) ||
     !tolua_isboolean(tolua_S,8,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,9,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::ISceneNode* parent = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
  float rotateSpeed = ((float)  tolua_tonumber(tolua_S,3,-1500.f));
  float zoomSpeed = ((float)  tolua_tonumber(tolua_S,4,200.f));
  float translationSpeed = ((float)  tolua_tonumber(tolua_S,5,1500.f));
  signed int id = ((signed int)  tolua_tonumber(tolua_S,6,-1));
  float distance = ((float)  tolua_tonumber(tolua_S,7,70.f));
  bool makeActive = ((bool)  tolua_toboolean(tolua_S,8,true));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddCameraSceneNodeMaya'", NULL);
#endif
  {
   irr::scene::ICameraSceneNode* tolua_ret = (irr::scene::ICameraSceneNode*)  self->AddCameraSceneNodeMaya(parent,rotateSpeed,zoomSpeed,translationSpeed,id,distance,makeActive);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::ICameraSceneNode");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddCameraSceneNodeMaya'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddCameraSceneNodeFPS of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_AddCameraSceneNodeFPS00
static int tolua_NeoGame_NeoGraphics_AddCameraSceneNodeFPS00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::ISceneNode",1,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,1,&tolua_err) ||
     !tolua_isusertype(tolua_S,6,"irr::SKeyMap",1,&tolua_err) ||
     !tolua_isnumber(tolua_S,7,1,&tolua_err) ||
     !tolua_isboolean(tolua_S,8,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,9,1,&tolua_err) ||
     !tolua_isboolean(tolua_S,10,1,&tolua_err) ||
     !tolua_isboolean(tolua_S,11,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,12,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::ISceneNode* parent = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
  float rotateSpeed = ((float)  tolua_tonumber(tolua_S,3,100.0f));
  float moveSpeed = ((float)  tolua_tonumber(tolua_S,4,0.5f));
  int id = ((int)  tolua_tonumber(tolua_S,5,-1));
  irr::SKeyMap* keyMapArray = ((irr::SKeyMap*)  tolua_tousertype(tolua_S,6,0));
  int keyMapSize = ((int)  tolua_tonumber(tolua_S,7,0));
  bool noVerticalMovement = ((bool)  tolua_toboolean(tolua_S,8,false));
  int jumpSpeed = ((int)  tolua_tonumber(tolua_S,9,0.f));
  bool invertMouse = ((bool)  tolua_toboolean(tolua_S,10,false));
  bool makeActive = ((bool)  tolua_toboolean(tolua_S,11,true));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddCameraSceneNodeFPS'", NULL);
#endif
  {
   irr::scene::ICameraSceneNode* tolua_ret = (irr::scene::ICameraSceneNode*)  self->AddCameraSceneNodeFPS(parent,rotateSpeed,moveSpeed,id,keyMapArray,keyMapSize,noVerticalMovement,jumpSpeed,invertMouse,makeActive);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::ICameraSceneNode");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddCameraSceneNodeFPS'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddCubeSceneNode of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_AddCubeSceneNode00
static int tolua_NeoGame_NeoGraphics_AddCubeSceneNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,1,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"irr::scene::ISceneNode",1,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  float size = ((float)  tolua_tonumber(tolua_S,2,10.0f));
  irr::scene::ISceneNode* parent = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,3,0));
  int id = ((int)  tolua_tonumber(tolua_S,4,-1));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddCubeSceneNode'", NULL);
#endif
  {
   irr::scene::IMeshSceneNode* tolua_ret = (irr::scene::IMeshSceneNode*)  self->AddCubeSceneNode(size,parent,id);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IMeshSceneNode");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddCubeSceneNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddCubeSceneNode of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_AddCubeSceneNode01
static int tolua_NeoGame_NeoGraphics_AddCubeSceneNode01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  float size = ((float)  tolua_tonumber(tolua_S,2,0));
  irr::scene::ISceneNode* parent = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,3,0));
  int id = ((int)  tolua_tonumber(tolua_S,4,0));
  const irr::core::vector3d<float>* position = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddCubeSceneNode'", NULL);
#endif
  {
   irr::scene::IMeshSceneNode* tolua_ret = (irr::scene::IMeshSceneNode*)  self->AddCubeSceneNode(size,parent,id,*position);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IMeshSceneNode");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_NeoGraphics_AddCubeSceneNode00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddCubeSceneNode of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_AddCubeSceneNode02
static int tolua_NeoGame_NeoGraphics_AddCubeSceneNode02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,6,&tolua_err) || !tolua_isusertype(tolua_S,6,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  float size = ((float)  tolua_tonumber(tolua_S,2,0));
  irr::scene::ISceneNode* parent = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,3,0));
  int id = ((int)  tolua_tonumber(tolua_S,4,0));
  const irr::core::vector3d<float>* position = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,5,0));
  const irr::core::vector3d<float>* rotation = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,6,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddCubeSceneNode'", NULL);
#endif
  {
   irr::scene::IMeshSceneNode* tolua_ret = (irr::scene::IMeshSceneNode*)  self->AddCubeSceneNode(size,parent,id,*position,*rotation);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IMeshSceneNode");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_NeoGraphics_AddCubeSceneNode01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddCubeSceneNode of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_AddCubeSceneNode03
static int tolua_NeoGame_NeoGraphics_AddCubeSceneNode03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,6,&tolua_err) || !tolua_isusertype(tolua_S,6,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,7,&tolua_err) || !tolua_isusertype(tolua_S,7,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,8,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  float size = ((float)  tolua_tonumber(tolua_S,2,0));
  irr::scene::ISceneNode* parent = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,3,0));
  int id = ((int)  tolua_tonumber(tolua_S,4,0));
  const irr::core::vector3d<float>* position = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,5,0));
  const irr::core::vector3d<float>* rotation = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,6,0));
  const irr::core::vector3d<float>* scale = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,7,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddCubeSceneNode'", NULL);
#endif
  {
   irr::scene::IMeshSceneNode* tolua_ret = (irr::scene::IMeshSceneNode*)  self->AddCubeSceneNode(size,parent,id,*position,*rotation,*scale);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IMeshSceneNode");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_NeoGraphics_AddCubeSceneNode02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddSphereSceneNode of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_AddSphereSceneNode00
static int tolua_NeoGame_NeoGraphics_AddSphereSceneNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
     !tolua_isusertype(tolua_S,4,"irr::scene::ISceneNode",1,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  float radius = ((float)  tolua_tonumber(tolua_S,2,5.0f));
  int polyCount = ((int)  tolua_tonumber(tolua_S,3,16));
  irr::scene::ISceneNode* parent = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,4,0));
  int id = ((int)  tolua_tonumber(tolua_S,5,-1));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddSphereSceneNode'", NULL);
#endif
  {
   irr::scene::IMeshSceneNode* tolua_ret = (irr::scene::IMeshSceneNode*)  self->AddSphereSceneNode(radius,polyCount,parent,id);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IMeshSceneNode");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddSphereSceneNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddSphereSceneNode of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_AddSphereSceneNode01
static int tolua_NeoGame_NeoGraphics_AddSphereSceneNode01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,4,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,6,&tolua_err) || !tolua_isusertype(tolua_S,6,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  float radius = ((float)  tolua_tonumber(tolua_S,2,0));
  int polyCount = ((int)  tolua_tonumber(tolua_S,3,0));
  irr::scene::ISceneNode* parent = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,4,0));
  int id = ((int)  tolua_tonumber(tolua_S,5,0));
  const irr::core::vector3d<float>* position = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,6,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddSphereSceneNode'", NULL);
#endif
  {
   irr::scene::IMeshSceneNode* tolua_ret = (irr::scene::IMeshSceneNode*)  self->AddSphereSceneNode(radius,polyCount,parent,id,*position);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IMeshSceneNode");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_NeoGraphics_AddSphereSceneNode00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddSphereSceneNode of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_AddSphereSceneNode02
static int tolua_NeoGame_NeoGraphics_AddSphereSceneNode02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,4,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,6,&tolua_err) || !tolua_isusertype(tolua_S,6,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,7,&tolua_err) || !tolua_isusertype(tolua_S,7,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,8,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  float radius = ((float)  tolua_tonumber(tolua_S,2,0));
  int polyCount = ((int)  tolua_tonumber(tolua_S,3,0));
  irr::scene::ISceneNode* parent = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,4,0));
  int id = ((int)  tolua_tonumber(tolua_S,5,0));
  const irr::core::vector3d<float>* position = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,6,0));
  const irr::core::vector3d<float>* rotation = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,7,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddSphereSceneNode'", NULL);
#endif
  {
   irr::scene::IMeshSceneNode* tolua_ret = (irr::scene::IMeshSceneNode*)  self->AddSphereSceneNode(radius,polyCount,parent,id,*position,*rotation);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IMeshSceneNode");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_NeoGraphics_AddSphereSceneNode01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddSphereSceneNode of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_AddSphereSceneNode03
static int tolua_NeoGame_NeoGraphics_AddSphereSceneNode03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,4,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,6,&tolua_err) || !tolua_isusertype(tolua_S,6,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,7,&tolua_err) || !tolua_isusertype(tolua_S,7,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,8,&tolua_err) || !tolua_isusertype(tolua_S,8,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,9,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  float radius = ((float)  tolua_tonumber(tolua_S,2,0));
  int polyCount = ((int)  tolua_tonumber(tolua_S,3,0));
  irr::scene::ISceneNode* parent = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,4,0));
  int id = ((int)  tolua_tonumber(tolua_S,5,0));
  const irr::core::vector3d<float>* position = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,6,0));
  const irr::core::vector3d<float>* rotation = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,7,0));
  const irr::core::vector3d<float>* scale = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,8,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddSphereSceneNode'", NULL);
#endif
  {
   irr::scene::IMeshSceneNode* tolua_ret = (irr::scene::IMeshSceneNode*)  self->AddSphereSceneNode(radius,polyCount,parent,id,*position,*rotation,*scale);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IMeshSceneNode");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_NeoGraphics_AddSphereSceneNode02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddLightSceneNode of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_AddLightSceneNode00
static int tolua_NeoGame_NeoGraphics_AddLightSceneNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::ISceneNode",1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::ISceneNode* parent = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddLightSceneNode'", NULL);
#endif
  {
   irr::scene::ILightSceneNode* tolua_ret = (irr::scene::ILightSceneNode*)  self->AddLightSceneNode(parent);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::ILightSceneNode");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddLightSceneNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddLightSceneNode of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_AddLightSceneNode01
static int tolua_NeoGame_NeoGraphics_AddLightSceneNode01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::ISceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::ISceneNode* parent = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::vector3d<float>* position = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddLightSceneNode'", NULL);
#endif
  {
   irr::scene::ILightSceneNode* tolua_ret = (irr::scene::ILightSceneNode*)  self->AddLightSceneNode(parent,*position);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::ILightSceneNode");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_NeoGraphics_AddLightSceneNode00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddLightSceneNode of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_AddLightSceneNode02
static int tolua_NeoGame_NeoGraphics_AddLightSceneNode02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::ISceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"irr::video::SColorf",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,5,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,6,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::ISceneNode* parent = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::vector3d<float>* position = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,3,0));
  irr::video::SColorf color = *((irr::video::SColorf*)  tolua_tousertype(tolua_S,4,0));
  float radius = ((float)  tolua_tonumber(tolua_S,5,100.0f));
  int id = ((int)  tolua_tonumber(tolua_S,6,-1));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddLightSceneNode'", NULL);
#endif
  {
   irr::scene::ILightSceneNode* tolua_ret = (irr::scene::ILightSceneNode*)  self->AddLightSceneNode(parent,*position,color,radius,id);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::ILightSceneNode");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_NeoGraphics_AddLightSceneNode01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddBillboardSceneNode of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_AddBillboardSceneNode00
static int tolua_NeoGame_NeoGraphics_AddBillboardSceneNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::ISceneNode",1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::ISceneNode* parent = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddBillboardSceneNode'", NULL);
#endif
  {
   irr::scene::IBillboardSceneNode* tolua_ret = (irr::scene::IBillboardSceneNode*)  self->AddBillboardSceneNode(parent);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IBillboardSceneNode");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddBillboardSceneNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddBillboardSceneNode of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_AddBillboardSceneNode01
static int tolua_NeoGame_NeoGraphics_AddBillboardSceneNode01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::ISceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::dimension2d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::ISceneNode* parent = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::dimension2d<float>* size = ((const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddBillboardSceneNode'", NULL);
#endif
  {
   irr::scene::IBillboardSceneNode* tolua_ret = (irr::scene::IBillboardSceneNode*)  self->AddBillboardSceneNode(parent,*size);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IBillboardSceneNode");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_NeoGraphics_AddBillboardSceneNode00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddBillboardSceneNode of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_AddBillboardSceneNode02
static int tolua_NeoGame_NeoGraphics_AddBillboardSceneNode02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::ISceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::dimension2d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnumber(tolua_S,5,1,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,6,&tolua_err) || !tolua_isusertype(tolua_S,6,"irr::video::SColor",1,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,7,&tolua_err) || !tolua_isusertype(tolua_S,7,"irr::video::SColor",1,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,8,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::ISceneNode* parent = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
  const irr::core::dimension2d<float>* size = ((const irr::core::dimension2d<float>*)  tolua_tousertype(tolua_S,3,0));
  const irr::core::vector3d<float>* position = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,4,0));
  int id = ((int)  tolua_tonumber(tolua_S,5,-1));
  irr::video::SColor colorTop = *((irr::video::SColor*)  tolua_tousertype(tolua_S,6,(void*)&(const irr::video::SColor)0xFFFFFFFF));
  irr::video::SColor colorBottom = *((irr::video::SColor*)  tolua_tousertype(tolua_S,7,(void*)&(const irr::video::SColor)0xFFFFFFFF));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddBillboardSceneNode'", NULL);
#endif
  {
   irr::scene::IBillboardSceneNode* tolua_ret = (irr::scene::IBillboardSceneNode*)  self->AddBillboardSceneNode(parent,*size,*position,id,colorTop,colorBottom);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IBillboardSceneNode");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_NeoGraphics_AddBillboardSceneNode01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddOctreeSceneNode of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_AddOctreeSceneNode00
static int tolua_NeoGame_NeoGraphics_AddOctreeSceneNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::IAnimatedMesh",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"irr::scene::ISceneNode",1,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,1,&tolua_err) ||
     !tolua_isboolean(tolua_S,6,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::IAnimatedMesh* mesh = ((irr::scene::IAnimatedMesh*)  tolua_tousertype(tolua_S,2,0));
  irr::scene::ISceneNode* parent = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,3,0));
  int id = ((int)  tolua_tonumber(tolua_S,4,-1));
  int minimalPolysPerNode = ((int)  tolua_tonumber(tolua_S,5,512));
  bool alsoAddIfMeshPointerZero = ((bool)  tolua_toboolean(tolua_S,6,false));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddOctreeSceneNode'", NULL);
#endif
  {
   irr::scene::IMeshSceneNode* tolua_ret = (irr::scene::IMeshSceneNode*)  self->AddOctreeSceneNode(mesh,parent,id,minimalPolysPerNode,alsoAddIfMeshPointerZero);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IMeshSceneNode");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddOctreeSceneNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddOctreeSceneNode of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_AddOctreeSceneNode01
static int tolua_NeoGame_NeoGraphics_AddOctreeSceneNode01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::IMesh",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"irr::scene::ISceneNode",1,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,1,&tolua_err) ||
     !tolua_isboolean(tolua_S,6,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::IMesh* mesh = ((irr::scene::IMesh*)  tolua_tousertype(tolua_S,2,0));
  irr::scene::ISceneNode* parent = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,3,0));
  int id = ((int)  tolua_tonumber(tolua_S,4,-1));
  int minimalPolysPerNode = ((int)  tolua_tonumber(tolua_S,5,256));
  bool alsoAddIfMeshPointerZero = ((bool)  tolua_toboolean(tolua_S,6,false));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddOctreeSceneNode'", NULL);
#endif
  {
   irr::scene::IMeshSceneNode* tolua_ret = (irr::scene::IMeshSceneNode*)  self->AddOctreeSceneNode(mesh,parent,id,minimalPolysPerNode,alsoAddIfMeshPointerZero);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IMeshSceneNode");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_NeoGraphics_AddOctreeSceneNode00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddSkyDomeSceneNode of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_AddSkyDomeSceneNode00
static int tolua_NeoGame_NeoGraphics_AddSkyDomeSceneNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::video::ITexture",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,5,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,6,1,&tolua_err) ||
     !tolua_isnumber(tolua_S,7,1,&tolua_err) ||
     !tolua_isusertype(tolua_S,8,"irr::scene::ISceneNode",1,&tolua_err) ||
     !tolua_isnumber(tolua_S,9,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,10,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  irr::video::ITexture* texture = ((irr::video::ITexture*)  tolua_tousertype(tolua_S,2,0));
  unsigned int horiRes = ((unsigned int)  tolua_tonumber(tolua_S,3,16));
  unsigned int vertRes = ((unsigned int)  tolua_tonumber(tolua_S,4,8));
  float texturePercentage = ((float)  tolua_tonumber(tolua_S,5,0.9));
  float spherePercentage = ((float)  tolua_tonumber(tolua_S,6,2.0));
  float radius = ((float)  tolua_tonumber(tolua_S,7,1000.f));
  irr::scene::ISceneNode* parent = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,8,0));
  int id = ((int)  tolua_tonumber(tolua_S,9,-1));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddSkyDomeSceneNode'", NULL);
#endif
  {
   irr::scene::ISceneNode* tolua_ret = (irr::scene::ISceneNode*)  self->AddSkyDomeSceneNode(texture,horiRes,vertRes,texturePercentage,spherePercentage,radius,parent,id);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::ISceneNode");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddSkyDomeSceneNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddParticleSystemSceneNode of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_AddParticleSystemSceneNode00
static int tolua_NeoGame_NeoGraphics_AddParticleSystemSceneNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,1,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"irr::scene::ISceneNode",1,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  bool withDefaultEmitter = ((bool)  tolua_toboolean(tolua_S,2,true));
  irr::scene::ISceneNode* parent = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,3,0));
  int id = ((int)  tolua_tonumber(tolua_S,4,-1));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddParticleSystemSceneNode'", NULL);
#endif
  {
   irr::scene::IParticleSystemSceneNode* tolua_ret = (irr::scene::IParticleSystemSceneNode*)  self->AddParticleSystemSceneNode(withDefaultEmitter,parent,id);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleSystemSceneNode");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddParticleSystemSceneNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddParticleSystemSceneNode of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_AddParticleSystemSceneNode01
static int tolua_NeoGame_NeoGraphics_AddParticleSystemSceneNode01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  bool withDefaultEmitter = ((bool)  tolua_toboolean(tolua_S,2,0));
  irr::scene::ISceneNode* parent = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,3,0));
  int id = ((int)  tolua_tonumber(tolua_S,4,0));
  const irr::core::vector3d<float>* position = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,5,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddParticleSystemSceneNode'", NULL);
#endif
  {
   irr::scene::IParticleSystemSceneNode* tolua_ret = (irr::scene::IParticleSystemSceneNode*)  self->AddParticleSystemSceneNode(withDefaultEmitter,parent,id,*position);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleSystemSceneNode");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_NeoGraphics_AddParticleSystemSceneNode00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddParticleSystemSceneNode of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_AddParticleSystemSceneNode02
static int tolua_NeoGame_NeoGraphics_AddParticleSystemSceneNode02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,6,&tolua_err) || !tolua_isusertype(tolua_S,6,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  bool withDefaultEmitter = ((bool)  tolua_toboolean(tolua_S,2,0));
  irr::scene::ISceneNode* parent = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,3,0));
  int id = ((int)  tolua_tonumber(tolua_S,4,0));
  const irr::core::vector3d<float>* position = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,5,0));
  const irr::core::vector3d<float>* rotation = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,6,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddParticleSystemSceneNode'", NULL);
#endif
  {
   irr::scene::IParticleSystemSceneNode* tolua_ret = (irr::scene::IParticleSystemSceneNode*)  self->AddParticleSystemSceneNode(withDefaultEmitter,parent,id,*position,*rotation);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleSystemSceneNode");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_NeoGraphics_AddParticleSystemSceneNode01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddParticleSystemSceneNode of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_AddParticleSystemSceneNode03
static int tolua_NeoGame_NeoGraphics_AddParticleSystemSceneNode03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,6,&tolua_err) || !tolua_isusertype(tolua_S,6,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,7,&tolua_err) || !tolua_isusertype(tolua_S,7,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,8,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  bool withDefaultEmitter = ((bool)  tolua_toboolean(tolua_S,2,0));
  irr::scene::ISceneNode* parent = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,3,0));
  int id = ((int)  tolua_tonumber(tolua_S,4,0));
  const irr::core::vector3d<float>* position = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,5,0));
  const irr::core::vector3d<float>* rotation = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,6,0));
  const irr::core::vector3d<float>* scale = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,7,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddParticleSystemSceneNode'", NULL);
#endif
  {
   irr::scene::IParticleSystemSceneNode* tolua_ret = (irr::scene::IParticleSystemSceneNode*)  self->AddParticleSystemSceneNode(withDefaultEmitter,parent,id,*position,*rotation,*scale);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IParticleSystemSceneNode");
  }
 }
 return 1;
tolua_lerror:
 return tolua_NeoGame_NeoGraphics_AddParticleSystemSceneNode02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddEmptySceneNode of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_AddEmptySceneNode00
static int tolua_NeoGame_NeoGraphics_AddEmptySceneNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::ISceneNode",1,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::ISceneNode* parent = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
  int id = ((int)  tolua_tonumber(tolua_S,3,-1));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddEmptySceneNode'", NULL);
#endif
  {
   irr::scene::ISceneNode* tolua_ret = (irr::scene::ISceneNode*)  self->AddEmptySceneNode(parent,id);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::ISceneNode");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddEmptySceneNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddDummyTransformationSceneNode of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_AddDummyTransformationSceneNode00
static int tolua_NeoGame_NeoGraphics_AddDummyTransformationSceneNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::ISceneNode",1,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::ISceneNode* parent = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
  int id = ((int)  tolua_tonumber(tolua_S,3,-1));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddDummyTransformationSceneNode'", NULL);
#endif
  {
   irr::scene::IDummyTransformationSceneNode* tolua_ret = (irr::scene::IDummyTransformationSceneNode*)  self->AddDummyTransformationSceneNode(parent,id);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::IDummyTransformationSceneNode");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddDummyTransformationSceneNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetActiveCamera of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_GetActiveCamera00
static int tolua_NeoGame_NeoGraphics_GetActiveCamera00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetActiveCamera'", NULL);
#endif
  {
   irr::scene::ICameraSceneNode* tolua_ret = (irr::scene::ICameraSceneNode*)  self->GetActiveCamera();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::ICameraSceneNode");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetActiveCamera'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetActiveCamera of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_SetActiveCamera00
static int tolua_NeoGame_NeoGraphics_SetActiveCamera00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::ICameraSceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::ICameraSceneNode* camera = ((irr::scene::ICameraSceneNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetActiveCamera'", NULL);
#endif
  {
   self->SetActiveCamera(camera);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetActiveCamera'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetAmbientLight of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_SetAmbientLight00
static int tolua_NeoGame_NeoGraphics_SetAmbientLight00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  const irr::video::SColor* colour = ((const irr::video::SColor*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetAmbientLight'", NULL);
#endif
  {
   self->SetAmbientLight(*colour);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetAmbientLight'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: loadScene of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_loadScene00
static int tolua_NeoGame_NeoGraphics_loadScene00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  std::string file = ((std::string)  tolua_tocppstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'loadScene'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->loadScene(file);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'loadScene'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getFps of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_getFps00
static int tolua_NeoGame_NeoGraphics_getFps00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getFps'", NULL);
#endif
  {
   float tolua_ret = (float)  self->getFps();
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getFps'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getTextFromOSClipboard of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_getTextFromOSClipboard00
static int tolua_NeoGame_NeoGraphics_getTextFromOSClipboard00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getTextFromOSClipboard'", NULL);
#endif
  {
   std::string tolua_ret = (std::string)  self->getTextFromOSClipboard();
   tolua_pushcppstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getTextFromOSClipboard'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setAppClipboardString of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_setAppClipboardString00
static int tolua_NeoGame_NeoGraphics_setAppClipboardString00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  const std::string text = ((const std::string)  tolua_tocppstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setAppClipboardString'", NULL);
#endif
  {
   self->setAppClipboardString(text);
   tolua_pushcppstring(tolua_S,(const char*)text);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setAppClipboardString'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getAppClipboardString of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_getAppClipboardString00
static int tolua_NeoGame_NeoGraphics_getAppClipboardString00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getAppClipboardString'", NULL);
#endif
  {
   std::string tolua_ret = (std::string)  self->getAppClipboardString();
   tolua_pushcppstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getAppClipboardString'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setOSClipboardText of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_setOSClipboardText00
static int tolua_NeoGame_NeoGraphics_setOSClipboardText00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  const std::string text = ((const std::string)  tolua_tocppstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setOSClipboardText'", NULL);
#endif
  {
   self->setOSClipboardText(text);
   tolua_pushcppstring(tolua_S,(const char*)text);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setOSClipboardText'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getOperatingSystemVersion of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_getOperatingSystemVersion00
static int tolua_NeoGame_NeoGraphics_getOperatingSystemVersion00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getOperatingSystemVersion'", NULL);
#endif
  {
   std::string tolua_ret = (std::string)  self->getOperatingSystemVersion();
   tolua_pushcppstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getOperatingSystemVersion'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getMeshTexturePath of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_getMeshTexturePath00
static int tolua_NeoGame_NeoGraphics_getMeshTexturePath00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::IMesh",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::IMesh* mesh = ((irr::scene::IMesh*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getMeshTexturePath'", NULL);
#endif
  {
   std::vector<std::string> tolua_ret = (std::vector<std::string>)  self->getMeshTexturePath(mesh);
   {
#ifdef __cplusplus
    void* tolua_obj = Mtolua_new((std::vector<std::string>)(tolua_ret));
     tolua_pushusertype(tolua_S,tolua_obj,"std::vector<std::string>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(std::vector<std::string>));
     tolua_pushusertype(tolua_S,tolua_obj,"std::vector<std::string>");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
   }
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getMeshTexturePath'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: CleanUp of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_CleanUp00
static int tolua_NeoGame_NeoGraphics_CleanUp00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'CleanUp'", NULL);
#endif
  {
   self->CleanUp();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'CleanUp'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: LoadTexture of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_LoadTexture00
static int tolua_NeoGame_NeoGraphics_LoadTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  std::string path = ((std::string)  tolua_tocppstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'LoadTexture'", NULL);
#endif
  {
   irr::video::ITexture* tolua_ret = (irr::video::ITexture*)  self->LoadTexture(path);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::video::ITexture");
   tolua_pushcppstring(tolua_S,(const char*)path);
  }
 }
 return 2;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'LoadTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: UnloadTexture of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_UnloadTexture00
static int tolua_NeoGame_NeoGraphics_UnloadTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::video::ITexture",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  irr::video::ITexture* texture = ((irr::video::ITexture*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'UnloadTexture'", NULL);
#endif
  {
   self->UnloadTexture(texture);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'UnloadTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetAttachedGameObject of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_GetAttachedGameObject00
static int tolua_NeoGame_NeoGraphics_GetAttachedGameObject00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::ISceneNode* node = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetAttachedGameObject'", NULL);
#endif
  {
   GameObject* tolua_ret = (GameObject*)  self->GetAttachedGameObject(node);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"GameObject");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetAttachedGameObject'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: BindSceneNodeToGameObject of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_BindSceneNodeToGameObject00
static int tolua_NeoGame_NeoGraphics_BindSceneNodeToGameObject00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,3,"GameObject",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::ISceneNode* node = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
  GameObject* go = ((GameObject*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'BindSceneNodeToGameObject'", NULL);
#endif
  {
   self->BindSceneNodeToGameObject(node,go);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'BindSceneNodeToGameObject'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: RemoveSceneNode of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_RemoveSceneNode00
static int tolua_NeoGame_NeoGraphics_RemoveSceneNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::ISceneNode* node = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RemoveSceneNode'", NULL);
#endif
  {
   self->RemoveSceneNode(node);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RemoveSceneNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ClearAllNodes of class  NeoGraphics */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoGraphics_ClearAllNodes00
static int tolua_NeoGame_NeoGraphics_ClearAllNodes00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoGraphics",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoGraphics* self = (NeoGraphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ClearAllNodes'", NULL);
#endif
  {
   self->ClearAllNodes();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ClearAllNodes'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Init of class  SfxManager */
#ifndef TOLUA_DISABLE_tolua_NeoGame_SfxManager_Init00
static int tolua_NeoGame_SfxManager_Init00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SfxManager",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SfxManager* self = (SfxManager*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Init'", NULL);
#endif
  {
   self->Init();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Init'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddSpriteTexture of class  SfxManager */
#ifndef TOLUA_DISABLE_tolua_NeoGame_SfxManager_AddSpriteTexture00
static int tolua_NeoGame_SfxManager_AddSpriteTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"SfxManager",0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
     !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  SfxManager* self = (SfxManager*)  tolua_tousertype(tolua_S,1,0);
  std::string sprite_file = ((std::string)  tolua_tocppstring(tolua_S,2,0));
  int row = ((int)  tolua_tonumber(tolua_S,3,0));
  int column = ((int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddSpriteTexture'", NULL);
#endif
  {
   self->AddSpriteTexture(sprite_file,row,column);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddSpriteTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  BasicExplosionParams */
#ifndef TOLUA_DISABLE_tolua_NeoGame_BasicExplosionParams_new00
static int tolua_NeoGame_BasicExplosionParams_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"BasicExplosionParams",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   BasicExplosionParams* tolua_ret = (BasicExplosionParams*)  Mtolua_new((BasicExplosionParams)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"BasicExplosionParams");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  BasicExplosionParams */
#ifndef TOLUA_DISABLE_tolua_NeoGame_BasicExplosionParams_new00_local
static int tolua_NeoGame_BasicExplosionParams_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"BasicExplosionParams",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   BasicExplosionParams* tolua_ret = (BasicExplosionParams*)  Mtolua_new((BasicExplosionParams)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"BasicExplosionParams");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  BasicExplosionParams */
#ifndef TOLUA_DISABLE_tolua_NeoGame_BasicExplosionParams_delete00
static int tolua_NeoGame_BasicExplosionParams_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"BasicExplosionParams",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  BasicExplosionParams* self = (BasicExplosionParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: PushScriptValue of class  BasicExplosionParams */
#ifndef TOLUA_DISABLE_tolua_NeoGame_BasicExplosionParams_PushScriptValue00
static int tolua_NeoGame_BasicExplosionParams_PushScriptValue00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"BasicExplosionParams",0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  BasicExplosionParams* self = (BasicExplosionParams*)  tolua_tousertype(tolua_S,1,0);
  std::string value = ((std::string)  tolua_tocppstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'PushScriptValue'", NULL);
#endif
  {
   self->PushScriptValue(value);
   tolua_pushcppstring(tolua_S,(const char*)value);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'PushScriptValue'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ClearScriptValues of class  BasicExplosionParams */
#ifndef TOLUA_DISABLE_tolua_NeoGame_BasicExplosionParams_ClearScriptValues00
static int tolua_NeoGame_BasicExplosionParams_ClearScriptValues00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"BasicExplosionParams",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  BasicExplosionParams* self = (BasicExplosionParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ClearScriptValues'", NULL);
#endif
  {
   self->ClearScriptValues();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ClearScriptValues'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetScriptValueAt of class  BasicExplosionParams */
#ifndef TOLUA_DISABLE_tolua_NeoGame_BasicExplosionParams_SetScriptValueAt00
static int tolua_NeoGame_BasicExplosionParams_SetScriptValueAt00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"BasicExplosionParams",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  BasicExplosionParams* self = (BasicExplosionParams*)  tolua_tousertype(tolua_S,1,0);
  int i = ((int)  tolua_tonumber(tolua_S,2,0));
  std::string v = ((std::string)  tolua_tocppstring(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetScriptValueAt'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->SetScriptValueAt(i,v);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
   tolua_pushcppstring(tolua_S,(const char*)v);
  }
 }
 return 2;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetScriptValueAt'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: fRange of class  BasicExplosionParams */
#ifndef TOLUA_DISABLE_tolua_get_BasicExplosionParams_fRange
static int tolua_get_BasicExplosionParams_fRange(lua_State* tolua_S)
{
  BasicExplosionParams* self = (BasicExplosionParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'fRange'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->fRange);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: fRange of class  BasicExplosionParams */
#ifndef TOLUA_DISABLE_tolua_set_BasicExplosionParams_fRange
static int tolua_set_BasicExplosionParams_fRange(lua_State* tolua_S)
{
  BasicExplosionParams* self = (BasicExplosionParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'fRange'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->fRange = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: fImpulse of class  BasicExplosionParams */
#ifndef TOLUA_DISABLE_tolua_get_BasicExplosionParams_fImpulse
static int tolua_get_BasicExplosionParams_fImpulse(lua_State* tolua_S)
{
  BasicExplosionParams* self = (BasicExplosionParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'fImpulse'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->fImpulse);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: fImpulse of class  BasicExplosionParams */
#ifndef TOLUA_DISABLE_tolua_set_BasicExplosionParams_fImpulse
static int tolua_set_BasicExplosionParams_fImpulse(lua_State* tolua_S)
{
  BasicExplosionParams* self = (BasicExplosionParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'fImpulse'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->fImpulse = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: bAttenuateByRange of class  BasicExplosionParams */
#ifndef TOLUA_DISABLE_tolua_get_BasicExplosionParams_bAttenuateByRange
static int tolua_get_BasicExplosionParams_bAttenuateByRange(lua_State* tolua_S)
{
  BasicExplosionParams* self = (BasicExplosionParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'bAttenuateByRange'",NULL);
#endif
  tolua_pushboolean(tolua_S,(bool)self->bAttenuateByRange);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: bAttenuateByRange of class  BasicExplosionParams */
#ifndef TOLUA_DISABLE_tolua_set_BasicExplosionParams_bAttenuateByRange
static int tolua_set_BasicExplosionParams_bAttenuateByRange(lua_State* tolua_S)
{
  BasicExplosionParams* self = (BasicExplosionParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'bAttenuateByRange'",NULL);
  if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->bAttenuateByRange = ((bool)  tolua_toboolean(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: nEventID of class  BasicExplosionParams */
#ifndef TOLUA_DISABLE_tolua_get_BasicExplosionParams_nEventID
static int tolua_get_BasicExplosionParams_nEventID(lua_State* tolua_S)
{
  BasicExplosionParams* self = (BasicExplosionParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'nEventID'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->nEventID);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: nEventID of class  BasicExplosionParams */
#ifndef TOLUA_DISABLE_tolua_set_BasicExplosionParams_nEventID
static int tolua_set_BasicExplosionParams_nEventID(lua_State* tolua_S)
{
  BasicExplosionParams* self = (BasicExplosionParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'nEventID'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->nEventID = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: origin of class  BasicExplosionParams */
#ifndef TOLUA_DISABLE_tolua_get_BasicExplosionParams_origin
static int tolua_get_BasicExplosionParams_origin(lua_State* tolua_S)
{
  BasicExplosionParams* self = (BasicExplosionParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'origin'",NULL);
#endif
   tolua_pushusertype(tolua_S,(void*)&self->origin,"irr::core::vector3d<float>");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: origin of class  BasicExplosionParams */
#ifndef TOLUA_DISABLE_tolua_set_BasicExplosionParams_origin
static int tolua_set_BasicExplosionParams_origin(lua_State* tolua_S)
{
  BasicExplosionParams* self = (BasicExplosionParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'origin'",NULL);
  if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::vector3d<float>",0,&tolua_err)))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->origin = *((irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  BasicExplosionEffectParams */
#ifndef TOLUA_DISABLE_tolua_NeoGame_BasicExplosionEffectParams_new00
static int tolua_NeoGame_BasicExplosionEffectParams_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"BasicExplosionEffectParams",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   BasicExplosionEffectParams* tolua_ret = (BasicExplosionEffectParams*)  Mtolua_new((BasicExplosionEffectParams)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"BasicExplosionEffectParams");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  BasicExplosionEffectParams */
#ifndef TOLUA_DISABLE_tolua_NeoGame_BasicExplosionEffectParams_new00_local
static int tolua_NeoGame_BasicExplosionEffectParams_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"BasicExplosionEffectParams",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   BasicExplosionEffectParams* tolua_ret = (BasicExplosionEffectParams*)  Mtolua_new((BasicExplosionEffectParams)());
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"BasicExplosionEffectParams");
    tolua_register_gc(tolua_S,lua_gettop(tolua_S));
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  BasicExplosionEffectParams */
#ifndef TOLUA_DISABLE_tolua_NeoGame_BasicExplosionEffectParams_delete00
static int tolua_NeoGame_BasicExplosionEffectParams_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"BasicExplosionEffectParams",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  BasicExplosionEffectParams* self = (BasicExplosionEffectParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
  Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: origin of class  BasicExplosionEffectParams */
#ifndef TOLUA_DISABLE_tolua_get_BasicExplosionEffectParams_origin
static int tolua_get_BasicExplosionEffectParams_origin(lua_State* tolua_S)
{
  BasicExplosionEffectParams* self = (BasicExplosionEffectParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'origin'",NULL);
#endif
   tolua_pushusertype(tolua_S,(void*)&self->origin,"irr::core::vector3d<float>");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: origin of class  BasicExplosionEffectParams */
#ifndef TOLUA_DISABLE_tolua_set_BasicExplosionEffectParams_origin
static int tolua_set_BasicExplosionEffectParams_origin(lua_State* tolua_S)
{
  BasicExplosionEffectParams* self = (BasicExplosionEffectParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'origin'",NULL);
  if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::vector3d<float>",0,&tolua_err)))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->origin = *((irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: rotation of class  BasicExplosionEffectParams */
#ifndef TOLUA_DISABLE_tolua_get_BasicExplosionEffectParams_rotation
static int tolua_get_BasicExplosionEffectParams_rotation(lua_State* tolua_S)
{
  BasicExplosionEffectParams* self = (BasicExplosionEffectParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'rotation'",NULL);
#endif
   tolua_pushusertype(tolua_S,(void*)&self->rotation,"irr::core::vector3d<float>");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: rotation of class  BasicExplosionEffectParams */
#ifndef TOLUA_DISABLE_tolua_set_BasicExplosionEffectParams_rotation
static int tolua_set_BasicExplosionEffectParams_rotation(lua_State* tolua_S)
{
  BasicExplosionEffectParams* self = (BasicExplosionEffectParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'rotation'",NULL);
  if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::core::vector3d<float>",0,&tolua_err)))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->rotation = *((irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: fRadius of class  BasicExplosionEffectParams */
#ifndef TOLUA_DISABLE_tolua_get_BasicExplosionEffectParams_fRadius
static int tolua_get_BasicExplosionEffectParams_fRadius(lua_State* tolua_S)
{
  BasicExplosionEffectParams* self = (BasicExplosionEffectParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'fRadius'",NULL);
#endif
  tolua_pushnumber(tolua_S,(lua_Number)self->fRadius);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: fRadius of class  BasicExplosionEffectParams */
#ifndef TOLUA_DISABLE_tolua_set_BasicExplosionEffectParams_fRadius
static int tolua_set_BasicExplosionEffectParams_fRadius(lua_State* tolua_S)
{
  BasicExplosionEffectParams* self = (BasicExplosionEffectParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'fRadius'",NULL);
  if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->fRadius = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: material_name_high_speed of class  BasicExplosionEffectParams */
#ifndef TOLUA_DISABLE_tolua_get_BasicExplosionEffectParams_material_name_high_speed
static int tolua_get_BasicExplosionEffectParams_material_name_high_speed(lua_State* tolua_S)
{
  BasicExplosionEffectParams* self = (BasicExplosionEffectParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'material_name_high_speed'",NULL);
#endif
  tolua_pushcppstring(tolua_S,(const char*)self->material_name_high_speed);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: material_name_high_speed of class  BasicExplosionEffectParams */
#ifndef TOLUA_DISABLE_tolua_set_BasicExplosionEffectParams_material_name_high_speed
static int tolua_set_BasicExplosionEffectParams_material_name_high_speed(lua_State* tolua_S)
{
  BasicExplosionEffectParams* self = (BasicExplosionEffectParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'material_name_high_speed'",NULL);
  if (!tolua_iscppstring(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->material_name_high_speed = ((std::string)  tolua_tocppstring(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: material_name_low_speed of class  BasicExplosionEffectParams */
#ifndef TOLUA_DISABLE_tolua_get_BasicExplosionEffectParams_material_name_low_speed
static int tolua_get_BasicExplosionEffectParams_material_name_low_speed(lua_State* tolua_S)
{
  BasicExplosionEffectParams* self = (BasicExplosionEffectParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'material_name_low_speed'",NULL);
#endif
  tolua_pushcppstring(tolua_S,(const char*)self->material_name_low_speed);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: material_name_low_speed of class  BasicExplosionEffectParams */
#ifndef TOLUA_DISABLE_tolua_set_BasicExplosionEffectParams_material_name_low_speed
static int tolua_set_BasicExplosionEffectParams_material_name_low_speed(lua_State* tolua_S)
{
  BasicExplosionEffectParams* self = (BasicExplosionEffectParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'material_name_low_speed'",NULL);
  if (!tolua_iscppstring(tolua_S,2,0,&tolua_err))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->material_name_low_speed = ((std::string)  tolua_tocppstring(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: start_color_high_speed of class  BasicExplosionEffectParams */
#ifndef TOLUA_DISABLE_tolua_get_BasicExplosionEffectParams_start_color_high_speed
static int tolua_get_BasicExplosionEffectParams_start_color_high_speed(lua_State* tolua_S)
{
  BasicExplosionEffectParams* self = (BasicExplosionEffectParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'start_color_high_speed'",NULL);
#endif
   tolua_pushusertype(tolua_S,(void*)&self->start_color_high_speed,"irr::video::SColor");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: start_color_high_speed of class  BasicExplosionEffectParams */
#ifndef TOLUA_DISABLE_tolua_set_BasicExplosionEffectParams_start_color_high_speed
static int tolua_set_BasicExplosionEffectParams_start_color_high_speed(lua_State* tolua_S)
{
  BasicExplosionEffectParams* self = (BasicExplosionEffectParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'start_color_high_speed'",NULL);
  if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::video::SColor",0,&tolua_err)))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->start_color_high_speed = *((irr::video::SColor*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: end_color_high_speed of class  BasicExplosionEffectParams */
#ifndef TOLUA_DISABLE_tolua_get_BasicExplosionEffectParams_end_color_high_speed
static int tolua_get_BasicExplosionEffectParams_end_color_high_speed(lua_State* tolua_S)
{
  BasicExplosionEffectParams* self = (BasicExplosionEffectParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'end_color_high_speed'",NULL);
#endif
   tolua_pushusertype(tolua_S,(void*)&self->end_color_high_speed,"irr::video::SColor");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: end_color_high_speed of class  BasicExplosionEffectParams */
#ifndef TOLUA_DISABLE_tolua_set_BasicExplosionEffectParams_end_color_high_speed
static int tolua_set_BasicExplosionEffectParams_end_color_high_speed(lua_State* tolua_S)
{
  BasicExplosionEffectParams* self = (BasicExplosionEffectParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'end_color_high_speed'",NULL);
  if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::video::SColor",0,&tolua_err)))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->end_color_high_speed = *((irr::video::SColor*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: start_color_low_speed of class  BasicExplosionEffectParams */
#ifndef TOLUA_DISABLE_tolua_get_BasicExplosionEffectParams_start_color_low_speed
static int tolua_get_BasicExplosionEffectParams_start_color_low_speed(lua_State* tolua_S)
{
  BasicExplosionEffectParams* self = (BasicExplosionEffectParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'start_color_low_speed'",NULL);
#endif
   tolua_pushusertype(tolua_S,(void*)&self->start_color_low_speed,"irr::video::SColor");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: start_color_low_speed of class  BasicExplosionEffectParams */
#ifndef TOLUA_DISABLE_tolua_set_BasicExplosionEffectParams_start_color_low_speed
static int tolua_set_BasicExplosionEffectParams_start_color_low_speed(lua_State* tolua_S)
{
  BasicExplosionEffectParams* self = (BasicExplosionEffectParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'start_color_low_speed'",NULL);
  if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::video::SColor",0,&tolua_err)))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->start_color_low_speed = *((irr::video::SColor*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: end_color_low_speed of class  BasicExplosionEffectParams */
#ifndef TOLUA_DISABLE_tolua_get_BasicExplosionEffectParams_end_color_low_speed
static int tolua_get_BasicExplosionEffectParams_end_color_low_speed(lua_State* tolua_S)
{
  BasicExplosionEffectParams* self = (BasicExplosionEffectParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'end_color_low_speed'",NULL);
#endif
   tolua_pushusertype(tolua_S,(void*)&self->end_color_low_speed,"irr::video::SColor");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: end_color_low_speed of class  BasicExplosionEffectParams */
#ifndef TOLUA_DISABLE_tolua_set_BasicExplosionEffectParams_end_color_low_speed
static int tolua_set_BasicExplosionEffectParams_end_color_low_speed(lua_State* tolua_S)
{
  BasicExplosionEffectParams* self = (BasicExplosionEffectParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'end_color_low_speed'",NULL);
  if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::video::SColor",0,&tolua_err)))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->end_color_low_speed = *((irr::video::SColor*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: shock_wave_color of class  BasicExplosionEffectParams */
#ifndef TOLUA_DISABLE_tolua_get_BasicExplosionEffectParams_shock_wave_color
static int tolua_get_BasicExplosionEffectParams_shock_wave_color(lua_State* tolua_S)
{
  BasicExplosionEffectParams* self = (BasicExplosionEffectParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shock_wave_color'",NULL);
#endif
   tolua_pushusertype(tolua_S,(void*)&self->shock_wave_color,"irr::video::SColor");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: shock_wave_color of class  BasicExplosionEffectParams */
#ifndef TOLUA_DISABLE_tolua_set_BasicExplosionEffectParams_shock_wave_color
static int tolua_set_BasicExplosionEffectParams_shock_wave_color(lua_State* tolua_S)
{
  BasicExplosionEffectParams* self = (BasicExplosionEffectParams*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  tolua_Error tolua_err;
  if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shock_wave_color'",NULL);
  if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"irr::video::SColor",0,&tolua_err)))
   tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->shock_wave_color = *((irr::video::SColor*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: getInstance of class  NeoEditor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoEditor_getInstance00
static int tolua_NeoGame_NeoEditor_getInstance00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"NeoEditor",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   NeoEditor* tolua_ret = (NeoEditor*)  NeoEditor::getInstance();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"NeoEditor");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getInstance'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: CreateFileOpenDialog of class  NeoEditor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoEditor_CreateFileOpenDialog00
static int tolua_NeoGame_NeoEditor_CreateFileOpenDialog00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoEditor",0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoEditor* self = (NeoEditor*)  tolua_tousertype(tolua_S,1,0);
  const std::string lua_callback = ((const std::string)  tolua_tocppstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'CreateFileOpenDialog'", NULL);
#endif
  {
   self->CreateFileOpenDialog(lua_callback);
   tolua_pushcppstring(tolua_S,(const char*)lua_callback);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'CreateFileOpenDialog'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ShowSelectionCursor of class  NeoEditor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoEditor_ShowSelectionCursor00
static int tolua_NeoGame_NeoEditor_ShowSelectionCursor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoEditor",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoEditor* self = (NeoEditor*)  tolua_tousertype(tolua_S,1,0);
  bool visible = ((bool)  tolua_toboolean(tolua_S,2,true));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ShowSelectionCursor'", NULL);
#endif
  {
   self->ShowSelectionCursor(visible);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ShowSelectionCursor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ShowSelectionCursor of class  NeoEditor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoEditor_ShowSelectionCursor01
static int tolua_NeoGame_NeoEditor_ShowSelectionCursor01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoEditor",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  NeoEditor* self = (NeoEditor*)  tolua_tousertype(tolua_S,1,0);
  bool visible = ((bool)  tolua_toboolean(tolua_S,2,0));
  const irr::core::vector3d<float>* position = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ShowSelectionCursor'", NULL);
#endif
  {
   self->ShowSelectionCursor(visible,*position);
  }
 }
 return 0;
tolua_lerror:
 return tolua_NeoGame_NeoEditor_ShowSelectionCursor00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: setSelectionCursorPosition of class  NeoEditor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoEditor_setSelectionCursorPosition00
static int tolua_NeoGame_NeoEditor_setSelectionCursorPosition00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoEditor",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const irr::core::vector3d<float>",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoEditor* self = (NeoEditor*)  tolua_tousertype(tolua_S,1,0);
  const irr::core::vector3d<float>* position = ((const irr::core::vector3d<float>*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setSelectionCursorPosition'", NULL);
#endif
  {
   self->setSelectionCursorPosition(*position);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setSelectionCursorPosition'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSelectionCursorPosition of class  NeoEditor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoEditor_getSelectionCursorPosition00
static int tolua_NeoGame_NeoEditor_getSelectionCursorPosition00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoEditor",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoEditor* self = (NeoEditor*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSelectionCursorPosition'", NULL);
#endif
  {
   const irr::core::vector3d<float>& tolua_ret = (const irr::core::vector3d<float>&)  self->getSelectionCursorPosition();
    tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const irr::core::vector3d<float>");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSelectionCursorPosition'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setSelectionCursorScale of class  NeoEditor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoEditor_setSelectionCursorScale00
static int tolua_NeoGame_NeoEditor_setSelectionCursorScale00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoEditor",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoEditor* self = (NeoEditor*)  tolua_tousertype(tolua_S,1,0);
  float scale = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setSelectionCursorScale'", NULL);
#endif
  {
   self->setSelectionCursorScale(scale);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setSelectionCursorScale'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSelectedSceneNode of class  NeoEditor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoEditor_getSelectedSceneNode00
static int tolua_NeoGame_NeoEditor_getSelectedSceneNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoEditor",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoEditor* self = (NeoEditor*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSelectedSceneNode'", NULL);
#endif
  {
   irr::scene::ISceneNode* tolua_ret = (irr::scene::ISceneNode*)  self->getSelectedSceneNode();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"irr::scene::ISceneNode");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSelectedSceneNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: isSelectionCursor of class  NeoEditor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoEditor_isSelectionCursor00
static int tolua_NeoGame_NeoEditor_isSelectionCursor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoEditor",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoEditor* self = (NeoEditor*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::ISceneNode* node = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'isSelectionCursor'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->isSelectionCursor(node);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'isSelectionCursor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getSelectedCursorIndex of class  NeoEditor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoEditor_getSelectedCursorIndex00
static int tolua_NeoGame_NeoEditor_getSelectedCursorIndex00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoEditor",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoEditor* self = (NeoEditor*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::ISceneNode* node = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getSelectedCursorIndex'", NULL);
#endif
  {
   int tolua_ret = (int)  self->getSelectedCursorIndex(node);
   tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getSelectedCursorIndex'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setSceneNodeTriangleSelector of class  NeoEditor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoEditor_setSceneNodeTriangleSelector00
static int tolua_NeoGame_NeoEditor_setSceneNodeTriangleSelector00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoEditor",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::ISceneNode",0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoEditor* self = (NeoEditor*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::ISceneNode* node = ((irr::scene::ISceneNode*)  tolua_tousertype(tolua_S,2,0));
  const std::string type = ((const std::string)  tolua_tocppstring(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setSceneNodeTriangleSelector'", NULL);
#endif
  {
   self->setSceneNodeTriangleSelector(node,type);
   tolua_pushcppstring(tolua_S,(const char*)type);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setSceneNodeTriangleSelector'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: setMeshNodeColor of class  NeoEditor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoEditor_setMeshNodeColor00
static int tolua_NeoGame_NeoEditor_setMeshNodeColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoEditor",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"irr::scene::IMeshSceneNode",0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"irr::video::SColor",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoEditor* self = (NeoEditor*)  tolua_tousertype(tolua_S,1,0);
  irr::scene::IMeshSceneNode* node = ((irr::scene::IMeshSceneNode*)  tolua_tousertype(tolua_S,2,0));
  irr::video::SColor* color = ((irr::video::SColor*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'setMeshNodeColor'", NULL);
#endif
  {
   self->setMeshNodeColor(node,*color);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'setMeshNodeColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getWorkingDirectory of class  NeoEditor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoEditor_getWorkingDirectory00
static int tolua_NeoGame_NeoEditor_getWorkingDirectory00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoEditor",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoEditor* self = (NeoEditor*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getWorkingDirectory'", NULL);
#endif
  {
   std::string tolua_ret = (std::string)  self->getWorkingDirectory();
   tolua_pushcppstring(tolua_S,(const char*)tolua_ret);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getWorkingDirectory'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: getRelativePath of class  NeoEditor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoEditor_getRelativePath00
static int tolua_NeoGame_NeoEditor_getRelativePath00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoEditor",0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,2,0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,3,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoEditor* self = (NeoEditor*)  tolua_tousertype(tolua_S,1,0);
  const std::string p = ((const std::string)  tolua_tocppstring(tolua_S,2,0));
  const std::string dir = ((const std::string)  tolua_tocppstring(tolua_S,3,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'getRelativePath'", NULL);
#endif
  {
   std::string tolua_ret = (std::string)  self->getRelativePath(p,dir);
   tolua_pushcppstring(tolua_S,(const char*)tolua_ret);
   tolua_pushcppstring(tolua_S,(const char*)p);
   tolua_pushcppstring(tolua_S,(const char*)dir);
  }
 }
 return 3;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'getRelativePath'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ChangeWorkingDirectory of class  NeoEditor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoEditor_ChangeWorkingDirectory00
static int tolua_NeoGame_NeoEditor_ChangeWorkingDirectory00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoEditor",0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoEditor* self = (NeoEditor*)  tolua_tousertype(tolua_S,1,0);
  const std::string dest = ((const std::string)  tolua_tocppstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ChangeWorkingDirectory'", NULL);
#endif
  {
   self->ChangeWorkingDirectory(dest);
   tolua_pushcppstring(tolua_S,(const char*)dest);
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ChangeWorkingDirectory'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsFileExists of class  NeoEditor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoEditor_IsFileExists00
static int tolua_NeoGame_NeoEditor_IsFileExists00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoEditor",0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoEditor* self = (NeoEditor*)  tolua_tousertype(tolua_S,1,0);
  const std::string dest = ((const std::string)  tolua_tocppstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsFileExists'", NULL);
#endif
  {
   bool tolua_ret = (bool)  self->IsFileExists(dest);
   tolua_pushboolean(tolua_S,(bool)tolua_ret);
   tolua_pushcppstring(tolua_S,(const char*)dest);
  }
 }
 return 2;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsFileExists'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Init of class  NeoEditor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoEditor_Init00
static int tolua_NeoGame_NeoEditor_Init00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoEditor",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoEditor* self = (NeoEditor*)  tolua_tousertype(tolua_S,1,0);
  bool resetEventhandler = ((bool)  tolua_toboolean(tolua_S,2,true));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Init'", NULL);
#endif
  {
   self->Init(resetEventhandler);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Init'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: CleanUp of class  NeoEditor */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoEditor_CleanUp00
static int tolua_NeoGame_NeoEditor_CleanUp00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoEditor",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,2,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoEditor* self = (NeoEditor*)  tolua_tousertype(tolua_S,1,0);
  bool resetEventhandler = ((bool)  tolua_toboolean(tolua_S,2,true));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'CleanUp'", NULL);
#endif
  {
   self->CleanUp(resetEventhandler);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'CleanUp'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetInstance of class  NeoScene */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoScene_GetInstance00
static int tolua_NeoGame_NeoScene_GetInstance00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"NeoScene",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   NeoScene* tolua_ret = (NeoScene*)  NeoScene::GetInstance();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"NeoScene");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetInstance'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Destroy of class  NeoScene */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoScene_Destroy00
static int tolua_NeoGame_NeoScene_Destroy00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertable(tolua_S,1,"NeoScene",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  {
   NeoScene::Destroy();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Destroy'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Clean of class  NeoScene */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoScene_Clean00
static int tolua_NeoGame_NeoScene_Clean00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoScene",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoScene* self = (NeoScene*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Clean'", NULL);
#endif
  {
   self->Clean();
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Clean'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: CreateGameObject of class  NeoScene */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoScene_CreateGameObject00
static int tolua_NeoGame_NeoScene_CreateGameObject00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoScene",0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoScene* self = (NeoScene*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'CreateGameObject'", NULL);
#endif
  {
   GameObject* tolua_ret = (GameObject*)  self->CreateGameObject();
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"GameObject");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'CreateGameObject'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetGameObject of class  NeoScene */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoScene_GetGameObject00
static int tolua_NeoGame_NeoScene_GetGameObject00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoScene",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoScene* self = (NeoScene*)  tolua_tousertype(tolua_S,1,0);
  int goId = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetGameObject'", NULL);
#endif
  {
   GameObject* tolua_ret = (GameObject*)  self->GetGameObject(goId);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"GameObject");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetGameObject'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: DestroyGameObject of class  NeoScene */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoScene_DestroyGameObject00
static int tolua_NeoGame_NeoScene_DestroyGameObject00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoScene",0,&tolua_err) ||
     !tolua_isusertype(tolua_S,2,"GameObject",0,&tolua_err) ||
     !tolua_isboolean(tolua_S,3,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoScene* self = (NeoScene*)  tolua_tousertype(tolua_S,1,0);
  GameObject* go = ((GameObject*)  tolua_tousertype(tolua_S,2,0));
  bool removeChild = ((bool)  tolua_toboolean(tolua_S,3,false));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'DestroyGameObject'", NULL);
#endif
  {
   self->DestroyGameObject(go,removeChild);
  }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'DestroyGameObject'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: DestroyGameObject of class  NeoScene */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoScene_DestroyGameObject01
static int tolua_NeoGame_NeoScene_DestroyGameObject01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoScene",0,&tolua_err) ||
     !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
     !tolua_isboolean(tolua_S,3,1,&tolua_err) ||
     !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
  goto tolua_lerror;
 else
 {
  NeoScene* self = (NeoScene*)  tolua_tousertype(tolua_S,1,0);
  int goId = ((int)  tolua_tonumber(tolua_S,2,0));
  bool removeChild = ((bool)  tolua_toboolean(tolua_S,3,false));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'DestroyGameObject'", NULL);
#endif
  {
   self->DestroyGameObject(goId,removeChild);
  }
 }
 return 0;
tolua_lerror:
 return tolua_NeoGame_NeoScene_DestroyGameObject00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: CreateExplosion of class  NeoScene */
#ifndef TOLUA_DISABLE_tolua_NeoGame_NeoScene_CreateExplosion00
static int tolua_NeoGame_NeoScene_CreateExplosion00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
     !tolua_isusertype(tolua_S,1,"NeoScene",0,&tolua_err) ||
     !tolua_iscppstring(tolua_S,2,0,&tolua_err) ||
     (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"NeoData",0,&tolua_err)) ||
     (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"NeoData",0,&tolua_err)) ||
     !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
  goto tolua_lerror;
 else
#endif
 {
  NeoScene* self = (NeoScene*)  tolua_tousertype(tolua_S,1,0);
  std::string explosion_type = ((std::string)  tolua_tocppstring(tolua_S,2,0));
  NeoData* visual_data = ((NeoData*)  tolua_tousertype(tolua_S,3,0));
  NeoData* physics_data = ((NeoData*)  tolua_tousertype(tolua_S,4,0));
#ifndef TOLUA_RELEASE
  if (!self) tolua_error(tolua_S,"invalid 'self' in function 'CreateExplosion'", NULL);
#endif
  {
   Explosion* tolua_ret = (Explosion*)  self->CreateExplosion(explosion_type,*visual_data,*physics_data);
    tolua_pushusertype(tolua_S,(void*)tolua_ret,"Explosion");
  }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'CreateExplosion'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* Open function */
TOLUA_API int tolua_NeoGame_open (lua_State* tolua_S)
{
 tolua_open(tolua_S);
 tolua_reg_types(tolua_S);
 tolua_module(tolua_S,NULL,0);
 tolua_beginmodule(tolua_S,NULL);
  tolua_cclass(tolua_S,"Application","Application","",NULL);
  tolua_beginmodule(tolua_S,"Application");
   tolua_function(tolua_S,"getInstance",tolua_NeoGame_Application_getInstance00);
   tolua_function(tolua_S,"isRunning",tolua_NeoGame_Application_isRunning00);
   tolua_function(tolua_S,"Quit",tolua_NeoGame_Application_Quit00);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"std",0);
  tolua_beginmodule(tolua_S,"std");
   #ifdef __cplusplus
   tolua_cclass(tolua_S,"vector_std__string_","std::vector<std::string>","",tolua_collect_std__vector_std__string_);
   #else
   tolua_cclass(tolua_S,"vector_std__string_","std::vector<std::string>","",NULL);
   #endif
   tolua_beginmodule(tolua_S,"vector_std__string_");
    tolua_function(tolua_S,"clear",tolua_NeoGame_std_vector_std__string__clear00);
    tolua_function(tolua_S,"size",tolua_NeoGame_std_vector_std__string__size00);
    tolua_function(tolua_S,".geti",tolua_NeoGame_std_vector_std__string___geti00);
    tolua_function(tolua_S,".seti",tolua_NeoGame_std_vector_std__string___seti00);
    tolua_function(tolua_S,".geti",tolua_NeoGame_std_vector_std__string___geti01);
    tolua_function(tolua_S,"push_back",tolua_NeoGame_std_vector_std__string__push_back00);
    tolua_function(tolua_S,"new",tolua_NeoGame_std_vector_std__string__new00);
    tolua_function(tolua_S,"new_local",tolua_NeoGame_std_vector_std__string__new00_local);
    tolua_function(tolua_S,".call",tolua_NeoGame_std_vector_std__string__new00_local);
    tolua_function(tolua_S,"delete",tolua_NeoGame_std_vector_std__string__delete00);
   tolua_endmodule(tolua_S);
   #ifdef __cplusplus
   tolua_cclass(tolua_S,"vector_int_","std::vector<int>","",tolua_collect_std__vector_int_);
   #else
   tolua_cclass(tolua_S,"vector_int_","std::vector<int>","",NULL);
   #endif
   tolua_beginmodule(tolua_S,"vector_int_");
    tolua_function(tolua_S,"clear",tolua_NeoGame_std_vector_int__clear00);
    tolua_function(tolua_S,"size",tolua_NeoGame_std_vector_int__size00);
    tolua_function(tolua_S,".geti",tolua_NeoGame_std_vector_int___geti00);
    tolua_function(tolua_S,".seti",tolua_NeoGame_std_vector_int___seti00);
    tolua_function(tolua_S,".geti",tolua_NeoGame_std_vector_int___geti01);
    tolua_function(tolua_S,"push_back",tolua_NeoGame_std_vector_int__push_back00);
    tolua_function(tolua_S,"new",tolua_NeoGame_std_vector_int__new00);
    tolua_function(tolua_S,"new_local",tolua_NeoGame_std_vector_int__new00_local);
    tolua_function(tolua_S,".call",tolua_NeoGame_std_vector_int__new00_local);
    tolua_function(tolua_S,"delete",tolua_NeoGame_std_vector_int__delete00);
   tolua_endmodule(tolua_S);
   #ifdef __cplusplus
   tolua_cclass(tolua_S,"vector_float_","std::vector<float>","",tolua_collect_std__vector_float_);
   #else
   tolua_cclass(tolua_S,"vector_float_","std::vector<float>","",NULL);
   #endif
   tolua_beginmodule(tolua_S,"vector_float_");
    tolua_function(tolua_S,"clear",tolua_NeoGame_std_vector_float__clear00);
    tolua_function(tolua_S,"size",tolua_NeoGame_std_vector_float__size00);
    tolua_function(tolua_S,".geti",tolua_NeoGame_std_vector_float___geti00);
    tolua_function(tolua_S,".seti",tolua_NeoGame_std_vector_float___seti00);
    tolua_function(tolua_S,".geti",tolua_NeoGame_std_vector_float___geti01);
    tolua_function(tolua_S,"push_back",tolua_NeoGame_std_vector_float__push_back00);
    tolua_function(tolua_S,"new",tolua_NeoGame_std_vector_float__new00);
    tolua_function(tolua_S,"new_local",tolua_NeoGame_std_vector_float__new00_local);
    tolua_function(tolua_S,".call",tolua_NeoGame_std_vector_float__new00_local);
    tolua_function(tolua_S,"delete",tolua_NeoGame_std_vector_float__delete00);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"LuaHelper","LuaHelper","",NULL);
  tolua_beginmodule(tolua_S,"LuaHelper");
   tolua_function(tolua_S,"BitAnd",tolua_NeoGame_LuaHelper_BitAnd00);
   tolua_function(tolua_S,"BitOr",tolua_NeoGame_LuaHelper_BitOr00);
   tolua_function(tolua_S,"BitXor",tolua_NeoGame_LuaHelper_BitXor00);
   tolua_function(tolua_S,"BitNot",tolua_NeoGame_LuaHelper_BitNot00);
   tolua_function(tolua_S,"BitLshift",tolua_NeoGame_LuaHelper_BitLshift00);
   tolua_function(tolua_S,"BitRshift",tolua_NeoGame_LuaHelper_BitRshift00);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_module(tolua_S,"core",0);
   tolua_beginmodule(tolua_S,"core");
    #ifdef __cplusplus
    tolua_cclass(tolua_S,"aabbox3di","irr::core::aabbox3d<int>","",tolua_collect_irr__core__aabbox3d_int_);
    #else
    tolua_cclass(tolua_S,"aabbox3di","irr::core::aabbox3d<int>","",NULL);
    #endif
    tolua_beginmodule(tolua_S,"aabbox3di");
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_aabbox3di_new00);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_aabbox3di_new00_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_aabbox3di_new00_local);
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_aabbox3di_new01);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_aabbox3di_new01_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_aabbox3di_new01_local);
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_aabbox3di_new02);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_aabbox3di_new02_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_aabbox3di_new02_local);
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_aabbox3di_new03);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_aabbox3di_new03_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_aabbox3di_new03_local);
     tolua_function(tolua_S,".eq",tolua_NeoGame_irr_core_aabbox3di__eq00);
     tolua_function(tolua_S,"reset",tolua_NeoGame_irr_core_aabbox3di_reset00);
     tolua_function(tolua_S,"reset",tolua_NeoGame_irr_core_aabbox3di_reset01);
     tolua_function(tolua_S,"reset",tolua_NeoGame_irr_core_aabbox3di_reset02);
     tolua_function(tolua_S,"addInternalPoint",tolua_NeoGame_irr_core_aabbox3di_addInternalPoint00);
     tolua_function(tolua_S,"addInternalBox",tolua_NeoGame_irr_core_aabbox3di_addInternalBox00);
     tolua_function(tolua_S,"addInternalPoint",tolua_NeoGame_irr_core_aabbox3di_addInternalPoint01);
     tolua_function(tolua_S,"getCenter",tolua_NeoGame_irr_core_aabbox3di_getCenter00);
     tolua_function(tolua_S,"getExtent",tolua_NeoGame_irr_core_aabbox3di_getExtent00);
     tolua_function(tolua_S,"isEmpty",tolua_NeoGame_irr_core_aabbox3di_isEmpty00);
     tolua_function(tolua_S,"getVolume",tolua_NeoGame_irr_core_aabbox3di_getVolume00);
     tolua_function(tolua_S,"getArea",tolua_NeoGame_irr_core_aabbox3di_getArea00);
     tolua_function(tolua_S,"getEdges",tolua_NeoGame_irr_core_aabbox3di_getEdges00);
     tolua_function(tolua_S,"repair",tolua_NeoGame_irr_core_aabbox3di_repair00);
     tolua_function(tolua_S,"getInterpolated",tolua_NeoGame_irr_core_aabbox3di_getInterpolated00);
     tolua_function(tolua_S,"isPointInside",tolua_NeoGame_irr_core_aabbox3di_isPointInside00);
     tolua_function(tolua_S,"isPointTotalInside",tolua_NeoGame_irr_core_aabbox3di_isPointTotalInside00);
     tolua_function(tolua_S,"isFullInside",tolua_NeoGame_irr_core_aabbox3di_isFullInside00);
     tolua_function(tolua_S,"intersectsWithBox",tolua_NeoGame_irr_core_aabbox3di_intersectsWithBox00);
     tolua_variable(tolua_S,"MinEdge",tolua_get_irr__core__aabbox3d_int__MinEdge,tolua_set_irr__core__aabbox3d_int__MinEdge);
     tolua_variable(tolua_S,"MaxEdge",tolua_get_irr__core__aabbox3d_int__MaxEdge,tolua_set_irr__core__aabbox3d_int__MaxEdge);
    tolua_endmodule(tolua_S);
    #ifdef __cplusplus
    tolua_cclass(tolua_S,"aabbox3df","irr::core::aabbox3d<float>","",tolua_collect_irr__core__aabbox3d_float_);
    #else
    tolua_cclass(tolua_S,"aabbox3df","irr::core::aabbox3d<float>","",NULL);
    #endif
    tolua_beginmodule(tolua_S,"aabbox3df");
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_aabbox3df_new00);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_aabbox3df_new00_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_aabbox3df_new00_local);
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_aabbox3df_new01);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_aabbox3df_new01_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_aabbox3df_new01_local);
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_aabbox3df_new02);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_aabbox3df_new02_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_aabbox3df_new02_local);
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_aabbox3df_new03);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_aabbox3df_new03_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_aabbox3df_new03_local);
     tolua_function(tolua_S,".eq",tolua_NeoGame_irr_core_aabbox3df__eq00);
     tolua_function(tolua_S,"reset",tolua_NeoGame_irr_core_aabbox3df_reset00);
     tolua_function(tolua_S,"reset",tolua_NeoGame_irr_core_aabbox3df_reset01);
     tolua_function(tolua_S,"reset",tolua_NeoGame_irr_core_aabbox3df_reset02);
     tolua_function(tolua_S,"addInternalPoint",tolua_NeoGame_irr_core_aabbox3df_addInternalPoint00);
     tolua_function(tolua_S,"addInternalBox",tolua_NeoGame_irr_core_aabbox3df_addInternalBox00);
     tolua_function(tolua_S,"addInternalPoint",tolua_NeoGame_irr_core_aabbox3df_addInternalPoint01);
     tolua_function(tolua_S,"getCenter",tolua_NeoGame_irr_core_aabbox3df_getCenter00);
     tolua_function(tolua_S,"getExtent",tolua_NeoGame_irr_core_aabbox3df_getExtent00);
     tolua_function(tolua_S,"isEmpty",tolua_NeoGame_irr_core_aabbox3df_isEmpty00);
     tolua_function(tolua_S,"getVolume",tolua_NeoGame_irr_core_aabbox3df_getVolume00);
     tolua_function(tolua_S,"getArea",tolua_NeoGame_irr_core_aabbox3df_getArea00);
     tolua_function(tolua_S,"getEdges",tolua_NeoGame_irr_core_aabbox3df_getEdges00);
     tolua_function(tolua_S,"repair",tolua_NeoGame_irr_core_aabbox3df_repair00);
     tolua_function(tolua_S,"getInterpolated",tolua_NeoGame_irr_core_aabbox3df_getInterpolated00);
     tolua_function(tolua_S,"isPointInside",tolua_NeoGame_irr_core_aabbox3df_isPointInside00);
     tolua_function(tolua_S,"isPointTotalInside",tolua_NeoGame_irr_core_aabbox3df_isPointTotalInside00);
     tolua_function(tolua_S,"isFullInside",tolua_NeoGame_irr_core_aabbox3df_isFullInside00);
     tolua_function(tolua_S,"intersectsWithBox",tolua_NeoGame_irr_core_aabbox3df_intersectsWithBox00);
     tolua_variable(tolua_S,"MinEdge",tolua_get_irr__core__aabbox3d_float__MinEdge,tolua_set_irr__core__aabbox3d_float__MinEdge);
     tolua_variable(tolua_S,"MaxEdge",tolua_get_irr__core__aabbox3d_float__MaxEdge,tolua_set_irr__core__aabbox3d_float__MaxEdge);
    tolua_endmodule(tolua_S);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_module(tolua_S,"core",0);
   tolua_beginmodule(tolua_S,"core");
    #ifdef __cplusplus
    tolua_cclass(tolua_S,"dimension2di","irr::core::dimension2d<int>","",tolua_collect_irr__core__dimension2d_int_);
    #else
    tolua_cclass(tolua_S,"dimension2di","irr::core::dimension2d<int>","",NULL);
    #endif
    tolua_beginmodule(tolua_S,"dimension2di");
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_dimension2di_new00);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_dimension2di_new00_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_dimension2di_new00_local);
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_dimension2di_new01);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_dimension2di_new01_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_dimension2di_new01_local);
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_dimension2di_new02);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_dimension2di_new02_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_dimension2di_new02_local);
     tolua_function(tolua_S,".eq",tolua_NeoGame_irr_core_dimension2di__eq00);
     tolua_function(tolua_S,".eq",tolua_NeoGame_irr_core_dimension2di__eq01);
     tolua_function(tolua_S,"set",tolua_NeoGame_irr_core_dimension2di_set00);
     tolua_function(tolua_S,".div",tolua_NeoGame_irr_core_dimension2di__div00);
     tolua_function(tolua_S,".mul",tolua_NeoGame_irr_core_dimension2di__mul00);
     tolua_function(tolua_S,".add",tolua_NeoGame_irr_core_dimension2di__add00);
     tolua_function(tolua_S,".sub",tolua_NeoGame_irr_core_dimension2di__sub00);
     tolua_function(tolua_S,"getArea",tolua_NeoGame_irr_core_dimension2di_getArea00);
     tolua_function(tolua_S,"getOptimalSize",tolua_NeoGame_irr_core_dimension2di_getOptimalSize00);
     tolua_function(tolua_S,"getInterpolated",tolua_NeoGame_irr_core_dimension2di_getInterpolated00);
     tolua_variable(tolua_S,"Width",tolua_get_irr__core__dimension2d_int__Width,tolua_set_irr__core__dimension2d_int__Width);
     tolua_variable(tolua_S,"Height",tolua_get_irr__core__dimension2d_int__Height,tolua_set_irr__core__dimension2d_int__Height);
    tolua_endmodule(tolua_S);
    #ifdef __cplusplus
    tolua_cclass(tolua_S,"dimension2df","irr::core::dimension2d<float>","",tolua_collect_irr__core__dimension2d_float_);
    #else
    tolua_cclass(tolua_S,"dimension2df","irr::core::dimension2d<float>","",NULL);
    #endif
    tolua_beginmodule(tolua_S,"dimension2df");
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_dimension2df_new00);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_dimension2df_new00_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_dimension2df_new00_local);
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_dimension2df_new01);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_dimension2df_new01_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_dimension2df_new01_local);
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_dimension2df_new02);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_dimension2df_new02_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_dimension2df_new02_local);
     tolua_function(tolua_S,".eq",tolua_NeoGame_irr_core_dimension2df__eq00);
     tolua_function(tolua_S,".eq",tolua_NeoGame_irr_core_dimension2df__eq01);
     tolua_function(tolua_S,"set",tolua_NeoGame_irr_core_dimension2df_set00);
     tolua_function(tolua_S,".div",tolua_NeoGame_irr_core_dimension2df__div00);
     tolua_function(tolua_S,".mul",tolua_NeoGame_irr_core_dimension2df__mul00);
     tolua_function(tolua_S,".add",tolua_NeoGame_irr_core_dimension2df__add00);
     tolua_function(tolua_S,".sub",tolua_NeoGame_irr_core_dimension2df__sub00);
     tolua_function(tolua_S,"getArea",tolua_NeoGame_irr_core_dimension2df_getArea00);
     tolua_function(tolua_S,"getOptimalSize",tolua_NeoGame_irr_core_dimension2df_getOptimalSize00);
     tolua_function(tolua_S,"getInterpolated",tolua_NeoGame_irr_core_dimension2df_getInterpolated00);
     tolua_variable(tolua_S,"Width",tolua_get_irr__core__dimension2d_float__Width,tolua_set_irr__core__dimension2d_float__Width);
     tolua_variable(tolua_S,"Height",tolua_get_irr__core__dimension2d_float__Height,tolua_set_irr__core__dimension2d_float__Height);
    tolua_endmodule(tolua_S);
    #ifdef __cplusplus
    tolua_cclass(tolua_S,"dimension2du","irr::core::dimension2d<unsigned>","",tolua_collect_irr__core__dimension2d_unsigned_);
    #else
    tolua_cclass(tolua_S,"dimension2du","irr::core::dimension2d<unsigned>","",NULL);
    #endif
    tolua_beginmodule(tolua_S,"dimension2du");
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_dimension2du_new00);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_dimension2du_new00_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_dimension2du_new00_local);
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_dimension2du_new01);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_dimension2du_new01_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_dimension2du_new01_local);
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_dimension2du_new02);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_dimension2du_new02_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_dimension2du_new02_local);
     tolua_function(tolua_S,".eq",tolua_NeoGame_irr_core_dimension2du__eq00);
     tolua_function(tolua_S,".eq",tolua_NeoGame_irr_core_dimension2du__eq01);
     tolua_function(tolua_S,"set",tolua_NeoGame_irr_core_dimension2du_set00);
     tolua_function(tolua_S,".div",tolua_NeoGame_irr_core_dimension2du__div00);
     tolua_function(tolua_S,".mul",tolua_NeoGame_irr_core_dimension2du__mul00);
     tolua_function(tolua_S,".add",tolua_NeoGame_irr_core_dimension2du__add00);
     tolua_function(tolua_S,".sub",tolua_NeoGame_irr_core_dimension2du__sub00);
     tolua_function(tolua_S,"getArea",tolua_NeoGame_irr_core_dimension2du_getArea00);
     tolua_function(tolua_S,"getOptimalSize",tolua_NeoGame_irr_core_dimension2du_getOptimalSize00);
     tolua_function(tolua_S,"getInterpolated",tolua_NeoGame_irr_core_dimension2du_getInterpolated00);
     tolua_variable(tolua_S,"Width",tolua_get_irr__core__dimension2d_unsigned__Width,tolua_set_irr__core__dimension2d_unsigned__Width);
     tolua_variable(tolua_S,"Height",tolua_get_irr__core__dimension2d_unsigned__Height,tolua_set_irr__core__dimension2d_unsigned__Height);
    tolua_endmodule(tolua_S);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_module(tolua_S,"video",0);
   tolua_beginmodule(tolua_S,"video");
    tolua_constant(tolua_S,"EMF_WIREFRAME",irr::video::EMF_WIREFRAME);
    tolua_constant(tolua_S,"EMF_POINTCLOUD",irr::video::EMF_POINTCLOUD);
    tolua_constant(tolua_S,"EMF_GOURAUD_SHADING",irr::video::EMF_GOURAUD_SHADING);
    tolua_constant(tolua_S,"EMF_LIGHTING",irr::video::EMF_LIGHTING);
    tolua_constant(tolua_S,"EMF_ZBUFFER",irr::video::EMF_ZBUFFER);
    tolua_constant(tolua_S,"EMF_ZWRITE_ENABLE",irr::video::EMF_ZWRITE_ENABLE);
    tolua_constant(tolua_S,"EMF_BACK_FACE_CULLING",irr::video::EMF_BACK_FACE_CULLING);
    tolua_constant(tolua_S,"EMF_FRONT_FACE_CULLING",irr::video::EMF_FRONT_FACE_CULLING);
    tolua_constant(tolua_S,"EMF_BILINEAR_FILTER",irr::video::EMF_BILINEAR_FILTER);
    tolua_constant(tolua_S,"EMF_TRILINEAR_FILTER",irr::video::EMF_TRILINEAR_FILTER);
    tolua_constant(tolua_S,"EMF_ANISOTROPIC_FILTER",irr::video::EMF_ANISOTROPIC_FILTER);
    tolua_constant(tolua_S,"EMF_FOG_ENABLE",irr::video::EMF_FOG_ENABLE);
    tolua_constant(tolua_S,"EMF_NORMALIZE_NORMALS",irr::video::EMF_NORMALIZE_NORMALS);
    tolua_constant(tolua_S,"EMF_TEXTURE_WRAP",irr::video::EMF_TEXTURE_WRAP);
    tolua_constant(tolua_S,"EMF_ANTI_ALIASING",irr::video::EMF_ANTI_ALIASING);
    tolua_constant(tolua_S,"EMF_COLOR_MASK",irr::video::EMF_COLOR_MASK);
    tolua_constant(tolua_S,"EMF_COLOR_MATERIAL",irr::video::EMF_COLOR_MATERIAL);
    tolua_constant(tolua_S,"EMF_USE_MIP_MAPS",irr::video::EMF_USE_MIP_MAPS);
    tolua_constant(tolua_S,"EMF_BLEND_OPERATION",irr::video::EMF_BLEND_OPERATION);
    tolua_constant(tolua_S,"EMF_POLYGON_OFFSET",irr::video::EMF_POLYGON_OFFSET);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_module(tolua_S,"video",0);
   tolua_beginmodule(tolua_S,"video");
    tolua_constant(tolua_S,"EMF_WIREFRAME",irr::video::EMF_WIREFRAME);
    tolua_constant(tolua_S,"EMF_POINTCLOUD",irr::video::EMF_POINTCLOUD);
    tolua_constant(tolua_S,"EMF_GOURAUD_SHADING",irr::video::EMF_GOURAUD_SHADING);
    tolua_constant(tolua_S,"EMF_LIGHTING",irr::video::EMF_LIGHTING);
    tolua_constant(tolua_S,"EMF_ZBUFFER",irr::video::EMF_ZBUFFER);
    tolua_constant(tolua_S,"EMF_ZWRITE_ENABLE",irr::video::EMF_ZWRITE_ENABLE);
    tolua_constant(tolua_S,"EMF_BACK_FACE_CULLING",irr::video::EMF_BACK_FACE_CULLING);
    tolua_constant(tolua_S,"EMF_FRONT_FACE_CULLING",irr::video::EMF_FRONT_FACE_CULLING);
    tolua_constant(tolua_S,"EMF_BILINEAR_FILTER",irr::video::EMF_BILINEAR_FILTER);
    tolua_constant(tolua_S,"EMF_TRILINEAR_FILTER",irr::video::EMF_TRILINEAR_FILTER);
    tolua_constant(tolua_S,"EMF_ANISOTROPIC_FILTER",irr::video::EMF_ANISOTROPIC_FILTER);
    tolua_constant(tolua_S,"EMF_FOG_ENABLE",irr::video::EMF_FOG_ENABLE);
    tolua_constant(tolua_S,"EMF_NORMALIZE_NORMALS",irr::video::EMF_NORMALIZE_NORMALS);
    tolua_constant(tolua_S,"EMF_TEXTURE_WRAP",irr::video::EMF_TEXTURE_WRAP);
    tolua_constant(tolua_S,"EMF_ANTI_ALIASING",irr::video::EMF_ANTI_ALIASING);
    tolua_constant(tolua_S,"EMF_COLOR_MASK",irr::video::EMF_COLOR_MASK);
    tolua_constant(tolua_S,"EMF_COLOR_MATERIAL",irr::video::EMF_COLOR_MATERIAL);
    tolua_constant(tolua_S,"EMF_USE_MIP_MAPS",irr::video::EMF_USE_MIP_MAPS);
    tolua_constant(tolua_S,"EMF_BLEND_OPERATION",irr::video::EMF_BLEND_OPERATION);
    tolua_constant(tolua_S,"EMF_POLYGON_OFFSET",irr::video::EMF_POLYGON_OFFSET);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_module(tolua_S,"video",0);
   tolua_beginmodule(tolua_S,"video");
    tolua_constant(tolua_S,"EMT_SOLID",irr::video::EMT_SOLID);
    tolua_constant(tolua_S,"EMT_SOLID_2_LAYER",irr::video::EMT_SOLID_2_LAYER);
    tolua_constant(tolua_S,"EMT_LIGHTMAP",irr::video::EMT_LIGHTMAP);
    tolua_constant(tolua_S,"EMT_LIGHTMAP_ADD",irr::video::EMT_LIGHTMAP_ADD);
    tolua_constant(tolua_S,"EMT_LIGHTMAP_M2",irr::video::EMT_LIGHTMAP_M2);
    tolua_constant(tolua_S,"EMT_LIGHTMAP_M4",irr::video::EMT_LIGHTMAP_M4);
    tolua_constant(tolua_S,"EMT_LIGHTMAP_LIGHTING",irr::video::EMT_LIGHTMAP_LIGHTING);
    tolua_constant(tolua_S,"EMT_LIGHTMAP_LIGHTING_M2",irr::video::EMT_LIGHTMAP_LIGHTING_M2);
    tolua_constant(tolua_S,"EMT_LIGHTMAP_LIGHTING_M4",irr::video::EMT_LIGHTMAP_LIGHTING_M4);
    tolua_constant(tolua_S,"EMT_DETAIL_MAP",irr::video::EMT_DETAIL_MAP);
    tolua_constant(tolua_S,"EMT_SPHERE_MAP",irr::video::EMT_SPHERE_MAP);
    tolua_constant(tolua_S,"EMT_REFLECTION_2_LAYER",irr::video::EMT_REFLECTION_2_LAYER);
    tolua_constant(tolua_S,"EMT_TRANSPARENT_ADD_COLOR",irr::video::EMT_TRANSPARENT_ADD_COLOR);
    tolua_constant(tolua_S,"EMT_TRANSPARENT_ALPHA_CHANNEL",irr::video::EMT_TRANSPARENT_ALPHA_CHANNEL);
    tolua_constant(tolua_S,"EMT_TRANSPARENT_ALPHA_CHANNEL_REF",irr::video::EMT_TRANSPARENT_ALPHA_CHANNEL_REF);
    tolua_constant(tolua_S,"EMT_TRANSPARENT_VERTEX_ALPHA",irr::video::EMT_TRANSPARENT_VERTEX_ALPHA);
    tolua_constant(tolua_S,"EMT_TRANSPARENT_REFLECTION_2_LAYER",irr::video::EMT_TRANSPARENT_REFLECTION_2_LAYER);
    tolua_constant(tolua_S,"EMT_NORMAL_MAP_SOLID",irr::video::EMT_NORMAL_MAP_SOLID);
    tolua_constant(tolua_S,"EMT_NORMAL_MAP_TRANSPARENT_ADD_COLOR",irr::video::EMT_NORMAL_MAP_TRANSPARENT_ADD_COLOR);
    tolua_constant(tolua_S,"EMT_NORMAL_MAP_TRANSPARENT_VERTEX_ALPHA",irr::video::EMT_NORMAL_MAP_TRANSPARENT_VERTEX_ALPHA);
    tolua_constant(tolua_S,"EMT_PARALLAX_MAP_SOLID",irr::video::EMT_PARALLAX_MAP_SOLID);
    tolua_constant(tolua_S,"EMT_PARALLAX_MAP_TRANSPARENT_ADD_COLOR",irr::video::EMT_PARALLAX_MAP_TRANSPARENT_ADD_COLOR);
    tolua_constant(tolua_S,"EMT_PARALLAX_MAP_TRANSPARENT_VERTEX_ALPHA",irr::video::EMT_PARALLAX_MAP_TRANSPARENT_VERTEX_ALPHA);
    tolua_constant(tolua_S,"EMT_ONETEXTURE_BLEND",irr::video::EMT_ONETEXTURE_BLEND);
    tolua_constant(tolua_S,"EMT_FORCE_32BIT",irr::video::EMT_FORCE_32BIT);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_module(tolua_S,"scene",0);
   tolua_beginmodule(tolua_S,"scene");
    tolua_constant(tolua_S,"ESNAT_FLY_CIRCLE",irr::scene::ESNAT_FLY_CIRCLE);
    tolua_constant(tolua_S,"ESNAT_FLY_STRAIGHT",irr::scene::ESNAT_FLY_STRAIGHT);
    tolua_constant(tolua_S,"ESNAT_FOLLOW_SPLINE",irr::scene::ESNAT_FOLLOW_SPLINE);
    tolua_constant(tolua_S,"ESNAT_ROTATION",irr::scene::ESNAT_ROTATION);
    tolua_constant(tolua_S,"ESNAT_TEXTURE",irr::scene::ESNAT_TEXTURE);
    tolua_constant(tolua_S,"ESNAT_DELETION",irr::scene::ESNAT_DELETION);
    tolua_constant(tolua_S,"ESNAT_COLLISION_RESPONSE",irr::scene::ESNAT_COLLISION_RESPONSE);
    tolua_constant(tolua_S,"ESNAT_CAMERA_FPS",irr::scene::ESNAT_CAMERA_FPS);
    tolua_constant(tolua_S,"ESNAT_CAMERA_MAYA",irr::scene::ESNAT_CAMERA_MAYA);
    tolua_constant(tolua_S,"ESNAT_COUNT",irr::scene::ESNAT_COUNT);
    tolua_constant(tolua_S,"ESNAT_UNKNOWN",irr::scene::ESNAT_UNKNOWN);
    tolua_constant(tolua_S,"ESNAT_FORCE_32_BIT",irr::scene::ESNAT_FORCE_32_BIT);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_module(tolua_S,"scene",0);
   tolua_beginmodule(tolua_S,"scene");
    tolua_constant(tolua_S,"ESNT_SCENE_MANAGER",irr::scene::ESNT_SCENE_MANAGER);
    tolua_constant(tolua_S,"ESNT_CUBE",irr::scene::ESNT_CUBE);
    tolua_constant(tolua_S,"ESNT_SPHERE",irr::scene::ESNT_SPHERE);
    tolua_constant(tolua_S,"ESNT_TEXT",irr::scene::ESNT_TEXT);
    tolua_constant(tolua_S,"ESNT_WATER_SURFACE",irr::scene::ESNT_WATER_SURFACE);
    tolua_constant(tolua_S,"ESNT_TERRAIN",irr::scene::ESNT_TERRAIN);
    tolua_constant(tolua_S,"ESNT_SKY_BOX",irr::scene::ESNT_SKY_BOX);
    tolua_constant(tolua_S,"ESNT_SKY_DOME",irr::scene::ESNT_SKY_DOME);
    tolua_constant(tolua_S,"ESNT_SHADOW_VOLUME",irr::scene::ESNT_SHADOW_VOLUME);
    tolua_constant(tolua_S,"ESNT_OCTREE",irr::scene::ESNT_OCTREE);
    tolua_constant(tolua_S,"ESNT_MESH",irr::scene::ESNT_MESH);
    tolua_constant(tolua_S,"ESNT_LIGHT",irr::scene::ESNT_LIGHT);
    tolua_constant(tolua_S,"ESNT_EMPTY",irr::scene::ESNT_EMPTY);
    tolua_constant(tolua_S,"ESNT_DUMMY_TRANSFORMATION",irr::scene::ESNT_DUMMY_TRANSFORMATION);
    tolua_constant(tolua_S,"ESNT_CAMERA",irr::scene::ESNT_CAMERA);
    tolua_constant(tolua_S,"ESNT_BILLBOARD",irr::scene::ESNT_BILLBOARD);
    tolua_constant(tolua_S,"ESNT_ANIMATED_MESH",irr::scene::ESNT_ANIMATED_MESH);
    tolua_constant(tolua_S,"ESNT_PARTICLE_SYSTEM",irr::scene::ESNT_PARTICLE_SYSTEM);
    tolua_constant(tolua_S,"ESNT_Q3SHADER_SCENE_NODE",irr::scene::ESNT_Q3SHADER_SCENE_NODE);
    tolua_constant(tolua_S,"ESNT_MD3_SCENE_NODE",irr::scene::ESNT_MD3_SCENE_NODE);
    tolua_constant(tolua_S,"ESNT_VOLUME_LIGHT",irr::scene::ESNT_VOLUME_LIGHT);
    tolua_constant(tolua_S,"ESNT_CAMERA_MAYA",irr::scene::ESNT_CAMERA_MAYA);
    tolua_constant(tolua_S,"ESNT_CAMERA_FPS",irr::scene::ESNT_CAMERA_FPS);
    tolua_constant(tolua_S,"ESNT_UNKNOWN",irr::scene::ESNT_UNKNOWN);
    tolua_constant(tolua_S,"ESNT_ANY",irr::scene::ESNT_ANY);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_module(tolua_S,"scene",0);
   tolua_beginmodule(tolua_S,"scene");
    tolua_constant(tolua_S,"EAMT_UNKNOWN",irr::scene::EAMT_UNKNOWN);
    tolua_constant(tolua_S,"EAMT_MD2",irr::scene::EAMT_MD2);
    tolua_constant(tolua_S,"EAMT_MD3",irr::scene::EAMT_MD3);
    tolua_constant(tolua_S,"EAMT_OBJ",irr::scene::EAMT_OBJ);
    tolua_constant(tolua_S,"EAMT_BSP",irr::scene::EAMT_BSP);
    tolua_constant(tolua_S,"EAMT_3DS",irr::scene::EAMT_3DS);
    tolua_constant(tolua_S,"EAMT_MY3D",irr::scene::EAMT_MY3D);
    tolua_constant(tolua_S,"EAMT_LMTS",irr::scene::EAMT_LMTS);
    tolua_constant(tolua_S,"EAMT_CSM",irr::scene::EAMT_CSM);
    tolua_constant(tolua_S,"EAMT_OCT",irr::scene::EAMT_OCT);
    tolua_constant(tolua_S,"EAMT_MDL_HALFLIFE",irr::scene::EAMT_MDL_HALFLIFE);
    tolua_constant(tolua_S,"EAMT_SKINNED",irr::scene::EAMT_SKINNED);
    tolua_cclass(tolua_S,"IAnimatedMesh","irr::scene::IAnimatedMesh","irr::scene::IMesh",NULL);
    tolua_beginmodule(tolua_S,"IAnimatedMesh");
     tolua_function(tolua_S,"getFrameCount",tolua_NeoGame_irr_scene_IAnimatedMesh_getFrameCount00);
     tolua_function(tolua_S,"getAnimationSpeed",tolua_NeoGame_irr_scene_IAnimatedMesh_getAnimationSpeed00);
     tolua_function(tolua_S,"setAnimationSpeed",tolua_NeoGame_irr_scene_IAnimatedMesh_setAnimationSpeed00);
     tolua_function(tolua_S,"getMesh",tolua_NeoGame_irr_scene_IAnimatedMesh_getMesh00);
     tolua_function(tolua_S,"getMeshType",tolua_NeoGame_irr_scene_IAnimatedMesh_getMeshType00);
    tolua_endmodule(tolua_S);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_module(tolua_S,"scene",0);
   tolua_beginmodule(tolua_S,"scene");
    tolua_constant(tolua_S,"EJUOR_NONE",irr::scene::EJUOR_NONE);
    tolua_constant(tolua_S,"EJUOR_READ",irr::scene::EJUOR_READ);
    tolua_constant(tolua_S,"EJUOR_CONTROL",irr::scene::EJUOR_CONTROL);
    tolua_cclass(tolua_S,"IAnimatedMeshSceneNode","irr::scene::IAnimatedMeshSceneNode","irr::scene::ISceneNode",NULL);
    tolua_beginmodule(tolua_S,"IAnimatedMeshSceneNode");
     tolua_function(tolua_S,"setCurrentFrame",tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_setCurrentFrame00);
     tolua_function(tolua_S,"setFrameLoop",tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_setFrameLoop00);
     tolua_function(tolua_S,"setAnimationSpeed",tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_setAnimationSpeed00);
     tolua_function(tolua_S,"getAnimationSpeed",tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_getAnimationSpeed00);
     tolua_function(tolua_S,"addShadowVolumeSceneNode",tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_addShadowVolumeSceneNode00);
     tolua_function(tolua_S,"getFrameNr",tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_getFrameNr00);
     tolua_function(tolua_S,"getStartFrame",tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_getStartFrame00);
     tolua_function(tolua_S,"getEndFrame",tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_getEndFrame00);
     tolua_function(tolua_S,"setLoopMode",tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_setLoopMode00);
     tolua_function(tolua_S,"getLoopMode",tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_getLoopMode00);
     tolua_function(tolua_S,"setReadOnlyMaterials",tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_setReadOnlyMaterials00);
     tolua_function(tolua_S,"isReadOnlyMaterials",tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_isReadOnlyMaterials00);
     tolua_function(tolua_S,"setMesh",tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_setMesh00);
     tolua_function(tolua_S,"getMesh",tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_getMesh00);
     tolua_function(tolua_S,"setJointMode",tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_setJointMode00);
     tolua_function(tolua_S,"setTransitionTime",tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_setTransitionTime00);
     tolua_function(tolua_S,"animateJoints",tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_animateJoints00);
     tolua_function(tolua_S,"setRenderFromIdentity",tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_setRenderFromIdentity00);
     tolua_function(tolua_S,"clone",tolua_NeoGame_irr_scene_IAnimatedMeshSceneNode_clone00);
    tolua_endmodule(tolua_S);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_module(tolua_S,"io",0);
   tolua_beginmodule(tolua_S,"io");
    tolua_cclass(tolua_S,"IAttributeExchangingObject","irr::io::IAttributeExchangingObject","irr::IReferenceCounted",NULL);
    tolua_beginmodule(tolua_S,"IAttributeExchangingObject");
    tolua_endmodule(tolua_S);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_module(tolua_S,"scene",0);
   tolua_beginmodule(tolua_S,"scene");
    tolua_cclass(tolua_S,"IBillboardSceneNode","irr::scene::IBillboardSceneNode","irr::scene::ISceneNode",NULL);
    tolua_beginmodule(tolua_S,"IBillboardSceneNode");
     tolua_function(tolua_S,"setSize",tolua_NeoGame_irr_scene_IBillboardSceneNode_setSize00);
     tolua_function(tolua_S,"setSize",tolua_NeoGame_irr_scene_IBillboardSceneNode_setSize01);
     tolua_function(tolua_S,"getSize",tolua_NeoGame_irr_scene_IBillboardSceneNode_getSize00);
     tolua_function(tolua_S,"getSize",tolua_NeoGame_irr_scene_IBillboardSceneNode_getSize01);
     tolua_function(tolua_S,"setColor",tolua_NeoGame_irr_scene_IBillboardSceneNode_setColor00);
     tolua_function(tolua_S,"setColor",tolua_NeoGame_irr_scene_IBillboardSceneNode_setColor01);
     tolua_function(tolua_S,"getColor",tolua_NeoGame_irr_scene_IBillboardSceneNode_getColor00);
    tolua_endmodule(tolua_S);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_module(tolua_S,"scene",0);
   tolua_beginmodule(tolua_S,"scene");
    tolua_cclass(tolua_S,"ICameraSceneNode","irr::scene::ICameraSceneNode","irr::scene::ISceneNode",NULL);
    tolua_beginmodule(tolua_S,"ICameraSceneNode");
     tolua_function(tolua_S,"setProjectionMatrix",tolua_NeoGame_irr_scene_ICameraSceneNode_setProjectionMatrix00);
     tolua_function(tolua_S,"getProjectionMatrix",tolua_NeoGame_irr_scene_ICameraSceneNode_getProjectionMatrix00);
     tolua_function(tolua_S,"getViewMatrix",tolua_NeoGame_irr_scene_ICameraSceneNode_getViewMatrix00);
     tolua_function(tolua_S,"setViewMatrixAffector",tolua_NeoGame_irr_scene_ICameraSceneNode_setViewMatrixAffector00);
     tolua_function(tolua_S,"getViewMatrixAffector",tolua_NeoGame_irr_scene_ICameraSceneNode_getViewMatrixAffector00);
     tolua_function(tolua_S,"setTarget",tolua_NeoGame_irr_scene_ICameraSceneNode_setTarget00);
     tolua_function(tolua_S,"setRotation",tolua_NeoGame_irr_scene_ICameraSceneNode_setRotation00);
     tolua_function(tolua_S,"getTarget",tolua_NeoGame_irr_scene_ICameraSceneNode_getTarget00);
     tolua_function(tolua_S,"setUpVector",tolua_NeoGame_irr_scene_ICameraSceneNode_setUpVector00);
     tolua_function(tolua_S,"getUpVector",tolua_NeoGame_irr_scene_ICameraSceneNode_getUpVector00);
     tolua_function(tolua_S,"getNearValue",tolua_NeoGame_irr_scene_ICameraSceneNode_getNearValue00);
     tolua_function(tolua_S,"getFarValue",tolua_NeoGame_irr_scene_ICameraSceneNode_getFarValue00);
     tolua_function(tolua_S,"getAspectRatio",tolua_NeoGame_irr_scene_ICameraSceneNode_getAspectRatio00);
     tolua_function(tolua_S,"getFOV",tolua_NeoGame_irr_scene_ICameraSceneNode_getFOV00);
     tolua_function(tolua_S,"setNearValue",tolua_NeoGame_irr_scene_ICameraSceneNode_setNearValue00);
     tolua_function(tolua_S,"setFarValue",tolua_NeoGame_irr_scene_ICameraSceneNode_setFarValue00);
     tolua_function(tolua_S,"setAspectRatio",tolua_NeoGame_irr_scene_ICameraSceneNode_setAspectRatio00);
     tolua_function(tolua_S,"setFOV",tolua_NeoGame_irr_scene_ICameraSceneNode_setFOV00);
     tolua_function(tolua_S,"setInputReceiverEnabled",tolua_NeoGame_irr_scene_ICameraSceneNode_setInputReceiverEnabled00);
     tolua_function(tolua_S,"isInputReceiverEnabled",tolua_NeoGame_irr_scene_ICameraSceneNode_isInputReceiverEnabled00);
     tolua_function(tolua_S,"isOrthogonal",tolua_NeoGame_irr_scene_ICameraSceneNode_isOrthogonal00);
     tolua_function(tolua_S,"bindTargetAndRotation",tolua_NeoGame_irr_scene_ICameraSceneNode_bindTargetAndRotation00);
     tolua_function(tolua_S,"getTargetAndRotationBinding",tolua_NeoGame_irr_scene_ICameraSceneNode_getTargetAndRotationBinding00);
    tolua_endmodule(tolua_S);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_module(tolua_S,"scene",0);
   tolua_beginmodule(tolua_S,"scene");
    tolua_cclass(tolua_S,"IDummyTransformationSceneNode","irr::scene::IDummyTransformationSceneNode","irr::scene::ISceneNode",NULL);
    tolua_beginmodule(tolua_S,"IDummyTransformationSceneNode");
     tolua_function(tolua_S,"getRelativeTransformationMatrix",tolua_NeoGame_irr_scene_IDummyTransformationSceneNode_getRelativeTransformationMatrix00);
    tolua_endmodule(tolua_S);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_module(tolua_S,"scene",0);
   tolua_beginmodule(tolua_S,"scene");
    tolua_cclass(tolua_S,"ILightSceneNode","irr::scene::ILightSceneNode","irr::scene::ISceneNode",NULL);
    tolua_beginmodule(tolua_S,"ILightSceneNode");
     tolua_function(tolua_S,"setLightData",tolua_NeoGame_irr_scene_ILightSceneNode_setLightData00);
     tolua_function(tolua_S,"getLightData",tolua_NeoGame_irr_scene_ILightSceneNode_getLightData00);
     tolua_function(tolua_S,"setVisible",tolua_NeoGame_irr_scene_ILightSceneNode_setVisible00);
     tolua_function(tolua_S,"setRadius",tolua_NeoGame_irr_scene_ILightSceneNode_setRadius00);
     tolua_function(tolua_S,"getRadius",tolua_NeoGame_irr_scene_ILightSceneNode_getRadius00);
     tolua_function(tolua_S,"setLightType",tolua_NeoGame_irr_scene_ILightSceneNode_setLightType00);
     tolua_function(tolua_S,"getLightType",tolua_NeoGame_irr_scene_ILightSceneNode_getLightType00);
     tolua_function(tolua_S,"enableCastShadow",tolua_NeoGame_irr_scene_ILightSceneNode_enableCastShadow00);
     tolua_function(tolua_S,"getCastShadow",tolua_NeoGame_irr_scene_ILightSceneNode_getCastShadow00);
    tolua_endmodule(tolua_S);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_module(tolua_S,"scene",0);
   tolua_beginmodule(tolua_S,"scene");
    tolua_cclass(tolua_S,"IMesh","irr::scene::IMesh","irr::IReferenceCounted",NULL);
    tolua_beginmodule(tolua_S,"IMesh");
     tolua_function(tolua_S,"getBoundingBox",tolua_NeoGame_irr_scene_IMesh_getBoundingBox00);
     tolua_function(tolua_S,"setBoundingBox",tolua_NeoGame_irr_scene_IMesh_setBoundingBox00);
     tolua_function(tolua_S,"setMaterialFlag",tolua_NeoGame_irr_scene_IMesh_setMaterialFlag00);
    tolua_endmodule(tolua_S);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_module(tolua_S,"scene",0);
   tolua_beginmodule(tolua_S,"scene");
    tolua_cclass(tolua_S,"IMeshSceneNode","irr::scene::IMeshSceneNode","irr::scene::ISceneNode",NULL);
    tolua_beginmodule(tolua_S,"IMeshSceneNode");
     tolua_function(tolua_S,"setMesh",tolua_NeoGame_irr_scene_IMeshSceneNode_setMesh00);
     tolua_function(tolua_S,"getMesh",tolua_NeoGame_irr_scene_IMeshSceneNode_getMesh00);
     tolua_function(tolua_S,"addShadowVolumeSceneNode",tolua_NeoGame_irr_scene_IMeshSceneNode_addShadowVolumeSceneNode00);
     tolua_function(tolua_S,"setReadOnlyMaterials",tolua_NeoGame_irr_scene_IMeshSceneNode_setReadOnlyMaterials00);
     tolua_function(tolua_S,"isReadOnlyMaterials",tolua_NeoGame_irr_scene_IMeshSceneNode_isReadOnlyMaterials00);
    tolua_endmodule(tolua_S);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_module(tolua_S,"scene",0);
   tolua_beginmodule(tolua_S,"scene");
    tolua_constant(tolua_S,"EPAT_NONE",irr::scene::EPAT_NONE);
    tolua_constant(tolua_S,"EPAT_ATTRACT",irr::scene::EPAT_ATTRACT);
    tolua_constant(tolua_S,"EPAT_FADE_OUT",irr::scene::EPAT_FADE_OUT);
    tolua_constant(tolua_S,"EPAT_GRAVITY",irr::scene::EPAT_GRAVITY);
    tolua_constant(tolua_S,"EPAT_ROTATE",irr::scene::EPAT_ROTATE);
    tolua_constant(tolua_S,"EPAT_SCALE",irr::scene::EPAT_SCALE);
    tolua_constant(tolua_S,"EPAT_COUNT",irr::scene::EPAT_COUNT);
    tolua_cclass(tolua_S,"IParticleAffector","irr::scene::IParticleAffector","irr::io::IAttributeExchangingObject",NULL);
    tolua_beginmodule(tolua_S,"IParticleAffector");
     tolua_function(tolua_S,"setEnabled",tolua_NeoGame_irr_scene_IParticleAffector_setEnabled00);
     tolua_function(tolua_S,"getEnabled",tolua_NeoGame_irr_scene_IParticleAffector_getEnabled00);
     tolua_function(tolua_S,"getType",tolua_NeoGame_irr_scene_IParticleAffector_getType00);
    tolua_endmodule(tolua_S);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_module(tolua_S,"scene",0);
   tolua_beginmodule(tolua_S,"scene");
    tolua_cclass(tolua_S,"IParticleAnimatedMeshSceneNodeEmitter","irr::scene::IParticleAnimatedMeshSceneNodeEmitter","irr::scene::IParticleEmitter",NULL);
    tolua_beginmodule(tolua_S,"IParticleAnimatedMeshSceneNodeEmitter");
     tolua_function(tolua_S,"setAnimatedMeshSceneNode",tolua_NeoGame_irr_scene_IParticleAnimatedMeshSceneNodeEmitter_setAnimatedMeshSceneNode00);
     tolua_function(tolua_S,"setUseNormalDirection",tolua_NeoGame_irr_scene_IParticleAnimatedMeshSceneNodeEmitter_setUseNormalDirection00);
     tolua_function(tolua_S,"setNormalDirectionModifier",tolua_NeoGame_irr_scene_IParticleAnimatedMeshSceneNodeEmitter_setNormalDirectionModifier00);
     tolua_function(tolua_S,"setEveryMeshVertex",tolua_NeoGame_irr_scene_IParticleAnimatedMeshSceneNodeEmitter_setEveryMeshVertex00);
     tolua_function(tolua_S,"getAnimatedMeshSceneNode",tolua_NeoGame_irr_scene_IParticleAnimatedMeshSceneNodeEmitter_getAnimatedMeshSceneNode00);
     tolua_function(tolua_S,"isUsingNormalDirection",tolua_NeoGame_irr_scene_IParticleAnimatedMeshSceneNodeEmitter_isUsingNormalDirection00);
     tolua_function(tolua_S,"getNormalDirectionModifier",tolua_NeoGame_irr_scene_IParticleAnimatedMeshSceneNodeEmitter_getNormalDirectionModifier00);
     tolua_function(tolua_S,"getEveryMeshVertex",tolua_NeoGame_irr_scene_IParticleAnimatedMeshSceneNodeEmitter_getEveryMeshVertex00);
     tolua_function(tolua_S,"getType",tolua_NeoGame_irr_scene_IParticleAnimatedMeshSceneNodeEmitter_getType00);
    tolua_endmodule(tolua_S);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_module(tolua_S,"scene",0);
   tolua_beginmodule(tolua_S,"scene");
    tolua_cclass(tolua_S,"IParticleAttractionAffector","irr::scene::IParticleAttractionAffector","irr::scene::IParticleAffector",NULL);
    tolua_beginmodule(tolua_S,"IParticleAttractionAffector");
     tolua_function(tolua_S,"setPoint",tolua_NeoGame_irr_scene_IParticleAttractionAffector_setPoint00);
     tolua_function(tolua_S,"setAttract",tolua_NeoGame_irr_scene_IParticleAttractionAffector_setAttract00);
     tolua_function(tolua_S,"setAffectX",tolua_NeoGame_irr_scene_IParticleAttractionAffector_setAffectX00);
     tolua_function(tolua_S,"setAffectY",tolua_NeoGame_irr_scene_IParticleAttractionAffector_setAffectY00);
     tolua_function(tolua_S,"setAffectZ",tolua_NeoGame_irr_scene_IParticleAttractionAffector_setAffectZ00);
     tolua_function(tolua_S,"getPoint",tolua_NeoGame_irr_scene_IParticleAttractionAffector_getPoint00);
     tolua_function(tolua_S,"getAttract",tolua_NeoGame_irr_scene_IParticleAttractionAffector_getAttract00);
     tolua_function(tolua_S,"getAffectX",tolua_NeoGame_irr_scene_IParticleAttractionAffector_getAffectX00);
     tolua_function(tolua_S,"getAffectY",tolua_NeoGame_irr_scene_IParticleAttractionAffector_getAffectY00);
     tolua_function(tolua_S,"getAffectZ",tolua_NeoGame_irr_scene_IParticleAttractionAffector_getAffectZ00);
     tolua_function(tolua_S,"getType",tolua_NeoGame_irr_scene_IParticleAttractionAffector_getType00);
    tolua_endmodule(tolua_S);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_module(tolua_S,"scene",0);
   tolua_beginmodule(tolua_S,"scene");
    tolua_cclass(tolua_S,"IParticleBoxEmitter","irr::scene::IParticleBoxEmitter","irr::scene::IParticleEmitter",NULL);
    tolua_beginmodule(tolua_S,"IParticleBoxEmitter");
     tolua_function(tolua_S,"setBox",tolua_NeoGame_irr_scene_IParticleBoxEmitter_setBox00);
     tolua_function(tolua_S,"getBox",tolua_NeoGame_irr_scene_IParticleBoxEmitter_getBox00);
     tolua_function(tolua_S,"getType",tolua_NeoGame_irr_scene_IParticleBoxEmitter_getType00);
    tolua_endmodule(tolua_S);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_module(tolua_S,"scene",0);
   tolua_beginmodule(tolua_S,"scene");
    tolua_cclass(tolua_S,"IParticleCylinderEmitter","irr::scene::IParticleCylinderEmitter","irr::scene::IParticleEmitter",NULL);
    tolua_beginmodule(tolua_S,"IParticleCylinderEmitter");
     tolua_function(tolua_S,"setCenter",tolua_NeoGame_irr_scene_IParticleCylinderEmitter_setCenter00);
     tolua_function(tolua_S,"setNormal",tolua_NeoGame_irr_scene_IParticleCylinderEmitter_setNormal00);
     tolua_function(tolua_S,"setRadius",tolua_NeoGame_irr_scene_IParticleCylinderEmitter_setRadius00);
     tolua_function(tolua_S,"setLength",tolua_NeoGame_irr_scene_IParticleCylinderEmitter_setLength00);
     tolua_function(tolua_S,"setOutlineOnly",tolua_NeoGame_irr_scene_IParticleCylinderEmitter_setOutlineOnly00);
     tolua_function(tolua_S,"getCenter",tolua_NeoGame_irr_scene_IParticleCylinderEmitter_getCenter00);
     tolua_function(tolua_S,"getNormal",tolua_NeoGame_irr_scene_IParticleCylinderEmitter_getNormal00);
     tolua_function(tolua_S,"getRadius",tolua_NeoGame_irr_scene_IParticleCylinderEmitter_getRadius00);
     tolua_function(tolua_S,"getLength",tolua_NeoGame_irr_scene_IParticleCylinderEmitter_getLength00);
     tolua_function(tolua_S,"getOutlineOnly",tolua_NeoGame_irr_scene_IParticleCylinderEmitter_getOutlineOnly00);
     tolua_function(tolua_S,"getType",tolua_NeoGame_irr_scene_IParticleCylinderEmitter_getType00);
    tolua_endmodule(tolua_S);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_module(tolua_S,"scene",0);
   tolua_beginmodule(tolua_S,"scene");
    tolua_constant(tolua_S,"EPET_POINT",irr::scene::EPET_POINT);
    tolua_constant(tolua_S,"EPET_ANIMATED_MESH",irr::scene::EPET_ANIMATED_MESH);
    tolua_constant(tolua_S,"EPET_BOX",irr::scene::EPET_BOX);
    tolua_constant(tolua_S,"EPET_CYLINDER",irr::scene::EPET_CYLINDER);
    tolua_constant(tolua_S,"EPET_MESH",irr::scene::EPET_MESH);
    tolua_constant(tolua_S,"EPET_RING",irr::scene::EPET_RING);
    tolua_constant(tolua_S,"EPET_SPHERE",irr::scene::EPET_SPHERE);
    tolua_constant(tolua_S,"EPET_COUNT",irr::scene::EPET_COUNT);
    tolua_cclass(tolua_S,"IParticleEmitter","irr::scene::IParticleEmitter","irr::io::IAttributeExchangingObject",NULL);
    tolua_beginmodule(tolua_S,"IParticleEmitter");
     tolua_function(tolua_S,"setDirection",tolua_NeoGame_irr_scene_IParticleEmitter_setDirection00);
     tolua_function(tolua_S,"setMinParticlesPerSecond",tolua_NeoGame_irr_scene_IParticleEmitter_setMinParticlesPerSecond00);
     tolua_function(tolua_S,"setMaxParticlesPerSecond",tolua_NeoGame_irr_scene_IParticleEmitter_setMaxParticlesPerSecond00);
     tolua_function(tolua_S,"setMinStartColor",tolua_NeoGame_irr_scene_IParticleEmitter_setMinStartColor00);
     tolua_function(tolua_S,"setMaxStartColor",tolua_NeoGame_irr_scene_IParticleEmitter_setMaxStartColor00);
     tolua_function(tolua_S,"setMaxStartSize",tolua_NeoGame_irr_scene_IParticleEmitter_setMaxStartSize00);
     tolua_function(tolua_S,"setMinStartSize",tolua_NeoGame_irr_scene_IParticleEmitter_setMinStartSize00);
     tolua_function(tolua_S,"setMinLifeTime",tolua_NeoGame_irr_scene_IParticleEmitter_setMinLifeTime00);
     tolua_function(tolua_S,"setMaxLifeTime",tolua_NeoGame_irr_scene_IParticleEmitter_setMaxLifeTime00);
     tolua_function(tolua_S,"setMaxAngleDegrees",tolua_NeoGame_irr_scene_IParticleEmitter_setMaxAngleDegrees00);
     tolua_function(tolua_S,"getDirection",tolua_NeoGame_irr_scene_IParticleEmitter_getDirection00);
     tolua_function(tolua_S,"getMinParticlesPerSecond",tolua_NeoGame_irr_scene_IParticleEmitter_getMinParticlesPerSecond00);
     tolua_function(tolua_S,"getMaxParticlesPerSecond",tolua_NeoGame_irr_scene_IParticleEmitter_getMaxParticlesPerSecond00);
     tolua_function(tolua_S,"getMinStartColor",tolua_NeoGame_irr_scene_IParticleEmitter_getMinStartColor00);
     tolua_function(tolua_S,"getMaxStartColor",tolua_NeoGame_irr_scene_IParticleEmitter_getMaxStartColor00);
     tolua_function(tolua_S,"getMaxStartSize",tolua_NeoGame_irr_scene_IParticleEmitter_getMaxStartSize00);
     tolua_function(tolua_S,"getMinStartSize",tolua_NeoGame_irr_scene_IParticleEmitter_getMinStartSize00);
     tolua_function(tolua_S,"getMinLifeTime",tolua_NeoGame_irr_scene_IParticleEmitter_getMinLifeTime00);
     tolua_function(tolua_S,"getMaxLifeTime",tolua_NeoGame_irr_scene_IParticleEmitter_getMaxLifeTime00);
     tolua_function(tolua_S,"getMaxAngleDegrees",tolua_NeoGame_irr_scene_IParticleEmitter_getMaxAngleDegrees00);
     tolua_function(tolua_S,"getType",tolua_NeoGame_irr_scene_IParticleEmitter_getType00);
    tolua_endmodule(tolua_S);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_module(tolua_S,"scene",0);
   tolua_beginmodule(tolua_S,"scene");
    tolua_cclass(tolua_S,"IParticleFadeOutAffector","irr::scene::IParticleFadeOutAffector","irr::scene::IParticleAffector",NULL);
    tolua_beginmodule(tolua_S,"IParticleFadeOutAffector");
     tolua_function(tolua_S,"setTargetColor",tolua_NeoGame_irr_scene_IParticleFadeOutAffector_setTargetColor00);
     tolua_function(tolua_S,"setFadeOutTime",tolua_NeoGame_irr_scene_IParticleFadeOutAffector_setFadeOutTime00);
     tolua_function(tolua_S,"getTargetColor",tolua_NeoGame_irr_scene_IParticleFadeOutAffector_getTargetColor00);
     tolua_function(tolua_S,"getFadeOutTime",tolua_NeoGame_irr_scene_IParticleFadeOutAffector_getFadeOutTime00);
     tolua_function(tolua_S,"getType",tolua_NeoGame_irr_scene_IParticleFadeOutAffector_getType00);
    tolua_endmodule(tolua_S);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_module(tolua_S,"scene",0);
   tolua_beginmodule(tolua_S,"scene");
    tolua_cclass(tolua_S,"IParticleGravityAffector","irr::scene::IParticleGravityAffector","irr::scene::IParticleAffector",NULL);
    tolua_beginmodule(tolua_S,"IParticleGravityAffector");
     tolua_function(tolua_S,"setTimeForceLost",tolua_NeoGame_irr_scene_IParticleGravityAffector_setTimeForceLost00);
     tolua_function(tolua_S,"setGravity",tolua_NeoGame_irr_scene_IParticleGravityAffector_setGravity00);
     tolua_function(tolua_S,"getTimeForceLost",tolua_NeoGame_irr_scene_IParticleGravityAffector_getTimeForceLost00);
     tolua_function(tolua_S,"getGravity",tolua_NeoGame_irr_scene_IParticleGravityAffector_getGravity00);
     tolua_function(tolua_S,"getType",tolua_NeoGame_irr_scene_IParticleGravityAffector_getType00);
    tolua_endmodule(tolua_S);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_module(tolua_S,"scene",0);
   tolua_beginmodule(tolua_S,"scene");
    tolua_cclass(tolua_S,"IParticleMeshEmitter","irr::scene::IParticleMeshEmitter","irr::scene::IParticleEmitter",NULL);
    tolua_beginmodule(tolua_S,"IParticleMeshEmitter");
     tolua_function(tolua_S,"setMesh",tolua_NeoGame_irr_scene_IParticleMeshEmitter_setMesh00);
     tolua_function(tolua_S,"setUseNormalDirection",tolua_NeoGame_irr_scene_IParticleMeshEmitter_setUseNormalDirection00);
     tolua_function(tolua_S,"setNormalDirectionModifier",tolua_NeoGame_irr_scene_IParticleMeshEmitter_setNormalDirectionModifier00);
     tolua_function(tolua_S,"setEveryMeshVertex",tolua_NeoGame_irr_scene_IParticleMeshEmitter_setEveryMeshVertex00);
     tolua_function(tolua_S,"getMesh",tolua_NeoGame_irr_scene_IParticleMeshEmitter_getMesh00);
     tolua_function(tolua_S,"isUsingNormalDirection",tolua_NeoGame_irr_scene_IParticleMeshEmitter_isUsingNormalDirection00);
     tolua_function(tolua_S,"getNormalDirectionModifier",tolua_NeoGame_irr_scene_IParticleMeshEmitter_getNormalDirectionModifier00);
     tolua_function(tolua_S,"getEveryMeshVertex",tolua_NeoGame_irr_scene_IParticleMeshEmitter_getEveryMeshVertex00);
     tolua_function(tolua_S,"getType",tolua_NeoGame_irr_scene_IParticleMeshEmitter_getType00);
    tolua_endmodule(tolua_S);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_module(tolua_S,"scene",0);
   tolua_beginmodule(tolua_S,"scene");
    tolua_cclass(tolua_S,"IParticleRingEmitter","irr::scene::IParticleRingEmitter","irr::scene::IParticleEmitter",NULL);
    tolua_beginmodule(tolua_S,"IParticleRingEmitter");
     tolua_function(tolua_S,"setCenter",tolua_NeoGame_irr_scene_IParticleRingEmitter_setCenter00);
     tolua_function(tolua_S,"setRadius",tolua_NeoGame_irr_scene_IParticleRingEmitter_setRadius00);
     tolua_function(tolua_S,"setRingThickness",tolua_NeoGame_irr_scene_IParticleRingEmitter_setRingThickness00);
     tolua_function(tolua_S,"getCenter",tolua_NeoGame_irr_scene_IParticleRingEmitter_getCenter00);
     tolua_function(tolua_S,"getRadius",tolua_NeoGame_irr_scene_IParticleRingEmitter_getRadius00);
     tolua_function(tolua_S,"getRingThickness",tolua_NeoGame_irr_scene_IParticleRingEmitter_getRingThickness00);
     tolua_function(tolua_S,"getType",tolua_NeoGame_irr_scene_IParticleRingEmitter_getType00);
    tolua_endmodule(tolua_S);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_module(tolua_S,"scene",0);
   tolua_beginmodule(tolua_S,"scene");
    tolua_cclass(tolua_S,"IParticleRotationAffector","irr::scene::IParticleRotationAffector","irr::scene::IParticleAffector",NULL);
    tolua_beginmodule(tolua_S,"IParticleRotationAffector");
     tolua_function(tolua_S,"setPivotPoint",tolua_NeoGame_irr_scene_IParticleRotationAffector_setPivotPoint00);
     tolua_function(tolua_S,"setSpeed",tolua_NeoGame_irr_scene_IParticleRotationAffector_setSpeed00);
     tolua_function(tolua_S,"getPivotPoint",tolua_NeoGame_irr_scene_IParticleRotationAffector_getPivotPoint00);
     tolua_function(tolua_S,"getSpeed",tolua_NeoGame_irr_scene_IParticleRotationAffector_getSpeed00);
     tolua_function(tolua_S,"getType",tolua_NeoGame_irr_scene_IParticleRotationAffector_getType00);
    tolua_endmodule(tolua_S);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_module(tolua_S,"scene",0);
   tolua_beginmodule(tolua_S,"scene");
    tolua_cclass(tolua_S,"IParticleSphereEmitter","irr::scene::IParticleSphereEmitter","irr::scene::IParticleEmitter",NULL);
    tolua_beginmodule(tolua_S,"IParticleSphereEmitter");
     tolua_function(tolua_S,"setCenter",tolua_NeoGame_irr_scene_IParticleSphereEmitter_setCenter00);
     tolua_function(tolua_S,"setRadius",tolua_NeoGame_irr_scene_IParticleSphereEmitter_setRadius00);
     tolua_function(tolua_S,"getCenter",tolua_NeoGame_irr_scene_IParticleSphereEmitter_getCenter00);
     tolua_function(tolua_S,"getRadius",tolua_NeoGame_irr_scene_IParticleSphereEmitter_getRadius00);
     tolua_function(tolua_S,"getType",tolua_NeoGame_irr_scene_IParticleSphereEmitter_getType00);
    tolua_endmodule(tolua_S);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_module(tolua_S,"scene",0);
   tolua_beginmodule(tolua_S,"scene");
    tolua_cclass(tolua_S,"IParticleSystemSceneNode","irr::scene::IParticleSystemSceneNode","irr::scene::ISceneNode",NULL);
    tolua_beginmodule(tolua_S,"IParticleSystemSceneNode");
     tolua_function(tolua_S,"setParticleSize",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_setParticleSize00);
     tolua_function(tolua_S,"setParticleSize",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_setParticleSize01);
     tolua_function(tolua_S,"setParticlesAreGlobal",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_setParticlesAreGlobal00);
     tolua_function(tolua_S,"clearParticles",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_clearParticles00);
     tolua_function(tolua_S,"getEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_getEmitter00);
     tolua_function(tolua_S,"setEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_setEmitter00);
     tolua_function(tolua_S,"addAffector",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_addAffector00);
     tolua_function(tolua_S,"removeAllAffectors",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_removeAllAffectors00);
     tolua_function(tolua_S,"createAnimatedMeshSceneNodeEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter00);
     tolua_function(tolua_S,"createAnimatedMeshSceneNodeEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter01);
     tolua_function(tolua_S,"createAnimatedMeshSceneNodeEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter02);
     tolua_function(tolua_S,"createAnimatedMeshSceneNodeEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter03);
     tolua_function(tolua_S,"createAnimatedMeshSceneNodeEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter04);
     tolua_function(tolua_S,"createAnimatedMeshSceneNodeEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter05);
     tolua_function(tolua_S,"createBoxEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createBoxEmitter00);
     tolua_function(tolua_S,"createBoxEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createBoxEmitter01);
     tolua_function(tolua_S,"createBoxEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createBoxEmitter02);
     tolua_function(tolua_S,"createBoxEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createBoxEmitter03);
     tolua_function(tolua_S,"createBoxEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createBoxEmitter04);
     tolua_function(tolua_S,"createBoxEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createBoxEmitter05);
     tolua_function(tolua_S,"createBoxEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createBoxEmitter06);
     tolua_function(tolua_S,"createCylinderEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createCylinderEmitter00);
     tolua_function(tolua_S,"createCylinderEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createCylinderEmitter01);
     tolua_function(tolua_S,"createCylinderEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createCylinderEmitter02);
     tolua_function(tolua_S,"createCylinderEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createCylinderEmitter03);
     tolua_function(tolua_S,"createCylinderEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createCylinderEmitter04);
     tolua_function(tolua_S,"createCylinderEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createCylinderEmitter05);
     tolua_function(tolua_S,"createMeshEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createMeshEmitter00);
     tolua_function(tolua_S,"createMeshEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createMeshEmitter01);
     tolua_function(tolua_S,"createMeshEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createMeshEmitter02);
     tolua_function(tolua_S,"createMeshEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createMeshEmitter03);
     tolua_function(tolua_S,"createMeshEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createMeshEmitter04);
     tolua_function(tolua_S,"createMeshEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createMeshEmitter05);
     tolua_function(tolua_S,"createPointEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createPointEmitter00);
     tolua_function(tolua_S,"createPointEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createPointEmitter01);
     tolua_function(tolua_S,"createPointEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createPointEmitter02);
     tolua_function(tolua_S,"createPointEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createPointEmitter03);
     tolua_function(tolua_S,"createPointEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createPointEmitter04);
     tolua_function(tolua_S,"createPointEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createPointEmitter05);
     tolua_function(tolua_S,"createRingEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createRingEmitter00);
     tolua_function(tolua_S,"createRingEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createRingEmitter01);
     tolua_function(tolua_S,"createRingEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createRingEmitter02);
     tolua_function(tolua_S,"createRingEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createRingEmitter03);
     tolua_function(tolua_S,"createRingEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createRingEmitter04);
     tolua_function(tolua_S,"createRingEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createRingEmitter05);
     tolua_function(tolua_S,"createSphereEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createSphereEmitter00);
     tolua_function(tolua_S,"createSphereEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createSphereEmitter01);
     tolua_function(tolua_S,"createSphereEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createSphereEmitter02);
     tolua_function(tolua_S,"createSphereEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createSphereEmitter03);
     tolua_function(tolua_S,"createSphereEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createSphereEmitter04);
     tolua_function(tolua_S,"createSphereEmitter",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createSphereEmitter05);
     tolua_function(tolua_S,"createAttractionAffector",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createAttractionAffector00);
     tolua_function(tolua_S,"createScaleParticleAffector",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createScaleParticleAffector00);
     tolua_function(tolua_S,"createScaleParticleAffector",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createScaleParticleAffector01);
     tolua_function(tolua_S,"createFadeOutParticleAffector",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createFadeOutParticleAffector00);
     tolua_function(tolua_S,"createFadeOutParticleAffector",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createFadeOutParticleAffector01);
     tolua_function(tolua_S,"createGravityAffector",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createGravityAffector00);
     tolua_function(tolua_S,"createGravityAffector",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createGravityAffector01);
     tolua_function(tolua_S,"createRotationAffector",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createRotationAffector00);
     tolua_function(tolua_S,"createRotationAffector",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createRotationAffector01);
     tolua_function(tolua_S,"createRotationAffector",tolua_NeoGame_irr_scene_IParticleSystemSceneNode_createRotationAffector02);
    tolua_endmodule(tolua_S);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_cclass(tolua_S,"IReferenceCounted","irr::IReferenceCounted","",NULL);
   tolua_beginmodule(tolua_S,"IReferenceCounted");
    tolua_function(tolua_S,"grab",tolua_NeoGame_irr_IReferenceCounted_grab00);
    tolua_function(tolua_S,"drop",tolua_NeoGame_irr_IReferenceCounted_drop00);
    tolua_function(tolua_S,"getReferenceCount",tolua_NeoGame_irr_IReferenceCounted_getReferenceCount00);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_module(tolua_S,"scene",0);
   tolua_beginmodule(tolua_S,"scene");
    tolua_cclass(tolua_S,"ISceneNode","irr::scene::ISceneNode","",NULL);
    tolua_beginmodule(tolua_S,"ISceneNode");
     tolua_function(tolua_S,"render",tolua_NeoGame_irr_scene_ISceneNode_render00);
     tolua_function(tolua_S,"getName",tolua_NeoGame_irr_scene_ISceneNode_getName00);
     tolua_function(tolua_S,"setName",tolua_NeoGame_irr_scene_ISceneNode_setName00);
     tolua_function(tolua_S,"getBoundingBox",tolua_NeoGame_irr_scene_ISceneNode_getBoundingBox00);
     tolua_function(tolua_S,"getTransformedBoundingBox",tolua_NeoGame_irr_scene_ISceneNode_getTransformedBoundingBox00);
     tolua_function(tolua_S,"getAbsoluteTransformation",tolua_NeoGame_irr_scene_ISceneNode_getAbsoluteTransformation00);
     tolua_function(tolua_S,"getRelativeTransformation",tolua_NeoGame_irr_scene_ISceneNode_getRelativeTransformation00);
     tolua_function(tolua_S,"isVisible",tolua_NeoGame_irr_scene_ISceneNode_isVisible00);
     tolua_function(tolua_S,"isTrulyVisible",tolua_NeoGame_irr_scene_ISceneNode_isTrulyVisible00);
     tolua_function(tolua_S,"setVisible",tolua_NeoGame_irr_scene_ISceneNode_setVisible00);
     tolua_function(tolua_S,"getID",tolua_NeoGame_irr_scene_ISceneNode_getID00);
     tolua_function(tolua_S,"setID",tolua_NeoGame_irr_scene_ISceneNode_setID00);
     tolua_function(tolua_S,"addChild",tolua_NeoGame_irr_scene_ISceneNode_addChild00);
     tolua_function(tolua_S,"removeChild",tolua_NeoGame_irr_scene_ISceneNode_removeChild00);
     tolua_function(tolua_S,"removeAll",tolua_NeoGame_irr_scene_ISceneNode_removeAll00);
     tolua_function(tolua_S,"remove",tolua_NeoGame_irr_scene_ISceneNode_remove00);
     tolua_function(tolua_S,"addAnimator",tolua_NeoGame_irr_scene_ISceneNode_addAnimator00);
     tolua_function(tolua_S,"removeAnimator",tolua_NeoGame_irr_scene_ISceneNode_removeAnimator00);
     tolua_function(tolua_S,"removeAnimators",tolua_NeoGame_irr_scene_ISceneNode_removeAnimators00);
     tolua_function(tolua_S,"getMaterialCount",tolua_NeoGame_irr_scene_ISceneNode_getMaterialCount00);
     tolua_function(tolua_S,"setMaterialFlag",tolua_NeoGame_irr_scene_ISceneNode_setMaterialFlag00);
     tolua_function(tolua_S,"setMaterialTexture",tolua_NeoGame_irr_scene_ISceneNode_setMaterialTexture00);
     tolua_function(tolua_S,"setMaterialType",tolua_NeoGame_irr_scene_ISceneNode_setMaterialType00);
     tolua_function(tolua_S,"getScale",tolua_NeoGame_irr_scene_ISceneNode_getScale00);
     tolua_function(tolua_S,"setScale",tolua_NeoGame_irr_scene_ISceneNode_setScale00);
     tolua_function(tolua_S,"getRotation",tolua_NeoGame_irr_scene_ISceneNode_getRotation00);
     tolua_function(tolua_S,"setRotation",tolua_NeoGame_irr_scene_ISceneNode_setRotation00);
     tolua_function(tolua_S,"getPosition",tolua_NeoGame_irr_scene_ISceneNode_getPosition00);
     tolua_function(tolua_S,"setPosition",tolua_NeoGame_irr_scene_ISceneNode_setPosition00);
     tolua_function(tolua_S,"getAbsolutePosition",tolua_NeoGame_irr_scene_ISceneNode_getAbsolutePosition00);
     tolua_function(tolua_S,"setAutomaticCulling",tolua_NeoGame_irr_scene_ISceneNode_setAutomaticCulling00);
     tolua_function(tolua_S,"getAutomaticCulling",tolua_NeoGame_irr_scene_ISceneNode_getAutomaticCulling00);
     tolua_function(tolua_S,"setDebugDataVisible",tolua_NeoGame_irr_scene_ISceneNode_setDebugDataVisible00);
     tolua_function(tolua_S,"isDebugDataVisible",tolua_NeoGame_irr_scene_ISceneNode_isDebugDataVisible00);
     tolua_function(tolua_S,"setIsDebugObject",tolua_NeoGame_irr_scene_ISceneNode_setIsDebugObject00);
     tolua_function(tolua_S,"isDebugObject",tolua_NeoGame_irr_scene_ISceneNode_isDebugObject00);
     tolua_function(tolua_S,"setParent",tolua_NeoGame_irr_scene_ISceneNode_setParent00);
     tolua_function(tolua_S,"updateAbsolutePosition",tolua_NeoGame_irr_scene_ISceneNode_updateAbsolutePosition00);
     tolua_function(tolua_S,"getParent",tolua_NeoGame_irr_scene_ISceneNode_getParent00);
     tolua_function(tolua_S,"getType",tolua_NeoGame_irr_scene_ISceneNode_getType00);
     tolua_function(tolua_S,"clone",tolua_NeoGame_irr_scene_ISceneNode_clone00);
    tolua_endmodule(tolua_S);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_module(tolua_S,"scene",0);
   tolua_beginmodule(tolua_S,"scene");
    tolua_cclass(tolua_S,"ISceneNodeAnimator","irr::scene::ISceneNodeAnimator","irr::io::IAttributeExchangingObject",NULL);
    tolua_beginmodule(tolua_S,"ISceneNodeAnimator");
     tolua_function(tolua_S,"getType",tolua_NeoGame_irr_scene_ISceneNodeAnimator_getType00);
     tolua_function(tolua_S,"hasFinished",tolua_NeoGame_irr_scene_ISceneNodeAnimator_hasFinished00);
    tolua_endmodule(tolua_S);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_module(tolua_S,"scene",0);
   tolua_beginmodule(tolua_S,"scene");
    tolua_cclass(tolua_S,"IShadowVolumeSceneNode","irr::scene::IShadowVolumeSceneNode","irr::scene::ISceneNode",NULL);
    tolua_beginmodule(tolua_S,"IShadowVolumeSceneNode");
     tolua_function(tolua_S,"setShadowMesh",tolua_NeoGame_irr_scene_IShadowVolumeSceneNode_setShadowMesh00);
     tolua_function(tolua_S,"updateShadowVolumes",tolua_NeoGame_irr_scene_IShadowVolumeSceneNode_updateShadowVolumes00);
    tolua_endmodule(tolua_S);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_module(tolua_S,"video",0);
   tolua_beginmodule(tolua_S,"video");
    tolua_constant(tolua_S,"ELT_POINT",irr::video::ELT_POINT);
    tolua_constant(tolua_S,"ELT_SPOT",irr::video::ELT_SPOT);
    tolua_constant(tolua_S,"ELT_DIRECTIONAL",irr::video::ELT_DIRECTIONAL);
    tolua_constant(tolua_S,"ELT_COUNT",irr::video::ELT_COUNT);
    #ifdef __cplusplus
    tolua_cclass(tolua_S,"SLight","irr::video::SLight","",tolua_collect_irr__video__SLight);
    #else
    tolua_cclass(tolua_S,"SLight","irr::video::SLight","",NULL);
    #endif
    tolua_beginmodule(tolua_S,"SLight");
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_video_SLight_new00);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_video_SLight_new00_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_video_SLight_new00_local);
     tolua_variable(tolua_S,"AmbientColor",tolua_get_irr__video__SLight_AmbientColor,tolua_set_irr__video__SLight_AmbientColor);
     tolua_variable(tolua_S,"DiffuseColor",tolua_get_irr__video__SLight_DiffuseColor,tolua_set_irr__video__SLight_DiffuseColor);
     tolua_variable(tolua_S,"SpecularColor",tolua_get_irr__video__SLight_SpecularColor,tolua_set_irr__video__SLight_SpecularColor);
     tolua_variable(tolua_S,"Attenuation",tolua_get_irr__video__SLight_Attenuation,tolua_set_irr__video__SLight_Attenuation);
     tolua_variable(tolua_S,"OuterCone",tolua_get_irr__video__SLight_OuterCone,tolua_set_irr__video__SLight_OuterCone);
     tolua_variable(tolua_S,"InnerCone",tolua_get_irr__video__SLight_InnerCone,tolua_set_irr__video__SLight_InnerCone);
     tolua_variable(tolua_S,"Falloff",tolua_get_irr__video__SLight_Falloff,tolua_set_irr__video__SLight_Falloff);
     tolua_variable(tolua_S,"Position",tolua_get_irr__video__SLight_Position,tolua_set_irr__video__SLight_Position);
     tolua_variable(tolua_S,"Direction",tolua_get_irr__video__SLight_Direction,tolua_set_irr__video__SLight_Direction);
     tolua_variable(tolua_S,"Radius",tolua_get_irr__video__SLight_Radius,tolua_set_irr__video__SLight_Radius);
     tolua_variable(tolua_S,"Type",tolua_get_irr__video__SLight_Type,tolua_set_irr__video__SLight_Type);
     tolua_variable(tolua_S,"CastShadows",tolua_get_irr__video__SLight_CastShadows,tolua_set_irr__video__SLight_CastShadows);
    tolua_endmodule(tolua_S);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_constant(tolua_S,"KEY_LBUTTON",irr::KEY_LBUTTON);
   tolua_constant(tolua_S,"KEY_RBUTTON",irr::KEY_RBUTTON);
   tolua_constant(tolua_S,"KEY_CANCEL",irr::KEY_CANCEL);
   tolua_constant(tolua_S,"KEY_MBUTTON",irr::KEY_MBUTTON);
   tolua_constant(tolua_S,"KEY_XBUTTON1",irr::KEY_XBUTTON1);
   tolua_constant(tolua_S,"KEY_XBUTTON2",irr::KEY_XBUTTON2);
   tolua_constant(tolua_S,"KEY_BACK",irr::KEY_BACK);
   tolua_constant(tolua_S,"KEY_TAB",irr::KEY_TAB);
   tolua_constant(tolua_S,"KEY_CLEAR",irr::KEY_CLEAR);
   tolua_constant(tolua_S,"KEY_RETURN",irr::KEY_RETURN);
   tolua_constant(tolua_S,"KEY_SHIFT",irr::KEY_SHIFT);
   tolua_constant(tolua_S,"KEY_CONTROL",irr::KEY_CONTROL);
   tolua_constant(tolua_S,"KEY_MENU",irr::KEY_MENU);
   tolua_constant(tolua_S,"KEY_PAUSE",irr::KEY_PAUSE);
   tolua_constant(tolua_S,"KEY_CAPITAL",irr::KEY_CAPITAL);
   tolua_constant(tolua_S,"KEY_KANA",irr::KEY_KANA);
   tolua_constant(tolua_S,"KEY_HANGUEL",irr::KEY_HANGUEL);
   tolua_constant(tolua_S,"KEY_HANGUL",irr::KEY_HANGUL);
   tolua_constant(tolua_S,"KEY_JUNJA",irr::KEY_JUNJA);
   tolua_constant(tolua_S,"KEY_FINAL",irr::KEY_FINAL);
   tolua_constant(tolua_S,"KEY_HANJA",irr::KEY_HANJA);
   tolua_constant(tolua_S,"KEY_KANJI",irr::KEY_KANJI);
   tolua_constant(tolua_S,"KEY_ESCAPE",irr::KEY_ESCAPE);
   tolua_constant(tolua_S,"KEY_CONVERT",irr::KEY_CONVERT);
   tolua_constant(tolua_S,"KEY_NONCONVERT",irr::KEY_NONCONVERT);
   tolua_constant(tolua_S,"KEY_ACCEPT",irr::KEY_ACCEPT);
   tolua_constant(tolua_S,"KEY_MODECHANGE",irr::KEY_MODECHANGE);
   tolua_constant(tolua_S,"KEY_SPACE",irr::KEY_SPACE);
   tolua_constant(tolua_S,"KEY_PRIOR",irr::KEY_PRIOR);
   tolua_constant(tolua_S,"KEY_NEXT",irr::KEY_NEXT);
   tolua_constant(tolua_S,"KEY_END",irr::KEY_END);
   tolua_constant(tolua_S,"KEY_HOME",irr::KEY_HOME);
   tolua_constant(tolua_S,"KEY_LEFT",irr::KEY_LEFT);
   tolua_constant(tolua_S,"KEY_UP",irr::KEY_UP);
   tolua_constant(tolua_S,"KEY_RIGHT",irr::KEY_RIGHT);
   tolua_constant(tolua_S,"KEY_DOWN",irr::KEY_DOWN);
   tolua_constant(tolua_S,"KEY_SELECT",irr::KEY_SELECT);
   tolua_constant(tolua_S,"KEY_PRINT",irr::KEY_PRINT);
   tolua_constant(tolua_S,"KEY_EXECUT",irr::KEY_EXECUT);
   tolua_constant(tolua_S,"KEY_SNAPSHOT",irr::KEY_SNAPSHOT);
   tolua_constant(tolua_S,"KEY_INSERT",irr::KEY_INSERT);
   tolua_constant(tolua_S,"KEY_DELETE",irr::KEY_DELETE);
   tolua_constant(tolua_S,"KEY_HELP",irr::KEY_HELP);
   tolua_constant(tolua_S,"KEY_KEY_0",irr::KEY_KEY_0);
   tolua_constant(tolua_S,"KEY_KEY_1",irr::KEY_KEY_1);
   tolua_constant(tolua_S,"KEY_KEY_2",irr::KEY_KEY_2);
   tolua_constant(tolua_S,"KEY_KEY_3",irr::KEY_KEY_3);
   tolua_constant(tolua_S,"KEY_KEY_4",irr::KEY_KEY_4);
   tolua_constant(tolua_S,"KEY_KEY_5",irr::KEY_KEY_5);
   tolua_constant(tolua_S,"KEY_KEY_6",irr::KEY_KEY_6);
   tolua_constant(tolua_S,"KEY_KEY_7",irr::KEY_KEY_7);
   tolua_constant(tolua_S,"KEY_KEY_8",irr::KEY_KEY_8);
   tolua_constant(tolua_S,"KEY_KEY_9",irr::KEY_KEY_9);
   tolua_constant(tolua_S,"KEY_KEY_A",irr::KEY_KEY_A);
   tolua_constant(tolua_S,"KEY_KEY_B",irr::KEY_KEY_B);
   tolua_constant(tolua_S,"KEY_KEY_C",irr::KEY_KEY_C);
   tolua_constant(tolua_S,"KEY_KEY_D",irr::KEY_KEY_D);
   tolua_constant(tolua_S,"KEY_KEY_E",irr::KEY_KEY_E);
   tolua_constant(tolua_S,"KEY_KEY_F",irr::KEY_KEY_F);
   tolua_constant(tolua_S,"KEY_KEY_G",irr::KEY_KEY_G);
   tolua_constant(tolua_S,"KEY_KEY_H",irr::KEY_KEY_H);
   tolua_constant(tolua_S,"KEY_KEY_I",irr::KEY_KEY_I);
   tolua_constant(tolua_S,"KEY_KEY_J",irr::KEY_KEY_J);
   tolua_constant(tolua_S,"KEY_KEY_K",irr::KEY_KEY_K);
   tolua_constant(tolua_S,"KEY_KEY_L",irr::KEY_KEY_L);
   tolua_constant(tolua_S,"KEY_KEY_M",irr::KEY_KEY_M);
   tolua_constant(tolua_S,"KEY_KEY_N",irr::KEY_KEY_N);
   tolua_constant(tolua_S,"KEY_KEY_O",irr::KEY_KEY_O);
   tolua_constant(tolua_S,"KEY_KEY_P",irr::KEY_KEY_P);
   tolua_constant(tolua_S,"KEY_KEY_Q",irr::KEY_KEY_Q);
   tolua_constant(tolua_S,"KEY_KEY_R",irr::KEY_KEY_R);
   tolua_constant(tolua_S,"KEY_KEY_S",irr::KEY_KEY_S);
   tolua_constant(tolua_S,"KEY_KEY_T",irr::KEY_KEY_T);
   tolua_constant(tolua_S,"KEY_KEY_U",irr::KEY_KEY_U);
   tolua_constant(tolua_S,"KEY_KEY_V",irr::KEY_KEY_V);
   tolua_constant(tolua_S,"KEY_KEY_W",irr::KEY_KEY_W);
   tolua_constant(tolua_S,"KEY_KEY_X",irr::KEY_KEY_X);
   tolua_constant(tolua_S,"KEY_KEY_Y",irr::KEY_KEY_Y);
   tolua_constant(tolua_S,"KEY_KEY_Z",irr::KEY_KEY_Z);
   tolua_constant(tolua_S,"KEY_LWIN",irr::KEY_LWIN);
   tolua_constant(tolua_S,"KEY_RWIN",irr::KEY_RWIN);
   tolua_constant(tolua_S,"KEY_APPS",irr::KEY_APPS);
   tolua_constant(tolua_S,"KEY_SLEEP",irr::KEY_SLEEP);
   tolua_constant(tolua_S,"KEY_NUMPAD0",irr::KEY_NUMPAD0);
   tolua_constant(tolua_S,"KEY_NUMPAD1",irr::KEY_NUMPAD1);
   tolua_constant(tolua_S,"KEY_NUMPAD2",irr::KEY_NUMPAD2);
   tolua_constant(tolua_S,"KEY_NUMPAD3",irr::KEY_NUMPAD3);
   tolua_constant(tolua_S,"KEY_NUMPAD4",irr::KEY_NUMPAD4);
   tolua_constant(tolua_S,"KEY_NUMPAD5",irr::KEY_NUMPAD5);
   tolua_constant(tolua_S,"KEY_NUMPAD6",irr::KEY_NUMPAD6);
   tolua_constant(tolua_S,"KEY_NUMPAD7",irr::KEY_NUMPAD7);
   tolua_constant(tolua_S,"KEY_NUMPAD8",irr::KEY_NUMPAD8);
   tolua_constant(tolua_S,"KEY_NUMPAD9",irr::KEY_NUMPAD9);
   tolua_constant(tolua_S,"KEY_MULTIPLY",irr::KEY_MULTIPLY);
   tolua_constant(tolua_S,"KEY_ADD",irr::KEY_ADD);
   tolua_constant(tolua_S,"KEY_SEPARATOR",irr::KEY_SEPARATOR);
   tolua_constant(tolua_S,"KEY_SUBTRACT",irr::KEY_SUBTRACT);
   tolua_constant(tolua_S,"KEY_DECIMAL",irr::KEY_DECIMAL);
   tolua_constant(tolua_S,"KEY_DIVIDE",irr::KEY_DIVIDE);
   tolua_constant(tolua_S,"KEY_F1",irr::KEY_F1);
   tolua_constant(tolua_S,"KEY_F2",irr::KEY_F2);
   tolua_constant(tolua_S,"KEY_F3",irr::KEY_F3);
   tolua_constant(tolua_S,"KEY_F4",irr::KEY_F4);
   tolua_constant(tolua_S,"KEY_F5",irr::KEY_F5);
   tolua_constant(tolua_S,"KEY_F6",irr::KEY_F6);
   tolua_constant(tolua_S,"KEY_F7",irr::KEY_F7);
   tolua_constant(tolua_S,"KEY_F8",irr::KEY_F8);
   tolua_constant(tolua_S,"KEY_F9",irr::KEY_F9);
   tolua_constant(tolua_S,"KEY_F10",irr::KEY_F10);
   tolua_constant(tolua_S,"KEY_F11",irr::KEY_F11);
   tolua_constant(tolua_S,"KEY_F12",irr::KEY_F12);
   tolua_constant(tolua_S,"KEY_F13",irr::KEY_F13);
   tolua_constant(tolua_S,"KEY_F14",irr::KEY_F14);
   tolua_constant(tolua_S,"KEY_F15",irr::KEY_F15);
   tolua_constant(tolua_S,"KEY_F16",irr::KEY_F16);
   tolua_constant(tolua_S,"KEY_F17",irr::KEY_F17);
   tolua_constant(tolua_S,"KEY_F18",irr::KEY_F18);
   tolua_constant(tolua_S,"KEY_F19",irr::KEY_F19);
   tolua_constant(tolua_S,"KEY_F20",irr::KEY_F20);
   tolua_constant(tolua_S,"KEY_F21",irr::KEY_F21);
   tolua_constant(tolua_S,"KEY_F22",irr::KEY_F22);
   tolua_constant(tolua_S,"KEY_F23",irr::KEY_F23);
   tolua_constant(tolua_S,"KEY_F24",irr::KEY_F24);
   tolua_constant(tolua_S,"KEY_NUMLOCK",irr::KEY_NUMLOCK);
   tolua_constant(tolua_S,"KEY_SCROLL",irr::KEY_SCROLL);
   tolua_constant(tolua_S,"KEY_LSHIFT",irr::KEY_LSHIFT);
   tolua_constant(tolua_S,"KEY_RSHIFT",irr::KEY_RSHIFT);
   tolua_constant(tolua_S,"KEY_LCONTROL",irr::KEY_LCONTROL);
   tolua_constant(tolua_S,"KEY_RCONTROL",irr::KEY_RCONTROL);
   tolua_constant(tolua_S,"KEY_LMENU",irr::KEY_LMENU);
   tolua_constant(tolua_S,"KEY_RMENU",irr::KEY_RMENU);
   tolua_constant(tolua_S,"KEY_OEM_1",irr::KEY_OEM_1);
   tolua_constant(tolua_S,"KEY_PLUS",irr::KEY_PLUS);
   tolua_constant(tolua_S,"KEY_COMMA",irr::KEY_COMMA);
   tolua_constant(tolua_S,"KEY_MINUS",irr::KEY_MINUS);
   tolua_constant(tolua_S,"KEY_PERIOD",irr::KEY_PERIOD);
   tolua_constant(tolua_S,"KEY_OEM_2",irr::KEY_OEM_2);
   tolua_constant(tolua_S,"KEY_OEM_3",irr::KEY_OEM_3);
   tolua_constant(tolua_S,"KEY_OEM_4",irr::KEY_OEM_4);
   tolua_constant(tolua_S,"KEY_OEM_5",irr::KEY_OEM_5);
   tolua_constant(tolua_S,"KEY_OEM_6",irr::KEY_OEM_6);
   tolua_constant(tolua_S,"KEY_OEM_7",irr::KEY_OEM_7);
   tolua_constant(tolua_S,"KEY_OEM_8",irr::KEY_OEM_8);
   tolua_constant(tolua_S,"KEY_OEM_AX",irr::KEY_OEM_AX);
   tolua_constant(tolua_S,"KEY_OEM_102",irr::KEY_OEM_102);
   tolua_constant(tolua_S,"KEY_ATTN",irr::KEY_ATTN);
   tolua_constant(tolua_S,"KEY_CRSEL",irr::KEY_CRSEL);
   tolua_constant(tolua_S,"KEY_EXSEL",irr::KEY_EXSEL);
   tolua_constant(tolua_S,"KEY_EREOF",irr::KEY_EREOF);
   tolua_constant(tolua_S,"KEY_PLAY",irr::KEY_PLAY);
   tolua_constant(tolua_S,"KEY_ZOOM",irr::KEY_ZOOM);
   tolua_constant(tolua_S,"KEY_PA1",irr::KEY_PA1);
   tolua_constant(tolua_S,"KEY_OEM_CLEAR",irr::KEY_OEM_CLEAR);
   tolua_constant(tolua_S,"KEY_KEY_CODES_COUNT",irr::KEY_KEY_CODES_COUNT);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_module(tolua_S,"core",0);
   tolua_beginmodule(tolua_S,"core");
    #ifdef __cplusplus
    tolua_cclass(tolua_S,"matrix4","irr::core::CMatrix4<float>","",tolua_collect_irr__core__CMatrix4_float_);
    #else
    tolua_cclass(tolua_S,"matrix4","irr::core::CMatrix4<float>","",NULL);
    #endif
    tolua_beginmodule(tolua_S,"matrix4");
     tolua_constant(tolua_S,"EM4CONST_NOTHING",irr::core::CMatrix4<float>::EM4CONST_NOTHING);
     tolua_constant(tolua_S,"EM4CONST_COPY",irr::core::CMatrix4<float>::EM4CONST_COPY);
     tolua_constant(tolua_S,"EM4CONST_IDENTITY",irr::core::CMatrix4<float>::EM4CONST_IDENTITY);
     tolua_constant(tolua_S,"EM4CONST_TRANSPOSED",irr::core::CMatrix4<float>::EM4CONST_TRANSPOSED);
     tolua_constant(tolua_S,"EM4CONST_INVERSE",irr::core::CMatrix4<float>::EM4CONST_INVERSE);
     tolua_constant(tolua_S,"EM4CONST_INVERSE_TRANSPOSED",irr::core::CMatrix4<float>::EM4CONST_INVERSE_TRANSPOSED);
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_matrix4_new00);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_matrix4_new00_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_matrix4_new00_local);
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_matrix4_new01);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_matrix4_new01_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_matrix4_new01_local);
     tolua_function(tolua_S,".seti",tolua_NeoGame_irr_core_matrix4__seti00);
     tolua_function(tolua_S,".geti",tolua_NeoGame_irr_core_matrix4__geti00);
     tolua_function(tolua_S,".geti",tolua_NeoGame_irr_core_matrix4__geti01);
     tolua_function(tolua_S,".eq",tolua_NeoGame_irr_core_matrix4__eq00);
     tolua_function(tolua_S,".add",tolua_NeoGame_irr_core_matrix4__add00);
     tolua_function(tolua_S,".sub",tolua_NeoGame_irr_core_matrix4__sub00);
     tolua_function(tolua_S,"setbyproduct",tolua_NeoGame_irr_core_matrix4_setbyproduct00);
     tolua_function(tolua_S,"setbyproduct_nocheck",tolua_NeoGame_irr_core_matrix4_setbyproduct_nocheck00);
     tolua_function(tolua_S,".mul",tolua_NeoGame_irr_core_matrix4__mul00);
     tolua_function(tolua_S,".mul",tolua_NeoGame_irr_core_matrix4__mul01);
     tolua_function(tolua_S,"makeIdentity",tolua_NeoGame_irr_core_matrix4_makeIdentity00);
     tolua_function(tolua_S,"isIdentity",tolua_NeoGame_irr_core_matrix4_isIdentity00);
     tolua_function(tolua_S,"isOrthogonal",tolua_NeoGame_irr_core_matrix4_isOrthogonal00);
     tolua_function(tolua_S,"isIdentity_integer_base",tolua_NeoGame_irr_core_matrix4_isIdentity_integer_base00);
     tolua_function(tolua_S,"setTranslation",tolua_NeoGame_irr_core_matrix4_setTranslation00);
     tolua_function(tolua_S,"getTranslation",tolua_NeoGame_irr_core_matrix4_getTranslation00);
     tolua_function(tolua_S,"setInverseTranslation",tolua_NeoGame_irr_core_matrix4_setInverseTranslation00);
     tolua_function(tolua_S,"setRotationRadians",tolua_NeoGame_irr_core_matrix4_setRotationRadians00);
     tolua_function(tolua_S,"setRotationDegrees",tolua_NeoGame_irr_core_matrix4_setRotationDegrees00);
     tolua_function(tolua_S,"getRotationDegrees",tolua_NeoGame_irr_core_matrix4_getRotationDegrees00);
     tolua_function(tolua_S,"setInverseRotationRadians",tolua_NeoGame_irr_core_matrix4_setInverseRotationRadians00);
     tolua_function(tolua_S,"setInverseRotationDegrees",tolua_NeoGame_irr_core_matrix4_setInverseRotationDegrees00);
     tolua_function(tolua_S,"setRotationAxisRadians",tolua_NeoGame_irr_core_matrix4_setRotationAxisRadians00);
     tolua_function(tolua_S,"setScale",tolua_NeoGame_irr_core_matrix4_setScale00);
     tolua_function(tolua_S,"setScale",tolua_NeoGame_irr_core_matrix4_setScale01);
     tolua_function(tolua_S,"getScale",tolua_NeoGame_irr_core_matrix4_getScale00);
     tolua_function(tolua_S,"inverseTranslateVect",tolua_NeoGame_irr_core_matrix4_inverseTranslateVect00);
     tolua_function(tolua_S,"inverseRotateVect",tolua_NeoGame_irr_core_matrix4_inverseRotateVect00);
     tolua_function(tolua_S,"rotateVect",tolua_NeoGame_irr_core_matrix4_rotateVect00);
     tolua_function(tolua_S,"rotateVect",tolua_NeoGame_irr_core_matrix4_rotateVect01);
     tolua_function(tolua_S,"transformVect",tolua_NeoGame_irr_core_matrix4_transformVect00);
     tolua_function(tolua_S,"transformVect",tolua_NeoGame_irr_core_matrix4_transformVect01);
     tolua_function(tolua_S,"translateVect",tolua_NeoGame_irr_core_matrix4_translateVect00);
     tolua_function(tolua_S,"transformBox",tolua_NeoGame_irr_core_matrix4_transformBox00);
     tolua_function(tolua_S,"transformBoxEx",tolua_NeoGame_irr_core_matrix4_transformBoxEx00);
     tolua_function(tolua_S,"multiplyWith1x4Matrix",tolua_NeoGame_irr_core_matrix4_multiplyWith1x4Matrix00);
     tolua_function(tolua_S,"makeInverse",tolua_NeoGame_irr_core_matrix4_makeInverse00);
     tolua_function(tolua_S,"getInversePrimitive",tolua_NeoGame_irr_core_matrix4_getInversePrimitive00);
     tolua_function(tolua_S,"getInverse",tolua_NeoGame_irr_core_matrix4_getInverse00);
     tolua_function(tolua_S,"buildProjectionMatrixPerspectiveFovRH",tolua_NeoGame_irr_core_matrix4_buildProjectionMatrixPerspectiveFovRH00);
     tolua_function(tolua_S,"buildProjectionMatrixPerspectiveFovLH",tolua_NeoGame_irr_core_matrix4_buildProjectionMatrixPerspectiveFovLH00);
     tolua_function(tolua_S,"buildProjectionMatrixPerspectiveFovInfinityLH",tolua_NeoGame_irr_core_matrix4_buildProjectionMatrixPerspectiveFovInfinityLH00);
     tolua_function(tolua_S,"buildProjectionMatrixPerspectiveRH",tolua_NeoGame_irr_core_matrix4_buildProjectionMatrixPerspectiveRH00);
     tolua_function(tolua_S,"buildProjectionMatrixPerspectiveLH",tolua_NeoGame_irr_core_matrix4_buildProjectionMatrixPerspectiveLH00);
     tolua_function(tolua_S,"buildProjectionMatrixOrthoLH",tolua_NeoGame_irr_core_matrix4_buildProjectionMatrixOrthoLH00);
     tolua_function(tolua_S,"buildProjectionMatrixOrthoRH",tolua_NeoGame_irr_core_matrix4_buildProjectionMatrixOrthoRH00);
     tolua_function(tolua_S,"buildCameraLookAtMatrixLH",tolua_NeoGame_irr_core_matrix4_buildCameraLookAtMatrixLH00);
     tolua_function(tolua_S,"buildCameraLookAtMatrixRH",tolua_NeoGame_irr_core_matrix4_buildCameraLookAtMatrixRH00);
     tolua_function(tolua_S,"interpolate",tolua_NeoGame_irr_core_matrix4_interpolate00);
     tolua_function(tolua_S,"getTransposed",tolua_NeoGame_irr_core_matrix4_getTransposed00);
     tolua_function(tolua_S,"getTransposed",tolua_NeoGame_irr_core_matrix4_getTransposed01);
     tolua_function(tolua_S,"buildRotateFromTo",tolua_NeoGame_irr_core_matrix4_buildRotateFromTo00);
     tolua_function(tolua_S,"setRotationCenter",tolua_NeoGame_irr_core_matrix4_setRotationCenter00);
     tolua_function(tolua_S,"buildAxisAlignedBillboard",tolua_NeoGame_irr_core_matrix4_buildAxisAlignedBillboard00);
     tolua_function(tolua_S,"buildTextureTransform",tolua_NeoGame_irr_core_matrix4_buildTextureTransform00);
     tolua_function(tolua_S,"setTextureRotationCenter",tolua_NeoGame_irr_core_matrix4_setTextureRotationCenter00);
     tolua_function(tolua_S,"setTextureTranslate",tolua_NeoGame_irr_core_matrix4_setTextureTranslate00);
     tolua_function(tolua_S,"setTextureTranslateTransposed",tolua_NeoGame_irr_core_matrix4_setTextureTranslateTransposed00);
     tolua_function(tolua_S,"setTextureScale",tolua_NeoGame_irr_core_matrix4_setTextureScale00);
     tolua_function(tolua_S,"setTextureScaleCenter",tolua_NeoGame_irr_core_matrix4_setTextureScaleCenter00);
     tolua_function(tolua_S,"setM",tolua_NeoGame_irr_core_matrix4_setM00);
     tolua_function(tolua_S,"setDefinitelyIdentityMatrix",tolua_NeoGame_irr_core_matrix4_setDefinitelyIdentityMatrix00);
     tolua_function(tolua_S,"getDefinitelyIdentityMatrix",tolua_NeoGame_irr_core_matrix4_getDefinitelyIdentityMatrix00);
     tolua_function(tolua_S,"equals",tolua_NeoGame_irr_core_matrix4_equals00);
     tolua_function(tolua_S,"equals",tolua_NeoGame_irr_core_matrix4_equals01);
    tolua_endmodule(tolua_S);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_module(tolua_S,"video",0);
   tolua_beginmodule(tolua_S,"video");
    tolua_constant(tolua_S,"ECF_A1R5G5B5",irr::video::ECF_A1R5G5B5);
    tolua_constant(tolua_S,"ECF_R5G6B5",irr::video::ECF_R5G6B5);
    tolua_constant(tolua_S,"ECF_R8G8B8",irr::video::ECF_R8G8B8);
    tolua_constant(tolua_S,"ECF_A8R8G8B8",irr::video::ECF_A8R8G8B8);
    tolua_constant(tolua_S,"ECF_R16F",irr::video::ECF_R16F);
    tolua_constant(tolua_S,"ECF_G16R16F",irr::video::ECF_G16R16F);
    tolua_constant(tolua_S,"ECF_A16B16G16R16F",irr::video::ECF_A16B16G16R16F);
    tolua_constant(tolua_S,"ECF_R32F",irr::video::ECF_R32F);
    tolua_constant(tolua_S,"ECF_G32R32F",irr::video::ECF_G32R32F);
    tolua_constant(tolua_S,"ECF_A32B32G32R32F",irr::video::ECF_A32B32G32R32F);
    tolua_constant(tolua_S,"ECF_UNKNOWN",irr::video::ECF_UNKNOWN);
    tolua_function(tolua_S,"RGBA16",tolua_NeoGame_irr_video_RGBA1600);
    tolua_function(tolua_S,"RGB16",tolua_NeoGame_irr_video_RGB1600);
    tolua_function(tolua_S,"RGB16from16",tolua_NeoGame_irr_video_RGB16from1600);
    tolua_function(tolua_S,"X8R8G8B8toA1R5G5B5",tolua_NeoGame_irr_video_X8R8G8B8toA1R5G5B500);
    tolua_function(tolua_S,"A8R8G8B8toA1R5G5B5",tolua_NeoGame_irr_video_A8R8G8B8toA1R5G5B500);
    tolua_function(tolua_S,"A8R8G8B8toR5G6B5",tolua_NeoGame_irr_video_A8R8G8B8toR5G6B500);
    tolua_function(tolua_S,"A1R5G5B5toA8R8G8B8",tolua_NeoGame_irr_video_A1R5G5B5toA8R8G8B800);
    tolua_function(tolua_S,"R5G6B5toA8R8G8B8",tolua_NeoGame_irr_video_R5G6B5toA8R8G8B800);
    tolua_function(tolua_S,"R5G6B5toA1R5G5B5",tolua_NeoGame_irr_video_R5G6B5toA1R5G5B500);
    tolua_function(tolua_S,"A1R5G5B5toR5G6B5",tolua_NeoGame_irr_video_A1R5G5B5toR5G6B500);
    tolua_function(tolua_S,"getAlpha",tolua_NeoGame_irr_video_getAlpha00);
    tolua_function(tolua_S,"getRed",tolua_NeoGame_irr_video_getRed00);
    tolua_function(tolua_S,"getGreen",tolua_NeoGame_irr_video_getGreen00);
    tolua_function(tolua_S,"getBlue",tolua_NeoGame_irr_video_getBlue00);
    tolua_function(tolua_S,"getAverage",tolua_NeoGame_irr_video_getAverage00);
    #ifdef __cplusplus
    tolua_cclass(tolua_S,"SColor","irr::video::SColor","",tolua_collect_irr__video__SColor);
    #else
    tolua_cclass(tolua_S,"SColor","irr::video::SColor","",NULL);
    #endif
    tolua_beginmodule(tolua_S,"SColor");
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_video_SColor_new00);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_video_SColor_new00_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_video_SColor_new00_local);
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_video_SColor_new01);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_video_SColor_new01_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_video_SColor_new01_local);
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_video_SColor_new02);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_video_SColor_new02_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_video_SColor_new02_local);
     tolua_function(tolua_S,"getAlpha",tolua_NeoGame_irr_video_SColor_getAlpha00);
     tolua_function(tolua_S,"getRed",tolua_NeoGame_irr_video_SColor_getRed00);
     tolua_function(tolua_S,"getGreen",tolua_NeoGame_irr_video_SColor_getGreen00);
     tolua_function(tolua_S,"getBlue",tolua_NeoGame_irr_video_SColor_getBlue00);
     tolua_function(tolua_S,"getLightness",tolua_NeoGame_irr_video_SColor_getLightness00);
     tolua_function(tolua_S,"getLuminance",tolua_NeoGame_irr_video_SColor_getLuminance00);
     tolua_function(tolua_S,"getAverage",tolua_NeoGame_irr_video_SColor_getAverage00);
     tolua_function(tolua_S,"setAlpha",tolua_NeoGame_irr_video_SColor_setAlpha00);
     tolua_function(tolua_S,"setRed",tolua_NeoGame_irr_video_SColor_setRed00);
     tolua_function(tolua_S,"setGreen",tolua_NeoGame_irr_video_SColor_setGreen00);
     tolua_function(tolua_S,"setBlue",tolua_NeoGame_irr_video_SColor_setBlue00);
     tolua_function(tolua_S,"toA1R5G5B5",tolua_NeoGame_irr_video_SColor_toA1R5G5B500);
     tolua_function(tolua_S,"toOpenGLColor",tolua_NeoGame_irr_video_SColor_toOpenGLColor00);
     tolua_function(tolua_S,"set",tolua_NeoGame_irr_video_SColor_set00);
     tolua_function(tolua_S,"set",tolua_NeoGame_irr_video_SColor_set01);
     tolua_function(tolua_S,".eq",tolua_NeoGame_irr_video_SColor__eq00);
     tolua_function(tolua_S,".lt",tolua_NeoGame_irr_video_SColor__lt00);
     tolua_function(tolua_S,".add",tolua_NeoGame_irr_video_SColor__add00);
     tolua_function(tolua_S,"getInterpolated",tolua_NeoGame_irr_video_SColor_getInterpolated00);
     tolua_function(tolua_S,"getInterpolated_quadratic",tolua_NeoGame_irr_video_SColor_getInterpolated_quadratic00);
     tolua_function(tolua_S,"setData",tolua_NeoGame_irr_video_SColor_setData00);
     tolua_function(tolua_S,"getData",tolua_NeoGame_irr_video_SColor_getData00);
     tolua_variable(tolua_S,"color",tolua_get_irr__video__SColor_color,tolua_set_irr__video__SColor_color);
    tolua_endmodule(tolua_S);
    #ifdef __cplusplus
    tolua_cclass(tolua_S,"SColorf","irr::video::SColorf","",tolua_collect_irr__video__SColorf);
    #else
    tolua_cclass(tolua_S,"SColorf","irr::video::SColorf","",NULL);
    #endif
    tolua_beginmodule(tolua_S,"SColorf");
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_video_SColorf_new00);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_video_SColorf_new00_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_video_SColorf_new00_local);
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_video_SColorf_new01);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_video_SColorf_new01_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_video_SColorf_new01_local);
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_video_SColorf_new02);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_video_SColorf_new02_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_video_SColorf_new02_local);
     tolua_function(tolua_S,"toSColor",tolua_NeoGame_irr_video_SColorf_toSColor00);
     tolua_function(tolua_S,"set",tolua_NeoGame_irr_video_SColorf_set00);
     tolua_function(tolua_S,"set",tolua_NeoGame_irr_video_SColorf_set01);
     tolua_function(tolua_S,"getInterpolated",tolua_NeoGame_irr_video_SColorf_getInterpolated00);
     tolua_function(tolua_S,"getInterpolated_quadratic",tolua_NeoGame_irr_video_SColorf_getInterpolated_quadratic00);
     tolua_function(tolua_S,"setColorComponentValue",tolua_NeoGame_irr_video_SColorf_setColorComponentValue00);
     tolua_function(tolua_S,"getAlpha",tolua_NeoGame_irr_video_SColorf_getAlpha00);
     tolua_function(tolua_S,"getRed",tolua_NeoGame_irr_video_SColorf_getRed00);
     tolua_function(tolua_S,"getGreen",tolua_NeoGame_irr_video_SColorf_getGreen00);
     tolua_function(tolua_S,"getBlue",tolua_NeoGame_irr_video_SColorf_getBlue00);
     tolua_variable(tolua_S,"r",tolua_get_irr__video__SColorf_r,tolua_set_irr__video__SColorf_r);
     tolua_variable(tolua_S,"g",tolua_get_irr__video__SColorf_g,tolua_set_irr__video__SColorf_g);
     tolua_variable(tolua_S,"b",tolua_get_irr__video__SColorf_b,tolua_set_irr__video__SColorf_b);
     tolua_variable(tolua_S,"a",tolua_get_irr__video__SColorf_a,tolua_set_irr__video__SColorf_a);
    tolua_endmodule(tolua_S);
    #ifdef __cplusplus
    tolua_cclass(tolua_S,"SColorHSL","irr::video::SColorHSL","",tolua_collect_irr__video__SColorHSL);
    #else
    tolua_cclass(tolua_S,"SColorHSL","irr::video::SColorHSL","",NULL);
    #endif
    tolua_beginmodule(tolua_S,"SColorHSL");
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_video_SColorHSL_new00);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_video_SColorHSL_new00_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_video_SColorHSL_new00_local);
     tolua_function(tolua_S,"fromRGB",tolua_NeoGame_irr_video_SColorHSL_fromRGB00);
     tolua_function(tolua_S,"toRGB",tolua_NeoGame_irr_video_SColorHSL_toRGB00);
     tolua_variable(tolua_S,"Hue",tolua_get_irr__video__SColorHSL_Hue,tolua_set_irr__video__SColorHSL_Hue);
     tolua_variable(tolua_S,"Saturation",tolua_get_irr__video__SColorHSL_Saturation,tolua_set_irr__video__SColorHSL_Saturation);
     tolua_variable(tolua_S,"Luminance",tolua_get_irr__video__SColorHSL_Luminance,tolua_set_irr__video__SColorHSL_Luminance);
    tolua_endmodule(tolua_S);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_constant(tolua_S,"EKA_MOVE_FORWARD",irr::EKA_MOVE_FORWARD);
   tolua_constant(tolua_S,"EKA_MOVE_BACKWARD",irr::EKA_MOVE_BACKWARD);
   tolua_constant(tolua_S,"EKA_STRAFE_LEFT",irr::EKA_STRAFE_LEFT);
   tolua_constant(tolua_S,"EKA_STRAFE_RIGHT",irr::EKA_STRAFE_RIGHT);
   tolua_constant(tolua_S,"EKA_JUMP_UP",irr::EKA_JUMP_UP);
   tolua_constant(tolua_S,"EKA_CROUCH",irr::EKA_CROUCH);
   tolua_constant(tolua_S,"EKA_COUNT",irr::EKA_COUNT);
   tolua_constant(tolua_S,"EKA_FORCE_32BIT",irr::EKA_FORCE_32BIT);
   #ifdef __cplusplus
   tolua_cclass(tolua_S,"SKeyMap","irr::SKeyMap","",tolua_collect_irr__SKeyMap);
   #else
   tolua_cclass(tolua_S,"SKeyMap","irr::SKeyMap","",NULL);
   #endif
   tolua_beginmodule(tolua_S,"SKeyMap");
    tolua_function(tolua_S,"new",tolua_NeoGame_irr_SKeyMap_new00);
    tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_SKeyMap_new00_local);
    tolua_function(tolua_S,".call",tolua_NeoGame_irr_SKeyMap_new00_local);
    tolua_function(tolua_S,"new",tolua_NeoGame_irr_SKeyMap_new01);
    tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_SKeyMap_new01_local);
    tolua_function(tolua_S,".call",tolua_NeoGame_irr_SKeyMap_new01_local);
    tolua_variable(tolua_S,"Action",tolua_get_irr__SKeyMap_Action,tolua_set_irr__SKeyMap_Action);
    tolua_variable(tolua_S,"KeyCode",tolua_get_irr__SKeyMap_KeyCode,tolua_set_irr__SKeyMap_KeyCode);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_module(tolua_S,"video",0);
   tolua_beginmodule(tolua_S,"video");
    tolua_constant(tolua_S,"ETCF_ALWAYS_16_BIT",irr::video::ETCF_ALWAYS_16_BIT);
    tolua_constant(tolua_S,"ETCF_ALWAYS_32_BIT",irr::video::ETCF_ALWAYS_32_BIT);
    tolua_constant(tolua_S,"ETCF_OPTIMIZED_FOR_QUALITY",irr::video::ETCF_OPTIMIZED_FOR_QUALITY);
    tolua_constant(tolua_S,"ETCF_OPTIMIZED_FOR_SPEED",irr::video::ETCF_OPTIMIZED_FOR_SPEED);
    tolua_constant(tolua_S,"ETCF_CREATE_MIP_MAPS",irr::video::ETCF_CREATE_MIP_MAPS);
    tolua_constant(tolua_S,"ETCF_NO_ALPHA_CHANNEL",irr::video::ETCF_NO_ALPHA_CHANNEL);
    tolua_constant(tolua_S,"ETCF_ALLOW_NON_POWER_2",irr::video::ETCF_ALLOW_NON_POWER_2);
    tolua_constant(tolua_S,"ETCF_FORCE_32_BIT_DO_NOT_USE",irr::video::ETCF_FORCE_32_BIT_DO_NOT_USE);
    tolua_constant(tolua_S,"ETLM_READ_WRITE",irr::video::ETLM_READ_WRITE);
    tolua_constant(tolua_S,"ETLM_READ_ONLY",irr::video::ETLM_READ_ONLY);
    tolua_constant(tolua_S,"ETLM_WRITE_ONLY",irr::video::ETLM_WRITE_ONLY);
    tolua_cclass(tolua_S,"ITexture","irr::video::ITexture","irr::IReferenceCounted",NULL);
    tolua_beginmodule(tolua_S,"ITexture");
     tolua_function(tolua_S,"getOriginalSize",tolua_NeoGame_irr_video_ITexture_getOriginalSize00);
     tolua_function(tolua_S,"getSize",tolua_NeoGame_irr_video_ITexture_getSize00);
     tolua_function(tolua_S,"getColorFormat",tolua_NeoGame_irr_video_ITexture_getColorFormat00);
     tolua_function(tolua_S,"getPitch",tolua_NeoGame_irr_video_ITexture_getPitch00);
     tolua_function(tolua_S,"hasMipMaps",tolua_NeoGame_irr_video_ITexture_hasMipMaps00);
     tolua_function(tolua_S,"hasAlpha",tolua_NeoGame_irr_video_ITexture_hasAlpha00);
     tolua_function(tolua_S,"isRenderTarget",tolua_NeoGame_irr_video_ITexture_isRenderTarget00);
    tolua_endmodule(tolua_S);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_module(tolua_S,"core",0);
   tolua_beginmodule(tolua_S,"core");
    #ifdef __cplusplus
    tolua_cclass(tolua_S,"quaternion","irr::core::quaternion","",tolua_collect_irr__core__quaternion);
    #else
    tolua_cclass(tolua_S,"quaternion","irr::core::quaternion","",NULL);
    #endif
    tolua_beginmodule(tolua_S,"quaternion");
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_quaternion_new00);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_quaternion_new00_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_quaternion_new00_local);
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_quaternion_new01);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_quaternion_new01_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_quaternion_new01_local);
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_quaternion_new02);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_quaternion_new02_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_quaternion_new02_local);
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_quaternion_new03);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_quaternion_new03_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_quaternion_new03_local);
     tolua_function(tolua_S,".eq",tolua_NeoGame_irr_core_quaternion__eq00);
     tolua_function(tolua_S,".add",tolua_NeoGame_irr_core_quaternion__add00);
     tolua_function(tolua_S,".mul",tolua_NeoGame_irr_core_quaternion__mul00);
     tolua_function(tolua_S,".mul",tolua_NeoGame_irr_core_quaternion__mul01);
     tolua_function(tolua_S,".mul",tolua_NeoGame_irr_core_quaternion__mul02);
     tolua_function(tolua_S,"dotProduct",tolua_NeoGame_irr_core_quaternion_dotProduct00);
     tolua_function(tolua_S,"set",tolua_NeoGame_irr_core_quaternion_set00);
     tolua_function(tolua_S,"set",tolua_NeoGame_irr_core_quaternion_set01);
     tolua_function(tolua_S,"set",tolua_NeoGame_irr_core_quaternion_set02);
     tolua_function(tolua_S,"set",tolua_NeoGame_irr_core_quaternion_set03);
     tolua_function(tolua_S,"equals",tolua_NeoGame_irr_core_quaternion_equals00);
     tolua_function(tolua_S,"normalize",tolua_NeoGame_irr_core_quaternion_normalize00);
     tolua_function(tolua_S,"getMatrix",tolua_NeoGame_irr_core_quaternion_getMatrix00);
     tolua_function(tolua_S,"getMatrix",tolua_NeoGame_irr_core_quaternion_getMatrix01);
     tolua_function(tolua_S,"getMatrixCenter",tolua_NeoGame_irr_core_quaternion_getMatrixCenter00);
     tolua_function(tolua_S,"getMatrix_transposed",tolua_NeoGame_irr_core_quaternion_getMatrix_transposed00);
     tolua_function(tolua_S,"makeInverse",tolua_NeoGame_irr_core_quaternion_makeInverse00);
     tolua_function(tolua_S,"lerp",tolua_NeoGame_irr_core_quaternion_lerp00);
     tolua_function(tolua_S,"slerp",tolua_NeoGame_irr_core_quaternion_slerp00);
     tolua_function(tolua_S,"fromAngleAxis",tolua_NeoGame_irr_core_quaternion_fromAngleAxis00);
     tolua_function(tolua_S,"toAngleAxis",tolua_NeoGame_irr_core_quaternion_toAngleAxis00);
     tolua_function(tolua_S,"toEuler",tolua_NeoGame_irr_core_quaternion_toEuler00);
     tolua_function(tolua_S,"makeIdentity",tolua_NeoGame_irr_core_quaternion_makeIdentity00);
     tolua_function(tolua_S,"rotationFromTo",tolua_NeoGame_irr_core_quaternion_rotationFromTo00);
     tolua_variable(tolua_S,"X",tolua_get_irr__core__quaternion_X,tolua_set_irr__core__quaternion_X);
     tolua_variable(tolua_S,"Y",tolua_get_irr__core__quaternion_Y,tolua_set_irr__core__quaternion_Y);
     tolua_variable(tolua_S,"Z",tolua_get_irr__core__quaternion_Z,tolua_set_irr__core__quaternion_Z);
     tolua_variable(tolua_S,"W",tolua_get_irr__core__quaternion_W,tolua_set_irr__core__quaternion_W);
    tolua_endmodule(tolua_S);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_module(tolua_S,"core",0);
   tolua_beginmodule(tolua_S,"core");
    #ifdef __cplusplus
    tolua_cclass(tolua_S,"vector3di","irr::core::vector3d<int>","",tolua_collect_irr__core__vector3d_int_);
    #else
    tolua_cclass(tolua_S,"vector3di","irr::core::vector3d<int>","",NULL);
    #endif
    tolua_beginmodule(tolua_S,"vector3di");
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_vector3di_new00);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_vector3di_new00_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_vector3di_new00_local);
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_vector3di_new01);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_vector3di_new01_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_vector3di_new01_local);
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_vector3di_new02);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_vector3di_new02_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_vector3di_new02_local);
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_vector3di_new03);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_vector3di_new03_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_vector3di_new03_local);
     tolua_function(tolua_S,".sub",tolua_NeoGame_irr_core_vector3di__sub00);
     tolua_function(tolua_S,".add",tolua_NeoGame_irr_core_vector3di__add00);
     tolua_function(tolua_S,".add",tolua_NeoGame_irr_core_vector3di__add01);
     tolua_function(tolua_S,".sub",tolua_NeoGame_irr_core_vector3di__sub01);
     tolua_function(tolua_S,".sub",tolua_NeoGame_irr_core_vector3di__sub02);
     tolua_function(tolua_S,".mul",tolua_NeoGame_irr_core_vector3di__mul00);
     tolua_function(tolua_S,".mul",tolua_NeoGame_irr_core_vector3di__mul01);
     tolua_function(tolua_S,".div",tolua_NeoGame_irr_core_vector3di__div00);
     tolua_function(tolua_S,".div",tolua_NeoGame_irr_core_vector3di__div01);
     tolua_function(tolua_S,".le",tolua_NeoGame_irr_core_vector3di__le00);
     tolua_function(tolua_S,".lt",tolua_NeoGame_irr_core_vector3di__lt00);
     tolua_function(tolua_S,".eq",tolua_NeoGame_irr_core_vector3di__eq00);
     tolua_function(tolua_S,"equals",tolua_NeoGame_irr_core_vector3di_equals00);
     tolua_function(tolua_S,"equals",tolua_NeoGame_irr_core_vector3di_equals01);
     tolua_function(tolua_S,"set",tolua_NeoGame_irr_core_vector3di_set00);
     tolua_function(tolua_S,"set",tolua_NeoGame_irr_core_vector3di_set01);
     tolua_function(tolua_S,"getLength",tolua_NeoGame_irr_core_vector3di_getLength00);
     tolua_function(tolua_S,"getLengthSQ",tolua_NeoGame_irr_core_vector3di_getLengthSQ00);
     tolua_function(tolua_S,"dotProduct",tolua_NeoGame_irr_core_vector3di_dotProduct00);
     tolua_function(tolua_S,"getDistanceFrom",tolua_NeoGame_irr_core_vector3di_getDistanceFrom00);
     tolua_function(tolua_S,"getDistanceFromSQ",tolua_NeoGame_irr_core_vector3di_getDistanceFromSQ00);
     tolua_function(tolua_S,"crossProduct",tolua_NeoGame_irr_core_vector3di_crossProduct00);
     tolua_function(tolua_S,"isBetweenPoints",tolua_NeoGame_irr_core_vector3di_isBetweenPoints00);
     tolua_function(tolua_S,"normalize",tolua_NeoGame_irr_core_vector3di_normalize00);
     tolua_function(tolua_S,"setLength",tolua_NeoGame_irr_core_vector3di_setLength00);
     tolua_function(tolua_S,"invert",tolua_NeoGame_irr_core_vector3di_invert00);
     tolua_function(tolua_S,"rotateXZBy",tolua_NeoGame_irr_core_vector3di_rotateXZBy00);
     tolua_function(tolua_S,"rotateXZBy",tolua_NeoGame_irr_core_vector3di_rotateXZBy01);
     tolua_function(tolua_S,"rotateXYBy",tolua_NeoGame_irr_core_vector3di_rotateXYBy00);
     tolua_function(tolua_S,"rotateXYBy",tolua_NeoGame_irr_core_vector3di_rotateXYBy01);
     tolua_function(tolua_S,"rotateYZBy",tolua_NeoGame_irr_core_vector3di_rotateYZBy00);
     tolua_function(tolua_S,"rotateYZBy",tolua_NeoGame_irr_core_vector3di_rotateYZBy01);
     tolua_function(tolua_S,"getInterpolated",tolua_NeoGame_irr_core_vector3di_getInterpolated00);
     tolua_function(tolua_S,"getInterpolated_quadratic",tolua_NeoGame_irr_core_vector3di_getInterpolated_quadratic00);
     tolua_function(tolua_S,"interpolate",tolua_NeoGame_irr_core_vector3di_interpolate00);
     tolua_function(tolua_S,"getHorizontalAngle",tolua_NeoGame_irr_core_vector3di_getHorizontalAngle00);
     tolua_function(tolua_S,"getSphericalCoordinateAngles",tolua_NeoGame_irr_core_vector3di_getSphericalCoordinateAngles00);
     tolua_function(tolua_S,"rotationToDirection",tolua_NeoGame_irr_core_vector3di_rotationToDirection00);
     tolua_function(tolua_S,"rotationToDirection",tolua_NeoGame_irr_core_vector3di_rotationToDirection01);
     tolua_variable(tolua_S,"X",tolua_get_irr__core__vector3d_int__X,tolua_set_irr__core__vector3d_int__X);
     tolua_variable(tolua_S,"Y",tolua_get_irr__core__vector3d_int__Y,tolua_set_irr__core__vector3d_int__Y);
     tolua_variable(tolua_S,"Z",tolua_get_irr__core__vector3d_int__Z,tolua_set_irr__core__vector3d_int__Z);
    tolua_endmodule(tolua_S);
    #ifdef __cplusplus
    tolua_cclass(tolua_S,"vector3df","irr::core::vector3d<float>","",tolua_collect_irr__core__vector3d_float_);
    #else
    tolua_cclass(tolua_S,"vector3df","irr::core::vector3d<float>","",NULL);
    #endif
    tolua_beginmodule(tolua_S,"vector3df");
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_vector3df_new00);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_vector3df_new00_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_vector3df_new00_local);
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_vector3df_new01);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_vector3df_new01_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_vector3df_new01_local);
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_vector3df_new02);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_vector3df_new02_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_vector3df_new02_local);
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_vector3df_new03);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_vector3df_new03_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_vector3df_new03_local);
     tolua_function(tolua_S,".sub",tolua_NeoGame_irr_core_vector3df__sub00);
     tolua_function(tolua_S,".add",tolua_NeoGame_irr_core_vector3df__add00);
     tolua_function(tolua_S,".add",tolua_NeoGame_irr_core_vector3df__add01);
     tolua_function(tolua_S,".sub",tolua_NeoGame_irr_core_vector3df__sub01);
     tolua_function(tolua_S,".sub",tolua_NeoGame_irr_core_vector3df__sub02);
     tolua_function(tolua_S,".mul",tolua_NeoGame_irr_core_vector3df__mul00);
     tolua_function(tolua_S,".mul",tolua_NeoGame_irr_core_vector3df__mul01);
     tolua_function(tolua_S,".div",tolua_NeoGame_irr_core_vector3df__div00);
     tolua_function(tolua_S,".div",tolua_NeoGame_irr_core_vector3df__div01);
     tolua_function(tolua_S,".le",tolua_NeoGame_irr_core_vector3df__le00);
     tolua_function(tolua_S,".lt",tolua_NeoGame_irr_core_vector3df__lt00);
     tolua_function(tolua_S,".eq",tolua_NeoGame_irr_core_vector3df__eq00);
     tolua_function(tolua_S,"equals",tolua_NeoGame_irr_core_vector3df_equals00);
     tolua_function(tolua_S,"equals",tolua_NeoGame_irr_core_vector3df_equals01);
     tolua_function(tolua_S,"set",tolua_NeoGame_irr_core_vector3df_set00);
     tolua_function(tolua_S,"set",tolua_NeoGame_irr_core_vector3df_set01);
     tolua_function(tolua_S,"getLength",tolua_NeoGame_irr_core_vector3df_getLength00);
     tolua_function(tolua_S,"getLengthSQ",tolua_NeoGame_irr_core_vector3df_getLengthSQ00);
     tolua_function(tolua_S,"dotProduct",tolua_NeoGame_irr_core_vector3df_dotProduct00);
     tolua_function(tolua_S,"getDistanceFrom",tolua_NeoGame_irr_core_vector3df_getDistanceFrom00);
     tolua_function(tolua_S,"getDistanceFromSQ",tolua_NeoGame_irr_core_vector3df_getDistanceFromSQ00);
     tolua_function(tolua_S,"crossProduct",tolua_NeoGame_irr_core_vector3df_crossProduct00);
     tolua_function(tolua_S,"isBetweenPoints",tolua_NeoGame_irr_core_vector3df_isBetweenPoints00);
     tolua_function(tolua_S,"normalize",tolua_NeoGame_irr_core_vector3df_normalize00);
     tolua_function(tolua_S,"setLength",tolua_NeoGame_irr_core_vector3df_setLength00);
     tolua_function(tolua_S,"invert",tolua_NeoGame_irr_core_vector3df_invert00);
     tolua_function(tolua_S,"rotateXZBy",tolua_NeoGame_irr_core_vector3df_rotateXZBy00);
     tolua_function(tolua_S,"rotateXZBy",tolua_NeoGame_irr_core_vector3df_rotateXZBy01);
     tolua_function(tolua_S,"rotateXYBy",tolua_NeoGame_irr_core_vector3df_rotateXYBy00);
     tolua_function(tolua_S,"rotateXYBy",tolua_NeoGame_irr_core_vector3df_rotateXYBy01);
     tolua_function(tolua_S,"rotateYZBy",tolua_NeoGame_irr_core_vector3df_rotateYZBy00);
     tolua_function(tolua_S,"rotateYZBy",tolua_NeoGame_irr_core_vector3df_rotateYZBy01);
     tolua_function(tolua_S,"getInterpolated",tolua_NeoGame_irr_core_vector3df_getInterpolated00);
     tolua_function(tolua_S,"getInterpolated_quadratic",tolua_NeoGame_irr_core_vector3df_getInterpolated_quadratic00);
     tolua_function(tolua_S,"interpolate",tolua_NeoGame_irr_core_vector3df_interpolate00);
     tolua_function(tolua_S,"getHorizontalAngle",tolua_NeoGame_irr_core_vector3df_getHorizontalAngle00);
     tolua_function(tolua_S,"getSphericalCoordinateAngles",tolua_NeoGame_irr_core_vector3df_getSphericalCoordinateAngles00);
     tolua_function(tolua_S,"rotationToDirection",tolua_NeoGame_irr_core_vector3df_rotationToDirection00);
     tolua_function(tolua_S,"rotationToDirection",tolua_NeoGame_irr_core_vector3df_rotationToDirection01);
     tolua_variable(tolua_S,"X",tolua_get_irr__core__vector3d_float__X,tolua_set_irr__core__vector3d_float__X);
     tolua_variable(tolua_S,"Y",tolua_get_irr__core__vector3d_float__Y,tolua_set_irr__core__vector3d_float__Y);
     tolua_variable(tolua_S,"Z",tolua_get_irr__core__vector3d_float__Z,tolua_set_irr__core__vector3d_float__Z);
    tolua_endmodule(tolua_S);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_module(tolua_S,"irr",0);
  tolua_beginmodule(tolua_S,"irr");
   tolua_module(tolua_S,"core",0);
   tolua_beginmodule(tolua_S,"core");
    #ifdef __cplusplus
    tolua_cclass(tolua_S,"vector2di","irr::core::vector2d<int>","",tolua_collect_irr__core__vector2d_int_);
    #else
    tolua_cclass(tolua_S,"vector2di","irr::core::vector2d<int>","",NULL);
    #endif
    tolua_beginmodule(tolua_S,"vector2di");
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_vector2di_new00);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_vector2di_new00_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_vector2di_new00_local);
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_vector2di_new01);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_vector2di_new01_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_vector2di_new01_local);
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_vector2di_new02);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_vector2di_new02_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_vector2di_new02_local);
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_vector2di_new03);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_vector2di_new03_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_vector2di_new03_local);
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_vector2di_new04);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_vector2di_new04_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_vector2di_new04_local);
     tolua_function(tolua_S,".sub",tolua_NeoGame_irr_core_vector2di__sub00);
     tolua_function(tolua_S,".add",tolua_NeoGame_irr_core_vector2di__add00);
     tolua_function(tolua_S,".add",tolua_NeoGame_irr_core_vector2di__add01);
     tolua_function(tolua_S,".add",tolua_NeoGame_irr_core_vector2di__add02);
     tolua_function(tolua_S,".sub",tolua_NeoGame_irr_core_vector2di__sub01);
     tolua_function(tolua_S,".sub",tolua_NeoGame_irr_core_vector2di__sub02);
     tolua_function(tolua_S,".sub",tolua_NeoGame_irr_core_vector2di__sub03);
     tolua_function(tolua_S,".mul",tolua_NeoGame_irr_core_vector2di__mul00);
     tolua_function(tolua_S,".mul",tolua_NeoGame_irr_core_vector2di__mul01);
     tolua_function(tolua_S,".div",tolua_NeoGame_irr_core_vector2di__div00);
     tolua_function(tolua_S,".div",tolua_NeoGame_irr_core_vector2di__div01);
     tolua_function(tolua_S,".le",tolua_NeoGame_irr_core_vector2di__le00);
     tolua_function(tolua_S,".lt",tolua_NeoGame_irr_core_vector2di__lt00);
     tolua_function(tolua_S,".eq",tolua_NeoGame_irr_core_vector2di__eq00);
     tolua_function(tolua_S,"equals",tolua_NeoGame_irr_core_vector2di_equals00);
     tolua_function(tolua_S,"set",tolua_NeoGame_irr_core_vector2di_set00);
     tolua_function(tolua_S,"set",tolua_NeoGame_irr_core_vector2di_set01);
     tolua_function(tolua_S,"getLength",tolua_NeoGame_irr_core_vector2di_getLength00);
     tolua_function(tolua_S,"getLengthSQ",tolua_NeoGame_irr_core_vector2di_getLengthSQ00);
     tolua_function(tolua_S,"dotProduct",tolua_NeoGame_irr_core_vector2di_dotProduct00);
     tolua_function(tolua_S,"getDistanceFrom",tolua_NeoGame_irr_core_vector2di_getDistanceFrom00);
     tolua_function(tolua_S,"getDistanceFromSQ",tolua_NeoGame_irr_core_vector2di_getDistanceFromSQ00);
     tolua_function(tolua_S,"rotateBy",tolua_NeoGame_irr_core_vector2di_rotateBy00);
     tolua_function(tolua_S,"rotateBy",tolua_NeoGame_irr_core_vector2di_rotateBy01);
     tolua_function(tolua_S,"normalize",tolua_NeoGame_irr_core_vector2di_normalize00);
     tolua_function(tolua_S,"getAngleTrig",tolua_NeoGame_irr_core_vector2di_getAngleTrig00);
     tolua_function(tolua_S,"getAngle",tolua_NeoGame_irr_core_vector2di_getAngle00);
     tolua_function(tolua_S,"getAngleWith",tolua_NeoGame_irr_core_vector2di_getAngleWith00);
     tolua_function(tolua_S,"isBetweenPoints",tolua_NeoGame_irr_core_vector2di_isBetweenPoints00);
     tolua_function(tolua_S,"getInterpolated",tolua_NeoGame_irr_core_vector2di_getInterpolated00);
     tolua_function(tolua_S,"getInterpolated_quadratic",tolua_NeoGame_irr_core_vector2di_getInterpolated_quadratic00);
     tolua_function(tolua_S,"interpolate",tolua_NeoGame_irr_core_vector2di_interpolate00);
     tolua_variable(tolua_S,"X",tolua_get_irr__core__vector2d_int__X,tolua_set_irr__core__vector2d_int__X);
     tolua_variable(tolua_S,"Y",tolua_get_irr__core__vector2d_int__Y,tolua_set_irr__core__vector2d_int__Y);
    tolua_endmodule(tolua_S);
    #ifdef __cplusplus
    tolua_cclass(tolua_S,"vector2df","irr::core::vector2d<float>","",tolua_collect_irr__core__vector2d_float_);
    #else
    tolua_cclass(tolua_S,"vector2df","irr::core::vector2d<float>","",NULL);
    #endif
    tolua_beginmodule(tolua_S,"vector2df");
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_vector2df_new00);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_vector2df_new00_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_vector2df_new00_local);
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_vector2df_new01);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_vector2df_new01_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_vector2df_new01_local);
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_vector2df_new02);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_vector2df_new02_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_vector2df_new02_local);
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_vector2df_new03);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_vector2df_new03_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_vector2df_new03_local);
     tolua_function(tolua_S,"new",tolua_NeoGame_irr_core_vector2df_new04);
     tolua_function(tolua_S,"new_local",tolua_NeoGame_irr_core_vector2df_new04_local);
     tolua_function(tolua_S,".call",tolua_NeoGame_irr_core_vector2df_new04_local);
     tolua_function(tolua_S,".sub",tolua_NeoGame_irr_core_vector2df__sub00);
     tolua_function(tolua_S,".add",tolua_NeoGame_irr_core_vector2df__add00);
     tolua_function(tolua_S,".add",tolua_NeoGame_irr_core_vector2df__add01);
     tolua_function(tolua_S,".add",tolua_NeoGame_irr_core_vector2df__add02);
     tolua_function(tolua_S,".sub",tolua_NeoGame_irr_core_vector2df__sub01);
     tolua_function(tolua_S,".sub",tolua_NeoGame_irr_core_vector2df__sub02);
     tolua_function(tolua_S,".sub",tolua_NeoGame_irr_core_vector2df__sub03);
     tolua_function(tolua_S,".mul",tolua_NeoGame_irr_core_vector2df__mul00);
     tolua_function(tolua_S,".mul",tolua_NeoGame_irr_core_vector2df__mul01);
     tolua_function(tolua_S,".div",tolua_NeoGame_irr_core_vector2df__div00);
     tolua_function(tolua_S,".div",tolua_NeoGame_irr_core_vector2df__div01);
     tolua_function(tolua_S,".le",tolua_NeoGame_irr_core_vector2df__le00);
     tolua_function(tolua_S,".lt",tolua_NeoGame_irr_core_vector2df__lt00);
     tolua_function(tolua_S,".eq",tolua_NeoGame_irr_core_vector2df__eq00);
     tolua_function(tolua_S,"equals",tolua_NeoGame_irr_core_vector2df_equals00);
     tolua_function(tolua_S,"set",tolua_NeoGame_irr_core_vector2df_set00);
     tolua_function(tolua_S,"set",tolua_NeoGame_irr_core_vector2df_set01);
     tolua_function(tolua_S,"getLength",tolua_NeoGame_irr_core_vector2df_getLength00);
     tolua_function(tolua_S,"getLengthSQ",tolua_NeoGame_irr_core_vector2df_getLengthSQ00);
     tolua_function(tolua_S,"dotProduct",tolua_NeoGame_irr_core_vector2df_dotProduct00);
     tolua_function(tolua_S,"getDistanceFrom",tolua_NeoGame_irr_core_vector2df_getDistanceFrom00);
     tolua_function(tolua_S,"getDistanceFromSQ",tolua_NeoGame_irr_core_vector2df_getDistanceFromSQ00);
     tolua_function(tolua_S,"rotateBy",tolua_NeoGame_irr_core_vector2df_rotateBy00);
     tolua_function(tolua_S,"rotateBy",tolua_NeoGame_irr_core_vector2df_rotateBy01);
     tolua_function(tolua_S,"normalize",tolua_NeoGame_irr_core_vector2df_normalize00);
     tolua_function(tolua_S,"getAngleTrig",tolua_NeoGame_irr_core_vector2df_getAngleTrig00);
     tolua_function(tolua_S,"getAngle",tolua_NeoGame_irr_core_vector2df_getAngle00);
     tolua_function(tolua_S,"getAngleWith",tolua_NeoGame_irr_core_vector2df_getAngleWith00);
     tolua_function(tolua_S,"isBetweenPoints",tolua_NeoGame_irr_core_vector2df_isBetweenPoints00);
     tolua_function(tolua_S,"getInterpolated",tolua_NeoGame_irr_core_vector2df_getInterpolated00);
     tolua_function(tolua_S,"getInterpolated_quadratic",tolua_NeoGame_irr_core_vector2df_getInterpolated_quadratic00);
     tolua_function(tolua_S,"interpolate",tolua_NeoGame_irr_core_vector2df_interpolate00);
     tolua_variable(tolua_S,"X",tolua_get_irr__core__vector2d_float__X,tolua_set_irr__core__vector2d_float__X);
     tolua_variable(tolua_S,"Y",tolua_get_irr__core__vector2d_float__Y,tolua_set_irr__core__vector2d_float__Y);
    tolua_endmodule(tolua_S);
   tolua_endmodule(tolua_S);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"RigidBody","RigidBody","",NULL);
  tolua_beginmodule(tolua_S,"RigidBody");
   tolua_function(tolua_S,"applyGravity",tolua_NeoGame_RigidBody_applyGravity00);
   tolua_function(tolua_S,"setGravity",tolua_NeoGame_RigidBody_setGravity00);
   tolua_function(tolua_S,"getGravity",tolua_NeoGame_RigidBody_getGravity00);
   tolua_function(tolua_S,"setDamping",tolua_NeoGame_RigidBody_setDamping00);
   tolua_function(tolua_S,"getLinearDamping",tolua_NeoGame_RigidBody_getLinearDamping00);
   tolua_function(tolua_S,"getAngularDamping",tolua_NeoGame_RigidBody_getAngularDamping00);
   tolua_function(tolua_S,"getLinearSleepingThreshold",tolua_NeoGame_RigidBody_getLinearSleepingThreshold00);
   tolua_function(tolua_S,"getAngularSleepingThreshold",tolua_NeoGame_RigidBody_getAngularSleepingThreshold00);
   tolua_function(tolua_S,"applyDamping",tolua_NeoGame_RigidBody_applyDamping00);
   tolua_function(tolua_S,"setMassProps",tolua_NeoGame_RigidBody_setMassProps00);
   tolua_function(tolua_S,"getLinearFactor",tolua_NeoGame_RigidBody_getLinearFactor00);
   tolua_function(tolua_S,"setLinearFactor",tolua_NeoGame_RigidBody_setLinearFactor00);
   tolua_function(tolua_S,"getInvMass",tolua_NeoGame_RigidBody_getInvMass00);
   tolua_function(tolua_S,"integrateVelocities",tolua_NeoGame_RigidBody_integrateVelocities00);
   tolua_function(tolua_S,"setCenterOfMassTransform",tolua_NeoGame_RigidBody_setCenterOfMassTransform00);
   tolua_function(tolua_S,"applyCentralForce",tolua_NeoGame_RigidBody_applyCentralForce00);
   tolua_function(tolua_S,"getTotalForce",tolua_NeoGame_RigidBody_getTotalForce00);
   tolua_function(tolua_S,"getTotalTorque",tolua_NeoGame_RigidBody_getTotalTorque00);
   tolua_function(tolua_S,"getInvInertiaDiagLocal",tolua_NeoGame_RigidBody_getInvInertiaDiagLocal00);
   tolua_function(tolua_S,"setInvInertiaDiagLocal",tolua_NeoGame_RigidBody_setInvInertiaDiagLocal00);
   tolua_function(tolua_S,"setSleepingThresholds",tolua_NeoGame_RigidBody_setSleepingThresholds00);
   tolua_function(tolua_S,"applyTorque",tolua_NeoGame_RigidBody_applyTorque00);
   tolua_function(tolua_S,"applyForce",tolua_NeoGame_RigidBody_applyForce00);
   tolua_function(tolua_S,"applyCentralImpulse",tolua_NeoGame_RigidBody_applyCentralImpulse00);
   tolua_function(tolua_S,"applyTorqueImpulse",tolua_NeoGame_RigidBody_applyTorqueImpulse00);
   tolua_function(tolua_S,"applyImpulse",tolua_NeoGame_RigidBody_applyImpulse00);
   tolua_function(tolua_S,"clearForces",tolua_NeoGame_RigidBody_clearForces00);
   tolua_function(tolua_S,"updateInertiaTensor",tolua_NeoGame_RigidBody_updateInertiaTensor00);
   tolua_function(tolua_S,"getCenterOfMassPosition",tolua_NeoGame_RigidBody_getCenterOfMassPosition00);
   tolua_function(tolua_S,"getOrientation",tolua_NeoGame_RigidBody_getOrientation00);
   tolua_function(tolua_S,"getCenterOfMassTransform",tolua_NeoGame_RigidBody_getCenterOfMassTransform00);
   tolua_function(tolua_S,"getLinearVelocity",tolua_NeoGame_RigidBody_getLinearVelocity00);
   tolua_function(tolua_S,"getAngularVelocity",tolua_NeoGame_RigidBody_getAngularVelocity00);
   tolua_function(tolua_S,"setLinearVelocity",tolua_NeoGame_RigidBody_setLinearVelocity00);
   tolua_function(tolua_S,"setAngularVelocity",tolua_NeoGame_RigidBody_setAngularVelocity00);
   tolua_function(tolua_S,"getVelocityInLocalPoint",tolua_NeoGame_RigidBody_getVelocityInLocalPoint00);
   tolua_function(tolua_S,"translate",tolua_NeoGame_RigidBody_translate00);
   tolua_function(tolua_S,"getAabb",tolua_NeoGame_RigidBody_getAabb00);
   tolua_function(tolua_S,"computeImpulseDenominator",tolua_NeoGame_RigidBody_computeImpulseDenominator00);
   tolua_function(tolua_S,"computeAngularImpulseDenominator",tolua_NeoGame_RigidBody_computeAngularImpulseDenominator00);
   tolua_function(tolua_S,"updateDeactivation",tolua_NeoGame_RigidBody_updateDeactivation00);
   tolua_function(tolua_S,"setAngularFactor",tolua_NeoGame_RigidBody_setAngularFactor00);
   tolua_function(tolua_S,"setAngularFactor",tolua_NeoGame_RigidBody_setAngularFactor01);
   tolua_function(tolua_S,"getAngularFactor",tolua_NeoGame_RigidBody_getAngularFactor00);
   tolua_function(tolua_S,"setPosition",tolua_NeoGame_RigidBody_setPosition00);
   tolua_function(tolua_S,"setRotation",tolua_NeoGame_RigidBody_setRotation00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"HingeJoint","HingeJoint","",NULL);
  tolua_beginmodule(tolua_S,"HingeJoint");
   tolua_function(tolua_S,"getRbodyA",tolua_NeoGame_HingeJoint_getRbodyA00);
   tolua_function(tolua_S,"getRbodyB",tolua_NeoGame_HingeJoint_getRbodyB00);
   tolua_function(tolua_S,"setAngularOnly",tolua_NeoGame_HingeJoint_setAngularOnly00);
   tolua_function(tolua_S,"enableAngularMotor",tolua_NeoGame_HingeJoint_enableAngularMotor00);
   tolua_function(tolua_S,"enableMotor",tolua_NeoGame_HingeJoint_enableMotor00);
   tolua_function(tolua_S,"setMaxMotorImpulse",tolua_NeoGame_HingeJoint_setMaxMotorImpulse00);
   tolua_function(tolua_S,"setMotorTarget",tolua_NeoGame_HingeJoint_setMotorTarget00);
   tolua_function(tolua_S,"setLimit",tolua_NeoGame_HingeJoint_setLimit00);
   tolua_function(tolua_S,"setAxis",tolua_NeoGame_HingeJoint_setAxis00);
   tolua_function(tolua_S,"hasLimit",tolua_NeoGame_HingeJoint_hasLimit00);
   tolua_function(tolua_S,"getHingeAngle",tolua_NeoGame_HingeJoint_getHingeAngle00);
   tolua_function(tolua_S,"getAngularOnly",tolua_NeoGame_HingeJoint_getAngularOnly00);
   tolua_function(tolua_S,"getEnableAngularMotor",tolua_NeoGame_HingeJoint_getEnableAngularMotor00);
   tolua_function(tolua_S,"getMotorTargetVelosity",tolua_NeoGame_HingeJoint_getMotorTargetVelosity00);
   tolua_function(tolua_S,"getMaxMotorImpulse",tolua_NeoGame_HingeJoint_getMaxMotorImpulse00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"Component","Component","",NULL);
  tolua_beginmodule(tolua_S,"Component");
   tolua_function(tolua_S,"isEnabled",tolua_NeoGame_Component_isEnabled00);
   tolua_function(tolua_S,"setEnabled",tolua_NeoGame_Component_setEnabled00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"NeoTrigger","NeoTrigger","",NULL);
  tolua_beginmodule(tolua_S,"NeoTrigger");
   tolua_function(tolua_S,"create",tolua_NeoGame_NeoTrigger_create00);
   tolua_function(tolua_S,"drop",tolua_NeoGame_NeoTrigger_drop00);
   tolua_function(tolua_S,"isAlive",tolua_NeoGame_NeoTrigger_isAlive00);
   tolua_function(tolua_S,"setAlive",tolua_NeoGame_NeoTrigger_setAlive00);
   tolua_function(tolua_S,"setDisabled",tolua_NeoGame_NeoTrigger_setDisabled00);
   tolua_function(tolua_S,"isDisabled",tolua_NeoGame_NeoTrigger_isDisabled00);
   tolua_function(tolua_S,"Reset",tolua_NeoGame_NeoTrigger_Reset00);
   tolua_function(tolua_S,"setTriggerFunction",tolua_NeoGame_NeoTrigger_setTriggerFunction00);
   tolua_function(tolua_S,"addTriggerCondition",tolua_NeoGame_NeoTrigger_addTriggerCondition00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"NeoGameLogic","NeoGameLogic","",NULL);
  tolua_beginmodule(tolua_S,"NeoGameLogic");
   tolua_function(tolua_S,"GetInstance",tolua_NeoGame_NeoGameLogic_GetInstance00);
   tolua_function(tolua_S,"Destroy",tolua_NeoGame_NeoGameLogic_Destroy00);
   tolua_function(tolua_S,"Update",tolua_NeoGame_NeoGameLogic_Update00);
   tolua_function(tolua_S,"RegisterTrigger",tolua_NeoGame_NeoGameLogic_RegisterTrigger00);
   tolua_function(tolua_S,"RemoveTrigger",tolua_NeoGame_NeoGameLogic_RemoveTrigger00);
   tolua_function(tolua_S,"ResetAllTriggers",tolua_NeoGame_NeoGameLogic_ResetAllTriggers00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"NeoEvent","NeoEvent","",NULL);
  tolua_beginmodule(tolua_S,"NeoEvent");
   tolua_function(tolua_S,"getData",tolua_NeoGame_NeoEvent_getData00);
   tolua_function(tolua_S,"getTriggerId",tolua_NeoGame_NeoEvent_getTriggerId00);
  tolua_endmodule(tolua_S);

  { /* begin embedded lua code */
   int top = lua_gettop(tolua_S);
   static const unsigned char B[] = {
    10,102,117,110, 99,116,105,111,110, 32,116,111, 78,101,111,
     69,118,101,110,116, 40,101, 41, 10,114,101,116,117,114,110,
     32,116,111,108,117, 97, 46, 99, 97,115,116, 40,101, 44, 34,
     99,111,110,115,116, 32, 78,101,111, 69,118,101,110,116, 34,
     41, 10,101,110,100, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
     45, 45, 45, 45, 45,32
   };
   tolua_dobuffer(tolua_S,(char*)B,sizeof(B),"tolua: embedded Lua code 1");
   lua_settop(tolua_S, top);
  } /* end of embedded lua code */


  { /* begin embedded lua code */
   int top = lua_gettop(tolua_S);
   static const unsigned char B[] = {
    10, 98,105,116, 61,123,125, 10,102,117,110, 99,116,105,111,
    110, 32, 98,105,116, 46, 98,110,111,116, 40, 97, 41, 10,114,
    101,116,117,114,110, 32, 76,117, 97, 72,101,108,112,101,114,
     58, 66,105,116, 78,111,116, 40, 97, 41, 10,101,110,100, 10,
    102,117,110, 99,116,105,111,110, 32, 98,105,116, 46, 98, 97,
    110,100, 40, 97, 44, 46, 46, 46, 41, 10,114,101,116, 61, 97,
     10,102,111,114, 32,105, 61, 49, 44, 35, 97,114,103, 32,100,
    111, 10,114,101,116, 61, 76,117, 97, 72,101,108,112,101,114,
     58, 66,105,116, 65,110,100, 40,114,101,116, 44, 97,114,103,
     91,105, 93, 41, 10,101,110,100, 10,114,101,116,117,114,110,
     32,114,101,116, 10,101,110,100, 10,102,117,110, 99,116,105,
    111,110, 32, 98,105,116, 46, 98,111,114, 40, 97, 44, 46, 46,
     46, 41, 10,114,101,116, 61, 97, 10,102,111,114, 32,105, 61,
     49, 44, 35, 97,114,103, 32,100,111, 10,114,101,116, 61, 76,
    117, 97, 72,101,108,112,101,114, 58, 66,105,116, 79,114, 40,
    114,101,116, 44, 97,114,103, 91,105, 93, 41, 10,101,110,100,
     10,114,101,116,117,114,110, 32,114,101,116, 10,101,110,100,
     10,102,117,110, 99,116,105,111,110, 32, 98,105,116, 46, 98,
    120,111,114, 40, 97, 44, 46, 46, 46, 41, 10,114,101,116, 61,
     97, 10,102,111,114, 32,105, 61, 49, 44, 35, 97,114,103, 32,
    100,111, 10,114,101,116, 61, 76,117, 97, 72,101,108,112,101,
    114, 58, 66,105,116, 88,111,114, 40,114,101,116, 44, 97,114,
    103, 91,105, 93, 41, 10,101,110,100, 10,114,101,116,117,114,
    110, 32,114,101,116, 10,101,110,100, 10,102,117,110, 99,116,
    105,111,110, 32, 98,105,116, 46,108,115,104,105,102,116, 40,
     97, 44,110, 41, 10,114,101,116,117,114,110, 32, 76,117, 97,
     72,101,108,112,101,114, 58, 66,105,116, 76,115,104,105,102,
    116, 40, 97, 44,110, 41, 10,101,110,100, 10,102,117,110, 99,
    116,105,111,110, 32, 98,105,116, 46,114,115,104,105,102,116,
     40, 97, 44,110, 41, 10,114,101,116,117,114,110, 32, 76,117,
     97, 72,101,108,112,101,114, 58, 66,105,116, 82,115,104,105,
    102,116, 40, 97, 44,110, 41, 10,101,110,100, 45, 45, 45, 45,
    32
   };
   tolua_dobuffer(tolua_S,(char*)B,sizeof(B),"tolua: embedded Lua code 2");
   lua_settop(tolua_S, top);
  } /* end of embedded lua code */

  tolua_cclass(tolua_S,"GameObject","GameObject","",NULL);
  tolua_beginmodule(tolua_S,"GameObject");
   tolua_function(tolua_S,"getComponent",tolua_NeoGame_GameObject_getComponent00);
   tolua_function(tolua_S,"AddComponent",tolua_NeoGame_GameObject_AddComponent00);
   tolua_function(tolua_S,"RemoveComponent",tolua_NeoGame_GameObject_RemoveComponent00);
   tolua_function(tolua_S,"GetSceneNode",tolua_NeoGame_GameObject_GetSceneNode00);
   tolua_function(tolua_S,"BindSceneNode",tolua_NeoGame_GameObject_BindSceneNode00);
   tolua_function(tolua_S,"SetParent",tolua_NeoGame_GameObject_SetParent00);
   tolua_function(tolua_S,"GetParent",tolua_NeoGame_GameObject_GetParent00);
   tolua_function(tolua_S,"AddChild",tolua_NeoGame_GameObject_AddChild00);
   tolua_function(tolua_S,"RemoveChild",tolua_NeoGame_GameObject_RemoveChild00);
   tolua_function(tolua_S,"RemoveChildren",tolua_NeoGame_GameObject_RemoveChildren00);
   tolua_function(tolua_S,"DestoryChild",tolua_NeoGame_GameObject_DestoryChild00);
   tolua_function(tolua_S,"DestroyChidren",tolua_NeoGame_GameObject_DestroyChidren00);
   tolua_function(tolua_S,"SetPostion",tolua_NeoGame_GameObject_SetPostion00);
   tolua_function(tolua_S,"SetRotation",tolua_NeoGame_GameObject_SetRotation00);
   tolua_function(tolua_S,"GetPostion",tolua_NeoGame_GameObject_GetPostion00);
   tolua_function(tolua_S,"GetRotation",tolua_NeoGame_GameObject_GetRotation00);
   tolua_function(tolua_S,"getId",tolua_NeoGame_GameObject_getId00);
   tolua_function(tolua_S,"setId",tolua_NeoGame_GameObject_setId00);
   tolua_function(tolua_S,"isActive",tolua_NeoGame_GameObject_isActive00);
   tolua_function(tolua_S,"setActive",tolua_NeoGame_GameObject_setActive00);
   tolua_function(tolua_S,"getRigidBody",tolua_NeoGame_GameObject_getRigidBody00);
   tolua_function(tolua_S,"AddRigidBody",tolua_NeoGame_GameObject_AddRigidBody00);
   tolua_function(tolua_S,"AddRigidBody",tolua_NeoGame_GameObject_AddRigidBody01);
   tolua_function(tolua_S,"getLuaIndentifier",tolua_NeoGame_GameObject_getLuaIndentifier00);
   tolua_function(tolua_S,"setLuaIndentifier",tolua_NeoGame_GameObject_setLuaIndentifier00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"NeoGraphics","NeoGraphics","",NULL);
  tolua_beginmodule(tolua_S,"NeoGraphics");
   tolua_function(tolua_S,"Update",tolua_NeoGame_NeoGraphics_Update00);
   tolua_function(tolua_S,"getInstance",tolua_NeoGame_NeoGraphics_getInstance00);
   tolua_function(tolua_S,"getSfxManager",tolua_NeoGame_NeoGraphics_getSfxManager00);
   tolua_function(tolua_S,"GetAvailableResolution",tolua_NeoGame_NeoGraphics_GetAvailableResolution00);
   tolua_function(tolua_S,"setWindowCaption",tolua_NeoGame_NeoGraphics_setWindowCaption00);
   tolua_function(tolua_S,"RenderUI",tolua_NeoGame_NeoGraphics_RenderUI00);
   tolua_function(tolua_S,"getMesh",tolua_NeoGame_NeoGraphics_getMesh00);
   tolua_function(tolua_S,"AddAnimatedMeshSceneNode",tolua_NeoGame_NeoGraphics_AddAnimatedMeshSceneNode00);
   tolua_function(tolua_S,"AddAnimatedMeshSceneNode",tolua_NeoGame_NeoGraphics_AddAnimatedMeshSceneNode01);
   tolua_function(tolua_S,"AddAnimatedMeshSceneNode",tolua_NeoGame_NeoGraphics_AddAnimatedMeshSceneNode02);
   tolua_function(tolua_S,"AddAnimatedMeshSceneNode",tolua_NeoGame_NeoGraphics_AddAnimatedMeshSceneNode03);
   tolua_function(tolua_S,"AddMeshSceneNode",tolua_NeoGame_NeoGraphics_AddMeshSceneNode00);
   tolua_function(tolua_S,"AddMeshSceneNode",tolua_NeoGame_NeoGraphics_AddMeshSceneNode01);
   tolua_function(tolua_S,"AddMeshSceneNode",tolua_NeoGame_NeoGraphics_AddMeshSceneNode02);
   tolua_function(tolua_S,"AddMeshSceneNode",tolua_NeoGame_NeoGraphics_AddMeshSceneNode03);
   tolua_function(tolua_S,"AddCameraSceneNode",tolua_NeoGame_NeoGraphics_AddCameraSceneNode00);
   tolua_function(tolua_S,"AddCameraSceneNode",tolua_NeoGame_NeoGraphics_AddCameraSceneNode01);
   tolua_function(tolua_S,"AddCameraSceneNode",tolua_NeoGame_NeoGraphics_AddCameraSceneNode02);
   tolua_function(tolua_S,"AddCameraSceneNodeMaya",tolua_NeoGame_NeoGraphics_AddCameraSceneNodeMaya00);
   tolua_function(tolua_S,"AddCameraSceneNodeFPS",tolua_NeoGame_NeoGraphics_AddCameraSceneNodeFPS00);
   tolua_function(tolua_S,"AddCubeSceneNode",tolua_NeoGame_NeoGraphics_AddCubeSceneNode00);
   tolua_function(tolua_S,"AddCubeSceneNode",tolua_NeoGame_NeoGraphics_AddCubeSceneNode01);
   tolua_function(tolua_S,"AddCubeSceneNode",tolua_NeoGame_NeoGraphics_AddCubeSceneNode02);
   tolua_function(tolua_S,"AddCubeSceneNode",tolua_NeoGame_NeoGraphics_AddCubeSceneNode03);
   tolua_function(tolua_S,"AddSphereSceneNode",tolua_NeoGame_NeoGraphics_AddSphereSceneNode00);
   tolua_function(tolua_S,"AddSphereSceneNode",tolua_NeoGame_NeoGraphics_AddSphereSceneNode01);
   tolua_function(tolua_S,"AddSphereSceneNode",tolua_NeoGame_NeoGraphics_AddSphereSceneNode02);
   tolua_function(tolua_S,"AddSphereSceneNode",tolua_NeoGame_NeoGraphics_AddSphereSceneNode03);
   tolua_function(tolua_S,"AddLightSceneNode",tolua_NeoGame_NeoGraphics_AddLightSceneNode00);
   tolua_function(tolua_S,"AddLightSceneNode",tolua_NeoGame_NeoGraphics_AddLightSceneNode01);
   tolua_function(tolua_S,"AddLightSceneNode",tolua_NeoGame_NeoGraphics_AddLightSceneNode02);
   tolua_function(tolua_S,"AddBillboardSceneNode",tolua_NeoGame_NeoGraphics_AddBillboardSceneNode00);
   tolua_function(tolua_S,"AddBillboardSceneNode",tolua_NeoGame_NeoGraphics_AddBillboardSceneNode01);
   tolua_function(tolua_S,"AddBillboardSceneNode",tolua_NeoGame_NeoGraphics_AddBillboardSceneNode02);
   tolua_function(tolua_S,"AddOctreeSceneNode",tolua_NeoGame_NeoGraphics_AddOctreeSceneNode00);
   tolua_function(tolua_S,"AddOctreeSceneNode",tolua_NeoGame_NeoGraphics_AddOctreeSceneNode01);
   tolua_function(tolua_S,"AddSkyDomeSceneNode",tolua_NeoGame_NeoGraphics_AddSkyDomeSceneNode00);
   tolua_function(tolua_S,"AddParticleSystemSceneNode",tolua_NeoGame_NeoGraphics_AddParticleSystemSceneNode00);
   tolua_function(tolua_S,"AddParticleSystemSceneNode",tolua_NeoGame_NeoGraphics_AddParticleSystemSceneNode01);
   tolua_function(tolua_S,"AddParticleSystemSceneNode",tolua_NeoGame_NeoGraphics_AddParticleSystemSceneNode02);
   tolua_function(tolua_S,"AddParticleSystemSceneNode",tolua_NeoGame_NeoGraphics_AddParticleSystemSceneNode03);
   tolua_function(tolua_S,"AddEmptySceneNode",tolua_NeoGame_NeoGraphics_AddEmptySceneNode00);
   tolua_function(tolua_S,"AddDummyTransformationSceneNode",tolua_NeoGame_NeoGraphics_AddDummyTransformationSceneNode00);
   tolua_function(tolua_S,"GetActiveCamera",tolua_NeoGame_NeoGraphics_GetActiveCamera00);
   tolua_function(tolua_S,"SetActiveCamera",tolua_NeoGame_NeoGraphics_SetActiveCamera00);
   tolua_function(tolua_S,"SetAmbientLight",tolua_NeoGame_NeoGraphics_SetAmbientLight00);
   tolua_function(tolua_S,"loadScene",tolua_NeoGame_NeoGraphics_loadScene00);
   tolua_function(tolua_S,"getFps",tolua_NeoGame_NeoGraphics_getFps00);
   tolua_function(tolua_S,"getTextFromOSClipboard",tolua_NeoGame_NeoGraphics_getTextFromOSClipboard00);
   tolua_function(tolua_S,"setAppClipboardString",tolua_NeoGame_NeoGraphics_setAppClipboardString00);
   tolua_function(tolua_S,"getAppClipboardString",tolua_NeoGame_NeoGraphics_getAppClipboardString00);
   tolua_function(tolua_S,"setOSClipboardText",tolua_NeoGame_NeoGraphics_setOSClipboardText00);
   tolua_function(tolua_S,"getOperatingSystemVersion",tolua_NeoGame_NeoGraphics_getOperatingSystemVersion00);
   tolua_function(tolua_S,"getMeshTexturePath",tolua_NeoGame_NeoGraphics_getMeshTexturePath00);
   tolua_function(tolua_S,"CleanUp",tolua_NeoGame_NeoGraphics_CleanUp00);
   tolua_function(tolua_S,"LoadTexture",tolua_NeoGame_NeoGraphics_LoadTexture00);
   tolua_function(tolua_S,"UnloadTexture",tolua_NeoGame_NeoGraphics_UnloadTexture00);
   tolua_function(tolua_S,"GetAttachedGameObject",tolua_NeoGame_NeoGraphics_GetAttachedGameObject00);
   tolua_function(tolua_S,"BindSceneNodeToGameObject",tolua_NeoGame_NeoGraphics_BindSceneNodeToGameObject00);
   tolua_function(tolua_S,"RemoveSceneNode",tolua_NeoGame_NeoGraphics_RemoveSceneNode00);
   tolua_function(tolua_S,"ClearAllNodes",tolua_NeoGame_NeoGraphics_ClearAllNodes00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"SfxManager","SfxManager","",NULL);
  tolua_beginmodule(tolua_S,"SfxManager");
   tolua_function(tolua_S,"Init",tolua_NeoGame_SfxManager_Init00);
   tolua_function(tolua_S,"AddSpriteTexture",tolua_NeoGame_SfxManager_AddSpriteTexture00);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"BasicExplosionParams","BasicExplosionParams","",tolua_collect_BasicExplosionParams);
  #else
  tolua_cclass(tolua_S,"BasicExplosionParams","BasicExplosionParams","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"BasicExplosionParams");
   tolua_function(tolua_S,"new",tolua_NeoGame_BasicExplosionParams_new00);
   tolua_function(tolua_S,"new_local",tolua_NeoGame_BasicExplosionParams_new00_local);
   tolua_function(tolua_S,".call",tolua_NeoGame_BasicExplosionParams_new00_local);
   tolua_function(tolua_S,"delete",tolua_NeoGame_BasicExplosionParams_delete00);
   tolua_function(tolua_S,"PushScriptValue",tolua_NeoGame_BasicExplosionParams_PushScriptValue00);
   tolua_function(tolua_S,"ClearScriptValues",tolua_NeoGame_BasicExplosionParams_ClearScriptValues00);
   tolua_function(tolua_S,"SetScriptValueAt",tolua_NeoGame_BasicExplosionParams_SetScriptValueAt00);
   tolua_variable(tolua_S,"fRange",tolua_get_BasicExplosionParams_fRange,tolua_set_BasicExplosionParams_fRange);
   tolua_variable(tolua_S,"fImpulse",tolua_get_BasicExplosionParams_fImpulse,tolua_set_BasicExplosionParams_fImpulse);
   tolua_variable(tolua_S,"bAttenuateByRange",tolua_get_BasicExplosionParams_bAttenuateByRange,tolua_set_BasicExplosionParams_bAttenuateByRange);
   tolua_variable(tolua_S,"nEventID",tolua_get_BasicExplosionParams_nEventID,tolua_set_BasicExplosionParams_nEventID);
   tolua_variable(tolua_S,"origin",tolua_get_BasicExplosionParams_origin,tolua_set_BasicExplosionParams_origin);
  tolua_endmodule(tolua_S);
  #ifdef __cplusplus
  tolua_cclass(tolua_S,"BasicExplosionEffectParams","BasicExplosionEffectParams","",tolua_collect_BasicExplosionEffectParams);
  #else
  tolua_cclass(tolua_S,"BasicExplosionEffectParams","BasicExplosionEffectParams","",NULL);
  #endif
  tolua_beginmodule(tolua_S,"BasicExplosionEffectParams");
   tolua_function(tolua_S,"new",tolua_NeoGame_BasicExplosionEffectParams_new00);
   tolua_function(tolua_S,"new_local",tolua_NeoGame_BasicExplosionEffectParams_new00_local);
   tolua_function(tolua_S,".call",tolua_NeoGame_BasicExplosionEffectParams_new00_local);
   tolua_function(tolua_S,"delete",tolua_NeoGame_BasicExplosionEffectParams_delete00);
   tolua_variable(tolua_S,"origin",tolua_get_BasicExplosionEffectParams_origin,tolua_set_BasicExplosionEffectParams_origin);
   tolua_variable(tolua_S,"rotation",tolua_get_BasicExplosionEffectParams_rotation,tolua_set_BasicExplosionEffectParams_rotation);
   tolua_variable(tolua_S,"fRadius",tolua_get_BasicExplosionEffectParams_fRadius,tolua_set_BasicExplosionEffectParams_fRadius);
   tolua_variable(tolua_S,"material_name_high_speed",tolua_get_BasicExplosionEffectParams_material_name_high_speed,tolua_set_BasicExplosionEffectParams_material_name_high_speed);
   tolua_variable(tolua_S,"material_name_low_speed",tolua_get_BasicExplosionEffectParams_material_name_low_speed,tolua_set_BasicExplosionEffectParams_material_name_low_speed);
   tolua_variable(tolua_S,"start_color_high_speed",tolua_get_BasicExplosionEffectParams_start_color_high_speed,tolua_set_BasicExplosionEffectParams_start_color_high_speed);
   tolua_variable(tolua_S,"end_color_high_speed",tolua_get_BasicExplosionEffectParams_end_color_high_speed,tolua_set_BasicExplosionEffectParams_end_color_high_speed);
   tolua_variable(tolua_S,"start_color_low_speed",tolua_get_BasicExplosionEffectParams_start_color_low_speed,tolua_set_BasicExplosionEffectParams_start_color_low_speed);
   tolua_variable(tolua_S,"end_color_low_speed",tolua_get_BasicExplosionEffectParams_end_color_low_speed,tolua_set_BasicExplosionEffectParams_end_color_low_speed);
   tolua_variable(tolua_S,"shock_wave_color",tolua_get_BasicExplosionEffectParams_shock_wave_color,tolua_set_BasicExplosionEffectParams_shock_wave_color);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"NeoEditor","NeoEditor","",NULL);
  tolua_beginmodule(tolua_S,"NeoEditor");
   tolua_constant(tolua_S,"EDITOR_SELECT",NeoEditor::EDITOR_SELECT);
   tolua_constant(tolua_S,"EDITOR_MOVE",NeoEditor::EDITOR_MOVE);
   tolua_constant(tolua_S,"EDITOR_SCALE",NeoEditor::EDITOR_SCALE);
   tolua_constant(tolua_S,"EDITOR_ROTATE",NeoEditor::EDITOR_ROTATE);
   tolua_function(tolua_S,"getInstance",tolua_NeoGame_NeoEditor_getInstance00);
   tolua_function(tolua_S,"CreateFileOpenDialog",tolua_NeoGame_NeoEditor_CreateFileOpenDialog00);
   tolua_function(tolua_S,"ShowSelectionCursor",tolua_NeoGame_NeoEditor_ShowSelectionCursor00);
   tolua_function(tolua_S,"ShowSelectionCursor",tolua_NeoGame_NeoEditor_ShowSelectionCursor01);
   tolua_function(tolua_S,"setSelectionCursorPosition",tolua_NeoGame_NeoEditor_setSelectionCursorPosition00);
   tolua_function(tolua_S,"getSelectionCursorPosition",tolua_NeoGame_NeoEditor_getSelectionCursorPosition00);
   tolua_function(tolua_S,"setSelectionCursorScale",tolua_NeoGame_NeoEditor_setSelectionCursorScale00);
   tolua_function(tolua_S,"getSelectedSceneNode",tolua_NeoGame_NeoEditor_getSelectedSceneNode00);
   tolua_function(tolua_S,"isSelectionCursor",tolua_NeoGame_NeoEditor_isSelectionCursor00);
   tolua_function(tolua_S,"getSelectedCursorIndex",tolua_NeoGame_NeoEditor_getSelectedCursorIndex00);
   tolua_function(tolua_S,"setSceneNodeTriangleSelector",tolua_NeoGame_NeoEditor_setSceneNodeTriangleSelector00);
   tolua_function(tolua_S,"setMeshNodeColor",tolua_NeoGame_NeoEditor_setMeshNodeColor00);
   tolua_function(tolua_S,"getWorkingDirectory",tolua_NeoGame_NeoEditor_getWorkingDirectory00);
   tolua_function(tolua_S,"getRelativePath",tolua_NeoGame_NeoEditor_getRelativePath00);
   tolua_function(tolua_S,"ChangeWorkingDirectory",tolua_NeoGame_NeoEditor_ChangeWorkingDirectory00);
   tolua_function(tolua_S,"IsFileExists",tolua_NeoGame_NeoEditor_IsFileExists00);
   tolua_function(tolua_S,"Init",tolua_NeoGame_NeoEditor_Init00);
   tolua_function(tolua_S,"CleanUp",tolua_NeoGame_NeoEditor_CleanUp00);
  tolua_endmodule(tolua_S);
  tolua_cclass(tolua_S,"NeoScene","NeoScene","",NULL);
  tolua_beginmodule(tolua_S,"NeoScene");
   tolua_function(tolua_S,"GetInstance",tolua_NeoGame_NeoScene_GetInstance00);
   tolua_function(tolua_S,"Destroy",tolua_NeoGame_NeoScene_Destroy00);
   tolua_function(tolua_S,"Clean",tolua_NeoGame_NeoScene_Clean00);
   tolua_function(tolua_S,"CreateGameObject",tolua_NeoGame_NeoScene_CreateGameObject00);
   tolua_function(tolua_S,"GetGameObject",tolua_NeoGame_NeoScene_GetGameObject00);
   tolua_function(tolua_S,"DestroyGameObject",tolua_NeoGame_NeoScene_DestroyGameObject00);
   tolua_function(tolua_S,"DestroyGameObject",tolua_NeoGame_NeoScene_DestroyGameObject01);
   tolua_function(tolua_S,"CreateExplosion",tolua_NeoGame_NeoScene_CreateExplosion00);
  tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 return 1;
}


#if defined(LUA_VERSION_NUM) && LUA_VERSION_NUM >= 501
 TOLUA_API int luaopen_NeoGame (lua_State* tolua_S) {
 return tolua_NeoGame_open(tolua_S);
};
#endif

