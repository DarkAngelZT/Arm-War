class NeoGraphics
{
public:
	void Update();

	static NeoGraphics* getInstance();

	SfxManager*getSfxManager();
	std::string GetAvailableResolution();
	void setWindowCaption(const std::string& title);
	irr::gui::IGUIFont* LoadTTFFont(const std::string& filePath, int size);
	void RenderUI();

	irr::scene::IAnimatedMesh* getMesh(std::string&file);
	irr::scene::IAnimatedMeshSceneNode* AddAnimatedMeshSceneNode(
			irr::scene::IAnimatedMesh* mesh, irr::scene::ISceneNode* parent = 0,
			int id = -1, const irr::core::vector3d<float>& position =
					irr::core::vector3d<float>(0, 0, 0),
			const irr::core::vector3d<float>& rotation = irr::core::vector3d<
					float>(0, 0, 0), const irr::core::vector3d<float>& scale =
					irr::core::vector3d<float>(1.0f, 1.0f, 1.0f),
			bool alsoAddIfMeshPointerZero = false);

	irr::scene::IMeshSceneNode* AddMeshSceneNode(irr::scene::IMesh* mesh,
			irr::scene::ISceneNode* parent = 0, int id = -1,
			const irr::core::vector3d<float>& position = irr::core::vector3d<
					float>(0, 0, 0),
			const irr::core::vector3d<float>& rotation = irr::core::vector3d<
					float>(0, 0, 0), const irr::core::vector3d<float>& scale =
					irr::core::vector3d<float>(1.0f, 1.0f, 1.0f),
			bool alsoAddIfMeshPointerZero = false);

	irr::scene::ICameraSceneNode * AddCameraSceneNode(
			irr::scene::ISceneNode* parent = 0,
			const irr::core::vector3d<float>& position = irr::core::vector3d<
					float>(0, 0, 0), const irr::core::vector3d<float>& lookat =
					irr::core::vector3d<float>(0, 0, 100), int id = -1,
			bool makeActive = true);

	irr::scene::ICameraSceneNode * AddCameraSceneNodeMaya(
			irr::scene::ISceneNode* parent = 0, float rotateSpeed = -1500.f,
			float zoomSpeed = 200.f, float translationSpeed = 1500.f,
			signed int id = -1, float distance = 70.f, bool makeActive = true);

	irr::scene::ICameraSceneNode * AddCameraSceneNodeFPS(
			irr::scene::ISceneNode* parent = 0, float rotateSpeed = 100.0f,
			float moveSpeed = 0.5f, int id = -1, irr::SKeyMap* keyMapArray = 0,
			int keyMapSize = 0, bool noVerticalMovement = false, int jumpSpeed =
					0.f, bool invertMouse = false, bool makeActive = true);

	irr::scene::I3rdPersonCamera* AddCamera3rdPerson(
			irr::scene::ISceneNode*targetNode, irr::scene::ISceneNode* parent =
					0, int id = -1, float rotationSpeed = 100, float zoomSpeed =
					1, float maxVerticalAngel = 20, float maxZoom = 20,
			bool makeActive = true);

	irr::scene::IMeshSceneNode* AddCubeSceneNode(float size = 10.0f,
			irr::scene::ISceneNode* parent = 0, int id = -1,
			const irr::core::vector3d<float>& position = irr::core::vector3d<
					float>(0, 0, 0),
			const irr::core::vector3d<float>& rotation = irr::core::vector3d<
					float>(0, 0, 0), const irr::core::vector3d<float>& scale =
					irr::core::vector3d<float>(1.0f, 1.0f, 1.0f));

	irr::scene::IMeshSceneNode* AddSphereSceneNode(float radius = 5.0f,
			int polyCount = 16, irr::scene::ISceneNode* parent = 0, int id = -1,
			const irr::core::vector3d<float>& position = irr::core::vector3d<
					float>(0, 0, 0),
			const irr::core::vector3d<float>& rotation = irr::core::vector3d<
					float>(0, 0, 0), const irr::core::vector3d<float>& scale =
					irr::core::vector3d<float>(1.0f, 1.0f, 1.0f));

	irr::scene::ILightSceneNode * AddLightSceneNode(
			irr::scene::ISceneNode* parent = 0,
			const irr::core::vector3d<float>& position = irr::core::vector3d<
					float>(0, 0, 0), irr::video::SColorf color =
					irr::video::SColorf(1.0f, 1.0f, 1.0f),
			float radius = 100.0f, int id = -1);

	irr::scene::IBillboardSceneNode * AddBillboardSceneNode(
			irr::scene::ISceneNode* parent = 0,
			const irr::core::dimension2d<float>& size = irr::core::dimension2d<
					float>(10.0f, 10.0f),
			const irr::core::vector3d<float>& position = irr::core::vector3d<
					float>(0, 0, 0), int id = -1, irr::video::SColor colorTop =
					0xFFFFFFFF, irr::video::SColor colorBottom = 0xFFFFFFFF);

	irr::scene::IMeshSceneNode* AddOctreeSceneNode(
			irr::scene::IAnimatedMesh* mesh, irr::scene::ISceneNode* parent = 0,
			int id = -1, int minimalPolysPerNode = 512,
			bool alsoAddIfMeshPointerZero = false);

	irr::scene::IMeshSceneNode* AddOctreeSceneNode(irr::scene::IMesh* mesh,
			irr::scene::ISceneNode* parent = 0, int id = -1,
			int minimalPolysPerNode = 256,
			bool alsoAddIfMeshPointerZero = false);

	irr::scene::ISceneNode* AddSkyDomeSceneNode(irr::video::ITexture* texture,
			unsigned int horiRes = 16, unsigned int vertRes = 8,
			float texturePercentage = 0.9, float spherePercentage = 2.0,
			float radius = 1000.f, irr::scene::ISceneNode* parent = 0, int id =
					-1);

	irr::scene::IParticleSystemSceneNode * AddParticleSystemSceneNode(
			bool withDefaultEmitter = true, irr::scene::ISceneNode* parent = 0,
			int id = -1, const irr::core::vector3d<float>& position =
					irr::core::vector3d<float>(0, 0, 0),
			const irr::core::vector3d<float>& rotation = irr::core::vector3d<
					float>(0, 0, 0), const irr::core::vector3d<float>& scale =
					irr::core::vector3d<float>(1.0f, 1.0f, 1.0f));

	irr::scene::ISceneNode* AddEmptySceneNode(
			irr::scene::ISceneNode* parent = 0, int id = -1);

	irr::scene::IDummyTransformationSceneNode* AddDummyTransformationSceneNode(
			irr::scene::ISceneNode* parent = 0, int id = -1);

	irr::scene::ITextSceneNode* AddTextSceneNode(irr::gui::IGUIFont* font,
			const std::string&text, irr::video::SColor color =
					irr::video::SColor(100, 255, 255, 255),
			irr::scene::ISceneNode* parent = 0,
			const irr::core::vector3d<float>& position = irr::core::vector3d<
					float>(0, 0, 0), float id = -1);

	irr::scene::ISceneNode*AddWaterSurfaceNode(irr::scene::IMesh*mesh,
			float waveHight = 2.0f, float waveSpeed = 300.0f, float waveLength =
					10.0f, irr::scene::ISceneNode*parent = 0, int id = -1,
			const irr::core::vector3d<float>& position = irr::core::vector3d<
					float>(0, 0, 0), const irr::core::vector3d<float>&rotation =
					irr::core::vector3d<float>(0, 0, 0),
			const irr::core::vector3d<float>& scale =
					irr::core::vector3d<float>(1, 1, 1));

	void ITextNodeSetText(irr::scene::ITextSceneNode*node,
			const std::string& text);

	irr::scene::IParticleAffector* CreateColourAffactorQ(
			const irr::video::SColor& targetColor0,
			const irr::video::SColor& targetColor1);

	irr::scene::IMesh* CreateQuadMesh(const std::string&name,
			const irr::core::dimension2d<float>& tileSize,
			const irr::core::dimension2d<unsigned>& tileCount =
					irr::core::dimension2d<unsigned>(1, 1),
			const irr::core::dimension2d<float>& textureRepeatCount =
					irr::core::dimension2d<float>(1.f, 1.f));
	irr::scene::IMesh* CreateCubeMesh(const std::string&name,
			const irr::core::vector3d<float>& size = irr::core::vector3d<float>(
					10.0f, 10.0f, 10.0f));
	irr::scene::IMesh* CreateSphereMesh(const std::string&name, float radius);

	irr::scene::ICameraSceneNode* GetActiveCamera();
	void SetActiveCamera(irr::scene::ICameraSceneNode*camera);
	void SetAmbientLight(const irr::video::SColor& colour);

	bool loadScene(std::string file);

	float getFps();
	float getDeltaTime() const;
	irr::core::dimension2d<unsigned> getScreenSize();
	std::string getTextFromOSClipboard();
	void setAppClipboardString(const std::string& text);
	std::string getAppClipboardString();
	void setOSClipboardText(const std::string& text);
	std::string getOperatingSystemVersion();
	std::vector<std::string> getMeshTexturePath(irr::scene::IMesh*mesh);
	void MakePlanarTextureMapping(irr::scene::IMesh*mesh, float resolution);
	void MakePlanarTextureMapping(irr::scene::IMesh*mesh,
			float resolution_herizon, float resolution_vertical,
			int project_axis, const irr::core::vector3d<float>& offset =
					irr::core::vector3d<float>(0, 0, 0));
	void ScaleTextureCoords(irr::scene::IMesh*mesh,
			const irr::core::vector2d<float>& factor);
	void CleanUp();
	irr::video::ITexture* LoadTexture(std::string& path);
	void UnloadTexture(irr::video::ITexture*texture);

	void setShadowColor(irr::video::SColor color);

	irr::core::vector2d<int> getPositionOnScreen(
			const irr::core::vector3d<float>& position);
	irr::core::vector3d<float> get3DPositionFromScreen(
			const irr::core::vector2d<int>& screen_position);

	//get a game object by attached scene node index(用scene node反向查找保存它的game object)
	GameObject*GetAttachedGameObject(irr::scene::ISceneNode*node);
	void RemoveSceneNode(irr::scene::ISceneNode*node);
	void ClearAllNodes();

};
