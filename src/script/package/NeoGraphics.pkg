class NeoGraphics
{
public:
	void Update();

	static NeoGraphics* getInstance();

	SfxManager*getSfxManager();
	std::string GetAvailableResolution();
	void setWindowCaption(const std::string& title);

	void RenderUI();

	irr::scene::IAnimatedMesh* getMesh(std::string&file);
	irr::scene::IAnimatedMeshSceneNode* AddAnimatedMeshSceneNode(
			irr::scene::IAnimatedMesh* mesh, irr::scene::ISceneNode* parent = 0,
			int id = -1, const irr::core::vector3d<float>& position =
					irr::core::vector3d<float>(0, 0, 0),
			const irr::core::vector3d<float>& rotation = irr::core::vector3d<float>(0, 0,
					0), const irr::core::vector3d<float>& scale =
					irr::core::vector3d<float>(1.0f, 1.0f, 1.0f),
			bool alsoAddIfMeshPointerZero = false);

	irr::scene::IMeshSceneNode* AddMeshSceneNode(irr::scene::IMesh* mesh,
			irr::scene::ISceneNode* parent = 0, int id = -1,
			const irr::core::vector3d<float>& position = irr::core::vector3d<float>(0, 0,
					0), const irr::core::vector3d<float>& rotation =
					irr::core::vector3d<float>(0, 0, 0),
			const irr::core::vector3d<float>& scale = irr::core::vector3d<float>(1.0f, 1.0f,
					1.0f), bool alsoAddIfMeshPointerZero = false);

	irr::scene::ICameraSceneNode * AddCameraSceneNode(
			irr::scene::ISceneNode* parent = 0,
			const irr::core::vector3d<float>& position = irr::core::vector3d<float>(0, 0,
					0), const irr::core::vector3d<float>& lookat =
					irr::core::vector3d<float>(0, 0, 100), int id = -1,
			bool makeActive = true);

	irr::scene::ICameraSceneNode * AddCameraSceneNodeMaya(
			irr::scene::ISceneNode* parent = 0, float rotateSpeed = -1500.f,
			float zoomSpeed = 200.f, float translationSpeed = 1500.f,
			signed int id = -1, float distance = 70.f, bool makeActive = true);

	irr::scene::ICameraSceneNode * AddCameraSceneNodeFPS(
			irr::scene::ISceneNode* parent = 0, float rotateSpeed = 100.0f,
			float moveSpeed = 0.5f, int id = -1, irr::SKeyMap* keyMapArray = 0,
			int keyMapSize = 0, bool noVerticalMovement = false, int jumpSpeed =
					0.f, bool invertMouse = false, bool makeActive = true);

	irr::scene::IMeshSceneNode* AddCubeSceneNode(float size=10.0f, irr::scene::ISceneNode* parent=0, int id=-1,
			const irr::core::vector3d<float>& position = irr::core::vector3d<float>(0,0,0),
			const irr::core::vector3d<float>& rotation = irr::core::vector3d<float>(0,0,0),
			const irr::core::vector3d<float>& scale = irr::core::vector3d<float>(1.0f, 1.0f, 1.0f));

	irr::scene::IMeshSceneNode* AddSphereSceneNode(float radius = 5.0f,
			int polyCount = 16, irr::scene::ISceneNode* parent = 0, int id = -1,
			const irr::core::vector3d<float>& position = irr::core::vector3d<float>(0, 0, 0),
			const irr::core::vector3d<float>& rotation = irr::core::vector3d<float>(0, 0, 0),
			const irr::core::vector3d<float>& scale = irr::core::vector3d<float>(1.0f, 1.0f, 1.0f));

	irr::scene::ILightSceneNode * AddLightSceneNode(
			irr::scene::ISceneNode* parent = 0,
			const irr::core::vector3d<float>& position = irr::core::vector3d<float>(0, 0,
					0),
			irr::video::SColorf color = irr::video::SColorf(1.0f, 1.0f, 1.0f),
			float radius = 100.0f, int id = -1);

	irr::scene::IBillboardSceneNode * AddBillboardSceneNode(
			irr::scene::ISceneNode* parent = 0,
			const irr::core::dimension2d<float>& size = irr::core::dimension2d<float>(
					10.0f, 10.0f), const irr::core::vector3d<float>& position =
					irr::core::vector3d<float>(0, 0, 0), int id = -1,
			irr::video::SColor colorTop = 0xFFFFFFFF,
			irr::video::SColor colorBottom = 0xFFFFFFFF);

	irr::scene::IMeshSceneNode* AddOctreeSceneNode(
			irr::scene::IAnimatedMesh* mesh, irr::scene::ISceneNode* parent = 0,
			int id = -1, int minimalPolysPerNode = 512,
			bool alsoAddIfMeshPointerZero = false);

	irr::scene::IMeshSceneNode* AddOctreeSceneNode(irr::scene::IMesh* mesh,
			irr::scene::ISceneNode* parent = 0, int id = -1,
			int minimalPolysPerNode = 256,
			bool alsoAddIfMeshPointerZero = false);

	irr::scene::ISceneNode* AddSkyDomeSceneNode(irr::video::ITexture* texture,
					unsigned int horiRes=16, unsigned int vertRes=8,
					float texturePercentage=0.9, float spherePercentage=2.0,float radius = 1000.f,
					irr::scene::ISceneNode* parent=0, int id=-1);

	irr::scene::IParticleSystemSceneNode * AddParticleSystemSceneNode(
			bool withDefaultEmitter = true, irr::scene::ISceneNode* parent = 0,
			int id = -1, const irr::core::vector3d<float>& position =
					irr::core::vector3d<float>(0, 0, 0),
			const irr::core::vector3d<float>& rotation = irr::core::vector3d<float>(0, 0,
					0), const irr::core::vector3d<float>& scale =
					irr::core::vector3d<float>(1.0f, 1.0f, 1.0f));

	irr::scene::ISceneNode* AddEmptySceneNode(
			irr::scene::ISceneNode* parent = 0, int id = -1);

	irr::scene::IDummyTransformationSceneNode* AddDummyTransformationSceneNode(
			irr::scene::ISceneNode* parent = 0, int id = -1);

	irr::scene::ICameraSceneNode* GetActiveCamera();
	void SetActiveCamera(irr::scene::ICameraSceneNode*camera);
	void SetAmbientLight(const irr::video::SColor& colour);

	bool loadScene(std::string file);

	float getFps();
	std::string getTextFromOSClipboard();
	void setAppClipboardString(const std::string& text);
	std::string getAppClipboardString();
	void setOSClipboardText(const std::string& text);
	std::string getOperatingSystemVersion();
	std::vector<std::string> getMeshTexturePath(irr::scene::IMesh*mesh);
	void CleanUp();
	irr::video::ITexture* LoadTexture(std::string& path);
	void UnloadTexture(irr::video::ITexture*texture);

	//get a game object by attached scene node index(用scene node反向查找保存它的game object)
	GameObject*GetAttachedGameObject(irr::scene::ISceneNode*node);
	//bind a scene node index to game object
	void BindSceneNodeToGameObject(irr::scene::ISceneNode*node, GameObject*go);
	void RemoveSceneNode(irr::scene::ISceneNode*node);
	void ClearAllNodes();

};
