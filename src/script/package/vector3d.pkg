namespace irr
{
namespace core
{
	class vector3d
	{
	TOLUA_TEMPLATE_BIND(T, int,float)
	public:
		//! Default constructor (null vector).
		vector3d();
		//! Constructor with three different values
		vector3d(T nx, T ny, T nz);
		//! Constructor with the same value for all elements
		vector3d(T n);
		//! Copy constructor
		vector3d(const vector3d<T>& other);

		// operators

		vector3d<T> operator-() const;

		//vector3d<T>& operator=(const vector3d<T>& other);

		vector3d<T> operator+(const vector3d<T>& other) const;

		vector3d<T> operator+(const T val) const;


		vector3d<T> operator-(const vector3d<T>& other) const;

		vector3d<T> operator-(const T val) const ;


		vector3d<T> operator*(const vector3d<T>& other) const;

		vector3d<T> operator*(const T v) const ;


		vector3d<T> operator/(const vector3d<T>& other) const;

		vector3d<T> operator/(const T v) const ;


		//! sort in order X, Y, Z. Equality with rounding tolerance.
		bool operator<=(const vector3d<T>&other) const;

		//! sort in order X, Y, Z. Difference must be above rounding tolerance.
		bool operator<(const vector3d<T>&other) const;

		//! use weak float compare
		bool operator==(const vector3d<T>& other) const;

		// functions

		//! returns if this vector equals the other one, taking floating point rounding errors into account
		bool equals(const vector3d<T>& other, const T tolerance = (T)ROUNDING_ERROR_float ) const;

		vector3d<T>& set(const T nx, const T ny, const T nz) ;
		vector3d<T>& set(const vector3d<T>& p) ;

		//! Get length of the vector.
		T getLength() const ;

		//! Get squared length of the vector.
		/** This is useful because it is much faster than getLength().
		\return Squared length of the vector. */
		T getLengthSQ() const ;

		//! Get the dot product with another vector.
		T dotProduct(const vector3d<T>& other) const;

		//! Get distance from another point.
		/** Here, the vector is interpreted as point in 3 dimensional space. */
		T getDistanceFrom(const vector3d<T>& other) const;

		//! Returns squared distance from another point.
		/** Here, the vector is interpreted as point in 3 dimensional space. */
		T getDistanceFromSQ(const vector3d<T>& other) const;
		
		//! Calculates the cross product with another vector.
		/** \param p Vector to multiply with.
		\return Crossproduct of this vector with p. */
		vector3d<T> crossProduct(const vector3d<T>& p) const;

		//! Returns if this vector interpreted as a point is on a line between two other points.
		/** It is assumed that the point is on the line.
		\param begin Beginning vector to compare between.
		\param end Ending vector to compare between.
		\return True if this vector is between begin and end, false if not. */
		bool isBetweenPoints(const vector3d<T>& begin, const vector3d<T>& end) const;

		//! Normalizes the vector.
		/** In case of the 0 vector the result is still 0, otherwise
		the length of the vector will be 1.
		\return Reference to this vector after normalization. */
		vector3d<T>& normalize();

		//! Sets the length of the vector to a new value
		vector3d<T>& setLength(T newlength);

		//! Inverts the vector.
		vector3d<T>& invert();

		//! Rotates the vector by a specified number of degrees around the Y axis and the specified center.
		/** \param degrees Number of degrees to rotate around the Y axis.
		\param center The center of the rotation. */
		void rotateXZBy(double degrees, const vector3d<T>& center=vector3d<T>());

		//! Rotates the vector by a specified number of degrees around the Z axis and the specified center.
		/** \param degrees: Number of degrees to rotate around the Z axis.
		\param center: The center of the rotation. */
		void rotateXYBy(double degrees, const vector3d<T>& center=vector3d<T>());

		//! Rotates the vector by a specified number of degrees around the X axis and the specified center.
		/** \param degrees: Number of degrees to rotate around the X axis.
		\param center: The center of the rotation. */
		void rotateYZBy(double degrees, const vector3d<T>& center=vector3d<T>());

		//! Creates an interpolated vector between this vector and another vector.
		/** \param other The other vector to interpolate with.
		\param d Interpolation value between 0.0f (all the other vector) and 1.0f (all this vector).
		Note that this is the opposite direction of interpolation to getInterpolated_quadratic()
		\return An interpolated vector.  This vector is not modified. */
		vector3d<T> getInterpolated(const vector3d<T>& other, double d) const;

		//! Creates a quadratically interpolated vector between this and two other vectors.
		/** \param v2 Second vector to interpolate with.
		\param v3 Third vector to interpolate with (maximum at 1.0f)
		\param d Interpolation value between 0.0f (all this vector) and 1.0f (all the 3rd vector).
		Note that this is the opposite direction of interpolation to getInterpolated() and interpolate()
		\return An interpolated vector. This vector is not modified. */
		vector3d<T> getInterpolated_quadratic(const vector3d<T>& v2, const vector3d<T>& v3, double d) const;

		//! Sets this vector to the linearly interpolated vector between a and b.
		/** \param a first vector to interpolate with, maximum at 1.0f
		\param b second vector to interpolate with, maximum at 0.0f
		\param d Interpolation value between 0.0f (all vector b) and 1.0f (all vector a)
		Note that this is the opposite direction of interpolation to getInterpolated_quadratic()
		*/
		vector3d<T>& interpolate(const vector3d<T>& a, const vector3d<T>& b, double d);


		vector3d<T> getHorizontalAngle() const;

		//! Get the spherical coordinate angles
		/** This returns Euler degrees for the point represented by
		this vector.  The calculation assumes the pole at (0,1,0) and
		returns the angles in X and Y.
		*/
		vector3d<T> getSphericalCoordinateAngles() const;

		//! Builds a direction vector from (this) rotation vector.
		/** This vector is assumed to be a rotation vector composed of 3 Euler angle rotations, in degrees.
		The implementation performs the same calculations as using a matrix to do the rotation.

		\param[in] forwards  The direction representing "forwards" which will be rotated by this vector.
		If you do not provide a direction, then the +Z axis (0, 0, 1) will be assumed to be forwards.
		\return A direction vector calculated by rotating the forwards direction by the 3 Euler angles
		(in degrees) represented by this vector. */
		vector3d<T> rotationToDirection(const vector3d<T> & forwards = vector3d<T>(0, 0, 1)) const;


		//! X coordinate of the vector
		T X;

		//! Y coordinate of the vector
		T Y;

		//! Z coordinate of the vector
		T Z;
	};
	
	//! Typedef for a float 3d vector for lua
	$renaming vector3d<float> @ vector3df

	//! Typedef for an integer 3d vector for lua
	$renaming vector3d<int> @ vector3di

} // end namespace core
} // end namespace irr
