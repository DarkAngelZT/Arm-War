class GameObject
{
public:

	Component* getComponent(std::string&key);
	void AddComponent(std::string&key, Component*comp);
	void RemoveComponent(std::string&key);
	irr::scene::ISceneNode* GetSceneNode();
	void setSceneNode(irr::scene::ISceneNode*node);

	void setParent(GameObject*);
	GameObject*getParent() const;
	void AddChild(GameObject*);
	void RemoveChild(GameObject*child);
	//remove all child (just unregister them, won't delete)
	void RemoveChildren();

	//std::set<GameObject*>& GetChidren();

	void DestoryChild(GameObject*child);
	void DestroyChidren();
	//transform functions
	void setPosition(irr::core::vector3d<float>& pos);
	void setRotation(irr::core::vector3d<float>& rot);
	irr::core::vector3d<float> getPosition() const;
	irr::core::vector3d<float> getRotation() const;
	int getId() const;
	void setId(int id);
	bool isActive() const;
	void setActive(bool active);
	//physics
	RigidBody* getRigidBody();
	RigidBody* AddRigidBody(int collisionShape, float mass);
	RigidBody* AddRigidBody(int collisionShape, float mass,
			const irr::core::vector3d<float>& position,
			const irr::core::vector3d<float>& rotation);
	virtual void ResetPhysicsStates();

	std::string getLuaIdentifier() const;
	void setLuaIdentifier(const std::string& luaIndentifier);
	virtual std::string getObjectType();

	void setOnCollisionEnterLuaCallback(std::string&func);
	void setOnCollisionLuaCallback(std::string&func);
	void setOnCollisionExitLuaCallback(std::string&func);
};

